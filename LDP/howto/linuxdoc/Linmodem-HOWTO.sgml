<!doctype linuxdoc system>

<!--

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Changelog:
081600 - created first version, including lucent info
081700 - change to mini-howto, reorganize somewhat
081900 - ESScom
082200 - Point to modem howto, add troubleshooting
082300 - Finally got info on PCTel.  The installation recipes
section can be combined for all of them, methinks.
082400 - Reorganization, refined combined installation recipes
082500 - ppp2214.o link, post-install and pctel, module alignment is discretionary
082800 - MarvS patches, cleanup, some FAQ entries
083100 - Werner Heuser's/LiLAC suggestions: 3Com MiniPCI RFC, older kernels, setserial, 
       - MarvS's fixscript cleanup
090300 - Pavel says open source lucent driver is no longer under development.
         Small other fixes.
092200 - Back to work:  add in fixed fixscript
                        fix up FAQ quite a bit
092800 - Added conexant section
       - added link to homepage for recent version
       - fixed second ESS link
       - fixscript fixed for esscom.  Not pretty; hope to have a cleaner version
         from Mark soon.
 -->


<article>


<title>Linmodem-Mini-HOWTO (DRAFT)   <!-- insert your title here -->
<author>Sean Walbran <tt/sean(at)walbran.org/ and Marvin Stodolsky <tt/stodolsk(at)erols.com/
<date>v0.26, 28 September 2000           <!-- always have a version number
and a date -->
<abstract>                          <!-- the abstract: a short and precise description -->
<nidx>template</nidx>    <!-- add indexing keywords as you go along -->
                         <!-- nidx means the indexed word is not in output of main text, only in the index -->

This document describes Linmodem (winmodem hardware) support under
Linux.  At this point, such support is very limited, almost exclusively
in the form of manufacturer-created but unsupported binary kernel modules.
This document addresses the special complications dealing with these
binary modules rather than with source code, particularly focusing on the
compromises of using mis-matched binaries and kernels.  

</abstract>

<!-- Table of contents -->
<toc>

<!-- Begin the document -->


<sect>Introduction

<p>
<nidx>template!introduction</nidx>   <!-- here introduction is a sub entry of template, exclamationamrk is separator -->
This is the Linux Linmodem Mini-HOWTO document. It is intended as
a quick reference
to help you find out if there is a way to get your (so-called) winmodem
working under Linux, and, if so, how to do it.  You should understand
from the outset that there is probably <em>no</em> support for your winmodem:
 at this time,
there is limited support for such modems, often in the form of vendor-created
but vendor-unsupported,
binary-only kernel modules; however, a small number of open-source projects
exist.  For the most up-to-date information about available Linmodem drivers,
visit  
<url url="http://www.kcdata.com/~gromitkc/winmodem.html#drivers" name="Rob Clark's site">
and the <url url="http://www.linmodems.org/"  name="Linmodems.org"> site.
General modem issues, such as
IRQ settings and dialup scripts, are
dealt with much more thoroughly in the more general 
<url url="http://www.linuxdoc.org/HOWTO/Modem-HOWTO.html" name="Modem-HOWTO">,
<url url="http://www.linuxdoc.org/HOWTO/Serial-HOWTO.html" name="Serial-HOWTO">,
<url url="http://www.linuxdoc.org/HOWTO/PPP-HOWTO/index.html" name="PPP-HOWTO">,
and other related HOWTOs available at the <url url="http://www.linuxdoc.org/" 
name="Linux Documentation Project"> site.

<sect1>Copyright

<!--
This Mini-HOWTO is copyrighted 2000 Sean Walbran, Marvin Stodolsky

Unless otherwise stated, Linux HOWTO documents are copyrighted by their
respective authors. Linux HOWTO documents may be reproduced and distributed
in whole or in part, in any medium physical or electronic, as long as
this copyright notice is retained on all copies. Commercial redistribution
is allowed and encouraged; however, the author would like to be notified of
any such distributions.

All translations, derivative works, or aggregate works incorporating
any Linux HOWTO documents must be covered under this copyright notice.
That is, you may not produce a derivative work from a HOWTO and impose
additional restrictions on its distribution. Exceptions to these rules
may be granted under certain conditions; please contact the Linux HOWTO
coordinator at the address given below.

In short, we wish to promote dissemination of this information through as
many channels as possible. However, we do wish to retain copyright on the
HOWTO documents, and would like to be notified of any plans to redistribute
the HOWTOs.

If you have questions, please contact
at linux-howto(at)metalab.unc.edu via email.

-->
<p>
Copyright (c) 2000 by Sean Walbran, Marvin Stodolsky
<P>
Please freely copy and distribute (sell or give away) this document in
any format.  It's requested that corrections and/or comments be fowarded
to the document maintainer. You may create a derivative work and distribute
it provided that you:

<itemize>
<item>
Send your derivative work (in the most suitable format such as
sgml) to the LDP (Linux Documentation Project) or the like for posting
on the Internet.  If not the LDP, then let the LDP know where it is
available.
<item>
License the derivative work with this same license or use GPL.
Include a copyright notice and at least a pointer to the license used.
<item>
Give due credit to previous authors and major contributors.
</itemize>

  <P>
If you're considering making a derived work other than a translation,
it's requested that you discuss your plans with the current maintainer.



<sect1>Disclaimer
<p>

Use the information in this document at your own risk. I disavow any
potential liability for the contents of this document. Use of the
concepts, examples, and/or other content of this document is entirely
at your own risk.

All copyrights are owned by their owners, unless specifically noted
otherwise.  Use of a term in this document should not be regarded as
affecting the validity of any trademark or service mark.
In particular, since the term "Winmodem" is a trademark of US Robotics/3Com, 
we use the term "winmodem" here as does Rob Clark: to be read as "Winmodems(tm),
host-based modems, HCF-modems, HSP-modems, and all similar
modem-like hardware."  Linux is a trademark of Linus Torvalds.

Naming of particular products or brands should not be seen as endorsements.

It are strongly recommended to make a backup of important and/or
relevant files before any installation procedure.

<sect1>Credits
<p>
A large amount of information contained in this document comes a variety
of great sources such as
<url url="http://www.kcdata.com/~gromitkc/winmodem.html" name="Rob Clark's site">,
<url url="http://www.linmodems.org/" name="Linmodems.org">, 
and the mailing lists there, and
Werner Heuser's <url url="http://home.snafu.de/wehe" 
name="LiLAC: Linux with LAptop Computers"> pages.
<p>
Thanks to Willie Green (willjr(at)lcc.net) for his fine contribution
of the ESS modem information.
<p>
Thanks to Mark Spieth (mark(at)digivation.com.au) for
discussions, advice, and the contribution of
his "fixscript" for module kernel version editing (originally to the Linmodem
mailing list
<url url="http://linmodems.org/cgi-bin/ezmlm-cgi?1:msp:1350:lpcibkabibmohmocijoj"
 name="here">
, and a newer version which is included in the appendix to this document).
<p>
Thanks to Werner Heuser <tt/wehe(at)snafu.de/ for tips on setting serial
parameters with older kernels, and a number of other good points.
<p>
Other individual credits are given in the body of the text where appropriate.
<p>
This document itself was created using the SGML HOWTO template
created by Stein Gojen, as described in the 
<url url="http://www.linuxdoc.org/LDP/LDP-Author-Guide/index.html" name="HOWTO-HOWTO">.
site.
<p>
<sect1> Updates and Corrections
<p>
The most recent HTML version of this document is available at
<url url="http://walbran.org/sean/linux/linmodem-howto.html">,
SGML at <url url="http://walbran.org/sean/linux/linmodem-howto.sgml">,
and some other formats in the same directory.
<p>
Do you have a Linmodem which works, but is not described here?  Are you
developing a driver?  Do you think something in this document is incorrect
or misleading?  Do you think that your or someone else's work has been
used here but not appropriately credited?  Please don't hesitate to
email me at sean(at)walbran.org with corrections and suggestions. 
<p>
<!--
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
 -->


<sect>Linmodems
<p>
<sect1> What is a Linmodem?
<p>
A Linmodem is the Linux implementation of a "winmodem" (see disclaimer).
These devices are 'less than' a modem in the sense that they depend
on software to perform, to a greater or lesser extent, the functions traditionally
handled by modem hardware.  The rationale for this is, of course,
that software is cheaper than hardware, and can be
upgraded/expanded/improved without
the use of screwdrivers (usually); however, for the modem to
function at all, one requires software that can
run on one's preferred operating system.
<p>
<sect1> Which Linmodem hardware is supported?
<p>
At the time of this writing, only a few winmodems will work under
Linux:
<p>

<sect2>Conexant/Rockwell HSF
<p>
There exists a driver at
<url url="http://www.olitec.com/pci56kv2.html"> which was only
recently (Sept. 2000) "discovered" by Denis Havlik (denis(at)mandrakesoft.com).
  The page is in French,
but the installation commands are given on the page in boldface red text.  
Essentially,
download the package, unpack it with <tt>tar -zxvf</tt>, and run
the installation script <tt>ins_all</tt>.  Some things already
known about the driver include:
<itemize> 
<item> It was compiled against the RedHat 6.2 kernel 2.2.14-5.0.
<item> It appears to be tuned for the French telephone system.
Mark Allen posted an <tt>.inf</tt> file for some other phone systems
to the linmodems mailing list at <url url="http://linmodems.org/cgi-bin/ezmlm-cgi?1:msp:1773:nlifphijcfgckncagkpa">.  Also, you can try disabling
dial-tone detection with your dialer. 
</itemize>
This driver has not yet been fully explored; check out the mailing list archives
at <url url="linmodems.org"> for further discussion and information.

<sect2>Ambient Technology (formerly Cirrus Logic)
<p>
Mikhail Moreyra has written a GPL'ed driver for the CL-MD5620DT chipset
which can do up to 33.6 kbps; however, this is alpha software
and should be treated with due care.  The driver can be obtained at
<url url="http://linmodems.org/CLModem-0.3.0.tar.gz">.  Recently,
Gabriel Gambetta (ggambett(at)internet.com.uy) issued a patched
version of the driver to allow standard AT modem commands;
you can get this version at Rob Clark's site
<url url="http://www.o2.net/~gromitkc/clm/CLModem-0.3.0+gg.tar.gz" name="here">. 
<p>
In addition,
<url url="http://www.kcdata.com/~gromitkc/winmodem.html" name="Rob Clark's site"> 
reports
that Ambient may release Linux drivers for their MD563X HaM modems at 
<url url="http://www.ambient.com"> at some undetermined point in the future.

<sect2>Lucent LT
<p>
  There exists a manufacturer-unsupported, binary-only
kernel module compiled for the 2.2.12 Linux kernel released
for Lucent LT (PCI and ISA) modems.  As discussed below, this
module will work with
minor complaints under kernel 2.2.14, and with some additional
effort under kernels up through 2.2.17,
but the module does
not insert into the (still experimental) 2.40-test6 kernel.
The driver can be obtained at
<url url="http://linmodems.org/linux568.zip">
<p>
Some open source tools for use with Lucent modems are
available at <url url="http://www.close.u-net.com/ltmodem.html">.
Pavel Machek writes that "It is not too useful,
however: it is a hardware driver, and without a v.34 protocol stack, you
can't connect to your ISP. It is enough to turn your Lucent winmodem
into an answering machine, however." 


<p>
<sect2>PCTel
<p>
  Binary drivers for PCI, AMR, and Zoltrix Phantom
can be found at 
<url url="http://www.kcdata.com/~gromitkc/winmodem.html#drivers">
<p>
<sect2>ESS
<p>
  Binary drivers for ES56T-PI (PCI)  and ES56V-I (ISA) 
can be obtained at
<itemize>
<item>
ISA: <url url="ftp://ftp.esstech.com/pub/modem/isa/unsupported/56v-i/linux/kernel61/linux111.zip"> or
<item>
PCI: <url url="ftp://ftp.esstech.com/pub/modem/pci/unsupported/56t-pi/linux/Kernel61/111.zip">.
man</itemize>
<p>
<sect2>3Com Mini-PCI
<p>
  A request for comments was posted by a 3Com official
about the possible demand for a binary-only driver for their miniPCI combination
NIC/winmodem on the <url url="http://linmodems.org/cgi-bin/ezmlm-cgi?1:msp:1229:cilpipdmolabpbbbibgd"
 name="Linmodems.org mailing list">.  Though to my knowledge no driver has yet been
 released, Werner Heuser's <url 
url="http://home.snafu.de/wehe/minipci_linux.html" name="miniPCI page"> has more information
and links.

<p>
<sect1> How can I find out if my GeeWhiz 9.8.7 Modem / Laptop has one of these chipsets?
<p>
<sect2> Information from the system
<p>
If you're already running Linux, you can obtain information about
installed hardware using commands like:
<itemize>
<item> PCI: <tt> cat /proc/pci </tt>
<item> ISA: <tt> pnpdump </tt>
<item> Internal PCMCIA: <tt> cardctl ident </tt>
<item> <tt>dmesg</tt> 
</itemize>
<p>
The Device Manager under Windows can provide similar information, but it should be
noted that a manufacturer will often simply put its brand name on a built-in modem, so
this information may not be as useful as you might hope (e.g., what chipset does
a "Compaq Internal 56k" modem have?).
<p>
<sect2> Modem names and Identification Numbers
<p>
If you know the precise name of your modem, you can try searching
the large Linux Modem Compatibility
<url url="http://www.o2.net/~gromitkc/winmodem.html#Database" name="database">
at
<url url="http://www.kcdata.com/~gromitkc/winmodem.html" name="Rob Clark's site">.
The color/letter code on the left side of the table will indicate if
your modem is known to function or not under Linux.  The code "LM" indicates
a Linmodem, and the modem notes should indicate which driver you need.
A "WM" means it's a winmodem, but no support is known to exist.
Be careful not to assume that modems with similar names will contain
the same chipsets, or will necessarily behave similarly whatsoever!  
Your WhizBang LX56
and your friend's WhizBang GT56 could have entirely different innards. 
<p>
If you do not know the precise name of your modem, you can search based
on the identification number of the modem:
on every modem there must be printed a registration number,
which may either be the board producer's designation, or,
alternatively, an FCC registration number.
An example photo of such an ID number on a modem board can be found at
<url url="http://www.kcdata.com/~gromitkc/fcc1.jpg"> on 
<url url="http://www.kcdata.com/~gromitkc/winmodem.html" name="Rob Clark's site">.
You can then proceed to use your web browser to search his
<url url="http://www.o2.net/~gromitkc/winmodem.html#Database" name="table">
of modems and FCC ID's 
to obtain chipset/driver information.  Alternatively, you can directly
search the US Federal Communications Commission (FCC) database at
<url url="http://www.fcc.gov/oet/fccid/">.
Read the directions carefully, and be careful not to confuse O (the letter)
with 0 (the number), and other possible mixups.
<p>
<sect2> Laptops, Internal Modems, Machines You Don't Own
<p>
You may not be able to obtain the FCC ID number if you have a laptop
which you prefer not to open up, or are looking to buy a particular
machine and the vendor has not been polite enough to provide you
with the information nor a sample
box for you to take apart and play with.  In these
cases, you have a few options:
<itemize>
<item>
Werner Heuser's <url url="http://home.snafu.de/wehe/modem_linux.html" 
name="LiLAC: Linux Modems"> and <url url="http://home.snafu.de/wehe/minipci_linux.html"
name="LiLAC: Linux Mini-PCI"> pages include lists of specifications for laptops
with internal modems and NIC's, as well as useful tips for obtaining more
information in case the model is not listed there.
<p>
<item>
Kenneth Harker's <url url="http://www.cs.utexas.edu/users/kharker/linux-laptop/"
name="Linux on Laptops"> site indexes a large number of user-created sites
describing their experiences with Linux on particular laptop models.
<p>
<item>
If you have physical access to, e.g., a floor demonstration model,
Marvin Stodolsky writes of a way to actually test a laptop or PC:
<p>
There is a quick test that can be run from a floppy disk before you
commit to buy the the just advertised WhizBang PC/Laptop.  The intent is
to use Linux itself to check whether the pre-installed modem is
supported under Linux.
<p>
Most Linux
rescue floppies boot up a RAM disk, without "touching" the hard disks
unless/until specifically commanded to.  A collection of the available
Linux modem drivers can be previously collected on a separate floppy. 
Linux will not install a hardware dependent module in the kernel unless
the compatible hardware is present.  Thus if <tt>lsmod</tt> displays a successful
insertion after:
<verb>
     insmod /mnt/modem-driver1.o
</verb>
or at worst with forcing
<verb>
   insmod -f /mnt/modem-driver1.o
</verb>
there is a good chance that the modem will work under a full Linux
installation.  This insertion test can be repeated in turn with all the
available modem-driverN.o, and hopefully one will succceed. For this
test the DOS formatted floppy disk with drivers is first made accessible
with:
<verb>
      mount /dev/fd0 -t msdos /mnt
</verb>
and drivers can be listed with:
<verb>
      ls /mnt
</verb>
There is a caveat that this test may fail merely because of mismatches
between kernel sources versions of the modem.o and the kernel being used
in the test.  Kernels on the Rescue disks should thus be version matched
as closely as possible with the that of the modem.o.  The Lucent
ltmodem.o and Archtek esscom.o modules were compiled under
kernel-sources-2.2.12, so, for their tests, the kernel on the Rescue
floppy should best be replaced.  The Rescue disk, made from the
Debian  resc1440.bin  by  rawrite.exe under DOS, carries instructions
from substituting and properly activating its kernel.  A suitable kernel
has been compiled and is available at 
<url url="http://walbran.org/sean/linux/stodolsk/kern2212.zip"> along
with a copy of the 
Debian rescue image at 
<url url="http://walbran.org/sean/linux/stodolsk/resc1440.bin">
.  The Linmodem driver modules are listed above.
<p>
There is another caveat, however:  I (Sean) tried this out with a stock
Red Hat 6.2 distribution, and found that it gave me no complaints whatsoever
when I insmod'ed the esscom.o module, despite the fact that I have no
such hardware.  You, therefore, probably want to be sure to use
the Debian rescue disk image given by MarvS above, rather than
one from another distribution.
</itemize>
<p>
<!--
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
 -->
<sect> General Setup and Kernel Module Issues
<p>
<sect1> Kernel Module Support
<p>
All of the drivers listed here are released as kernel modules; therefore,
you must be sure to have a kernel which supports modules.  In addition, 
"module version" support should be enabled to aid the use of 
kernels and modules which are not version matched, as described further
below.
<p>
If you use
a kernel from a reasonably recent Linux distribution, module support
is most likely already enabled.  If you're compiling the kernel yourself, then you
should already be aware of how to enable modules, via the 
<url url="http://www.linuxdoc.org/HOWTO/Kernel-HOWTO.html" name="Kernel HOWTO">
.  In any case, you can check to make sure that the following
settings exist in your kernel configuration  file
(which is usually found under <tt>/usr/src/linux</tt>):
<verb>
CONFIG_MODULES=y
CONFIG_MODVERSIONS=y
</verb>

<p>
<sect1> ISA Plug-n-Play
<p>
If you have an ISA Plug-n-Play modem (such as I do on my
Thinkpad i1411), you will most likely 
need to use isapnptools to allocate resources to the modem card.
For this, you need to have isapnptools installed and have an entry in 
the <tt>/etc/isapnp.conf</tt> file
 for the
modem.  You should read the 
<url url="http://www.linuxdoc.org/HOWTO/Plug-and-Play-HOWTO.html"
 name="Plug-and-Play-HOWTO">
, but if you have no other
ISA devices you're concerned about, basically all you need
to do is:
<enum>
<item> As root, run <tt>pnpdump</tt> to generate a prototype isapnp.conf
file based on your system's current resource usage.
<item> Look for your modem in this output, and uncomment the lines
corresponding to the (otherwise unused) IRQ you wish to use for the
modem.  For example, my isapnp.conf includes:<p>
<verb>
(CONFIGURE ACRd119/1 (LD 0                   
  (INT 0 (IRQ 11 (MODE +E)))                   
  (IO 1 (SIZE 8) (BASE 0x0100) (CHECK))       
  (NAME "ACRd119/1[0]{LT Win Modem        }") 
# (ACT Y)                                    
))                                           
</verb>
Strangely, for me at least, it is necessary to leave
 the <tt>#(ACT Y)</tt> commented out.  If it doesn't work for you one way,
try it the other. 
<item> Copy the file to <tt>/etc/isapnp.conf</tt>
<item> Reboot.  You should see a message along the lines of 'Initializing
ISA PNP devices...OK' on booting.  If it fails, you have probably selected
an IRQ/DMA setting which is already in use; try another of the options
given in the <tt>pnpdump</tt> output.
(Note that it is probably not necessary to reboot, if you run <tt>isapnp</tt>
with the right flags.  However, it's easiest for the beginner to simply reboot
at this point.)
</enum>
<p>
<sect1> PCI Modems
<p>   
To access more information than <tt>cat /proc/pci</tt> gives
for cards with a PCI interface, utilities within the software package
<tt>pciutils</tt> are useful, such as <tt>scanpci</tt> and <tt>lspci</tt>.
<p>
<sect1> Precompiled Modules and Kernel Versions: <tt>insmod -f</tt>, Fixscripting, and ppp.o
<p>
As of the writing of this document, source code is only available for the Ambient Technology
driver and the Lucent LT user-space tools listed above;
 the remainder have been released only as precompiled
binary drivers.  These modules/binaries transparently function only
with the kernel against which they were co-compiled.  Since the Linux kernel is
a dynamically changing beast, it is very unfortunate that the modem vendors
have not yet chosen to release source-code versions of their drivers, which
would ensure the ability to modify and recompile these drivers for use
with improved Linux kernels.  In the meantime, however, some luck has been
had in coaxing the binary modules to function under some later kernel versions,
as described below.
<p>
<sect2> insmod -f
<p>
A kernel module generally may be loaded using the command 
<tt>insmod</tt> <em>module_name</em>.  If
the module was compiled under a different kernel than the current one,
<tt>insmod</tt> will report the version mismatch and fail to load the module.
One can pass a flag to force the module to load despite the mismatch
as <tt>insmod -f</tt> <em>module_name</em>.  If the kernel interface the
module uses did not actually change with the kernel version, forcing the
module to load in this way can give you a functioning module.  This is the
case with, for example, the Lucent LT modem module <tt>ltmodem.o</tt>
which, while compiled under 2.2.12, can be forcibly inserted and run without
problems under kernel 2.2.14; however, running it with kernel version > 2.2.15-x 
requires the replacement of the module <tt>ppp.o</tt> with one from kernel 2.2.14,
as described below.
<p>
<sect2> Fixscripting
<p>
Mark Spieth (mark(at)digivation.com.au) has contributed a script (see appendix)
which edits a binary module so that the version mismatch warning is eliminated,
allowing module insertion to proceed without the forcing flag, i.e. simply
<tt>insmod</tt> <em>module_name</em>.  Continuing with the particular
example of <tt>ltmodem.o</tt>, if you save this file as <tt>fixscript</tt>, make it executable with <tt>chmod +x fixscript</tt>, and, as the root
user, generate an edited module with
<verb>
    ./fixscript ltmodem.o ltmodem14.o
</verb>
, you can insert the module under 2.2.14 without mismatch complaints by
<verb>
    insmod ltmodem14
</verb>
<p>
 Note, however, that this script does not update the module code to fix any actual
kernel API discrepancies, but simply masquerades the module as having
been compiled under a different version; i.e., this supresses the symptoms of kernel
version mismatch, but does not cure any actual diseases which may exist.
The "source code" supplied with some PCTel modules (a small C file)
performs similar masquerading
when compiled and linked with the binary libraries in those packages, but again
does not allow for a changed kernel interface.
<p>
<sect2> ppp.o and Later Kernels
<p>
Initial attempts to use the Lucent LT modem driver <tt>ltmodem.o</tt> under
kernels later than 2.2.15-x failed.  However,
Christoph Hebeisen (cth(at)sfu.ca) reported success by
using the modem module compiled under 2.2.12 with a PPP module 
(ppp.o) compiled under 2.2.14 with a kernel version 2.2.16. 
Willie Green (willjr(at)lcc.net) confirms that this works also with the ESS module.
Marvin Stodolsky (stodolsk(at)erols.com) points out that the <em>same</em>
fixscript described above can be used to version-masquerade the <tt>ppp.o</tt>
module from 2.2.14 to 2.2.16 as
<verb>
    ./fixscript ppp.o ppp14to16.o
</verb>
thus allowing "soft insertion" of both the ltmodem and ppp modules to obtain
a functioning Linmodem under kernel version 2.2.16.
<p>
At some point, this chained use of outdated modules will probably reach a breaking
point; it would be very surprising, for example, if some complex combination of older modules
would allow these binary drivers to work under kernel 2.4 when it is released.
  The best solution would be, of course, having an open source driver; 
at the very least, vendor support with binary modules for more recent kernel versions
would be useful.  The reader is encouraged to do his/her best to support
and encourage such developments.
<p>
<sect>Specific installation instructions
<p>
<sect1> Read this first
<p>
Installation instructions are given for the binary drivers described above,
since the accompanying documention is scant (if existing at all)
and can be very misleading.  Installation of open-source drivers
is not covered here, since it is usually better described by its
own documentation, and varies more dramatically from package to
package and from time to time.
<p>
Installation instructions for the Conexant driver are given, to
the extent that they are known, above.  This driver has not
yet been thoroughly explored.
<p>
You may wish to use the installation
script which may have accompanied your driver instead of following
the instructions given here.
<p>
You should read
through the instructions given below before beginning, to get a feeling
for what's going on and where you might run into problems.
<p>
<sect1> ISA
<p>
If your modem is an ISA PNP modem, make sure that the PNP resources
have been appropriately allocated using isapnptools. (See "ISA Plug-n-Play" above.)
<p>
<sect1> Obtain the driver package
<p>
 See "Which Linmodem hardware is supported?" above for the approprate URL for the
driver for your hardware.
<p>
If necessary, unpack the driver package in an empty directory 
with <tt>unzip</tt> (if .zip),
<tt>tar -zxvf</tt> (if .tar.gz ), etc. The files present should
include binaries with names like <tt>some-driver.o</tt> (e.g., in the example
in the next step, the module is named <tt>ltmodem.o</tt>).
<p>
<sect1> Perform a trial insertion of the module
<p>
A trial insertion of the module is a good first check to do.  Though its
results are not necessarily indicative of your final success, it is a fair
indicator of whether the remaining steps will be worth your time.  
<p>
In the directory in which the files were unzipped, perform the following
steps, replacing <tt>ltmodem.o</tt> with the name of the appropriate module(s)
for your modem:
<p>
First, try to simply insert the module with:
<verb>
    insmod ltmodem.o
</verb>
There may be a complaint such as:
<verb>
  kernel-module version mismatch
  ltmodem.o was compiled for kernel version 2.2.12-20
  while this kernel is version 2.2.14.
</verb>
If so, try forcing the insertion with:
<verb>
   insmod -f ltmodem.o
</verb>
Having done this, check for successful insertion into the kernel with:
<verb>
  lsmod
</verb> 
which will, if insertion was successful, display a list including <tt>ltmodem.o</tt> 
such as:
<verb>
Module                  Size  Used by
ltmodem               453200   0  (unused)
nls_iso8859-1           2268   1  (autoclean)
nls_cp437               3744   1  (autoclean)
vfat                    9052   1  (autoclean)
fat                    29248   1  (autoclean) [vfat]:
...
</verb>
<p>
If the module (ltmodem) was not inserted, there is an
outstanding problem. The <tt>some-driver.o</tt> may not
be matched with the modem hardware; the differences between
the sources from which the kernel and module were compiled
may be too great; or, your module may require another module
to be loaded beforehand (some PCTel packages have two modules;
try reversing the insertion order of the two?).
  Before abandoning the current effort
entirely, a more closely version matched kernel could be
installed and tested.  Source files for 
<url url="http://www.kernel.org/" name="Linux kernels"> can
be downloaded and already compiled kernels are available
with many Linux distributions.
<p>
If the insertion was successful, it is worth proceeding further.
<p>
<sect1> Align the module and kernel versions 
<p>
<itemize> 
<item>Lucent LT and ESS:<p>
In the following, all steps except the final one are optional, but will
allow the modules to be inserted without forcing
and without version-mismatch warning messages.
  (Below, replace "ltmodem" with "esscom" if you have an ESS modem.)
  <enum>
    <item> Make a workplace, say <tt>mkdir /root/modem</tt> and <tt>cd /root/modem</tt>
    <item> Save the "fixscript" (see appendix) to a file named  <tt>/root/modem/fixscript</tt>
    <item> Make the script executable with: <tt>chmod +x fixscript</tt>  
    <item> Rename the module file: <tt>mv ltmodem.o ltmodem.2212.o</tt>
    <item> "Fix" the module file with: <tt>./fixscript ltmodem.2212.o ltmodem.o</tt>
    <item> Test insertion with the fixed module file with: <tt>insmod ltmodem.o</tt>
 (it should insert without version warnings)
    <item> Copy a functional ltmodem.o to the standard module location
 with: <tt>cp ltmodem.o /lib/modules/`uname -r`/misc/ltmodem.o </tt>
( The `uname -r` specifies the version of currently running kernel. )
  </enum>
The last three steps will
have to be repeated when a new kernel is installed, and are ONLY effective during a session under the new kernel.
  <p>
  If you are running Linux kernel 2.2.15-x or newer, you need to obtain the
<tt>ppp.o</tt> module from kernel 2.2.14 (and should use the "fixscript" on it as well),
as described in the next step.  
<p>
<item>PCTel:<p>
There are apparently two types of PCTel module package around.  
<enum>
  <item> A package (rpm or deb) which installs
  two module files, pctel_hsp.o and pctel_pci.o, in <tt>/lib/modules/2.2.16</tt>.
  <p>
  With such a package, if you are running a kernel more recent than 2.2.16, you should
  try the "fixscript" method used with the Lucent and ESS modules above, but note
  that this has not to my knowledge been tried out yet.  If you are running a kernel
  older than 2.2.16, you should consider upgrading your kernel, or else try the
  fixscripting as well (this is also not guaranteed to work).  You should not have
  to get the 2.2.14 ppp.o module.   Please send me a report if you get these to work.
  <p>
  <item> A package which, when unpacked, gives a set of libraries (hsp.a, etc...)
  and a small C source file (ptmodule.c), which should be in directories like lib/
  and src/module/.  If there are no directories, create them and arrange the files with: 
<verb>
mkdir lib
mkdir src
mkdir src/module
mv *.a lib/
mv Makefile *.c src/module
</verb>
    <p>
    Now go to the directory src/module and type <tt>make</tt>.  This should generate the module
    file <tt>pctel.o</tt>, which will appear back up in the directory <tt>lib</tt>.  (The driver module is <em>not</em> the file <tt>ptmodule.o</tt> in <tt>src/module</tt>!)
    <p>
    The version of the module generated in this way will match your current kernel version.
 </enum>
 </itemize>


<sect1> Fix the 2.2.14 <tt>ppp.o</tt> if necessary and desirable
<p>
If you have a Lucent
or ESS modem, and your kernel is more recent than 2.2.15-x), use of a ppp.o from 2.2.14
sources will be necessary.  A copy of this module is available 
at <url url="http://walbran.org/sean/linux/stodolsk/ppp2214.o">.
<p>
It can be copied to the appropiate /lib/modules/`uname -r`/net directory
as described below.  To avoid forcing <tt>insmod -f ppp.o</tt>, 
the mismatched ppp.o can be version fixed as described here for
the example of a kernel version 2.2.17 mismatch. 
  <enum>
    <item> Type <tt>su root</tt> and give the password. Change to the working directory <tt>cd /root/modem</tt>
    <item> Align the module version with the running kernel version: <tt>fixscript ppp2214.o pppfix.o</tt> 
    <item> Remove the original module from the kernel with: <tt>rmmod ppp</tt>, if it's already loaded
    <item>  <tt> insmod pppfix.o </tt>, which should proceed without any
mismatch complaint.
    <item>  <tt>lsmod</tt> should display the inserted ppp in the list.
    <item>  If so, finally save the original module, found at (say) <tt>/lib/modules/2.2.17/net/ppp.o</tt> , 
by renaming it with: 
<verb>
mv /lib/modules/2.2.17/net/ppp.o /lib/modules/2.2.17/net/ppp2217.o
</verb>
    and place the fixed pppfix.o with 
<verb>
cp pppfix.o /lib/modules/2.2.17/net/ppp.o
</verb>
 </enum>

<p>
<sect1> Copy your modules to the module directory
<p>
If not already done copy the other module file(s) (such as <tt>ltmodem.o</tt>,<tt>esscom.o</tt>, and
<tt>pctel*.o</tt>) into the directory <p><tt>/lib/modules/`uname -r`/misc/</tt> 
<p>
<sect1> Make the device file
<p>
<itemize>
<item> Lucent LT:<p>  <tt>mknod /dev/ttyS14 c 62 78 </tt><p>
<item> PCTel:<p>      <tt>mknod /dev/ttyS15 c 62 79 </tt><p>
<item> Esscom:<p>     <tt>mknod /dev/esscom c 127 1 </tt><p>
  <itemize>
  <item> Esscom users may wish to link /dev/ttyS14 to /dev/esscom for use with
ppp dialers which only recognize names of the ttyS* form, such as <tt>wvdial</tt>.
Note, however, that <tt>wvdial</tt> is reported to give a kernel panic on ppp-off
with this module under kernel 2.2.16 (and possibly others). This may not be a general situation, however.
  </itemize>
</itemize>
If you wish to allow non-root users to dial out using this device, 
you can set the file permissions with, for example,
<verb>
  chgrp uucp /dev/ttyS14
  chmod 666 /dev/ttyS14
</verb>
Group definitions can be modified in <tt>/etc/group</tt>.
<p>
<sect1> Link /dev/modem to the device file 
<p>
<tt>ln -s /dev/</tt><em>yourdevicefile</em><tt> /dev/modem</tt>
<p>
<sect1> Insert your module into the kernel
<p>
Note:  if you chose to skip the "Align the module and kernel versions" step above,
you may need to use "insmod -f" here.
<p>
<itemize>
<item> Lucent LT:  <p><tt>insmod ltmodem</tt><p>
<item> Esscom:     <p><tt>insmod essmodem</tt><p>
<item> PCTel:      <p><tt>insmod pctel</tt>
<p>
  <itemize>
  <item> Note: The PCTel drivers can take a Country Code parameter.  See the appendix
for a list of codes.
  </itemize>
</itemize>
<p> 

<sect1> Modifying your serial port configuration.
<p>
Your Linux system will in many cases need to be informed of
the addition of the new "serial" device <tt>/dev/ttyS14</tt> or <tt>15</tt>.
<p>
<sect2> Older kernels (2.0.x)
<p>
The drivers available tend to have been compiled for a kernel version 2.2.x, with
x in the teens.  However, if you are for some reason unable/unwilling to update
your kernel, Werner Heuser (wehe(at)snafu.de) points out the following tips for older kernels: 
<p>
With 2.0.x kernels, the serial ports
are defined in the serial driver source itself, i.e.
<tt>/usr/src/linux/drivers/char/serial.c</tt>;  after 2.1.98, these
moved to <tt>/usr/src/linux/include/asm-i386/serial.h</tt> and require
CONFIG_SERIAL_MANY_PORTS, MULTIPORT and SHARE_IRQ to be set during
kernel configuration.  You should modify the appropriate line
for your device file, i.e. either of
<verb>
       /* UART CLK   PORT IRQ     FLAGS        */
...
       { 0, BASE_BAUD, 0x000, 0, 0 },        /* ttyS14 (spare; user configurable) */
       { 0, BASE_BAUD, 0x000, 0, 0 },        /* ttyS15 (spare; user configurable) */
</verb>
to read something like
<verb>
       { 0, BASE_BAUD, 0x0260, 3, STD_COM_FLAGS}},
</verb>
with the appropriate port/irq for your hardware. 
When you boot the new kernel with these changes, 
you should see a message like the following:
<verb>
Serial driver version 4.13 with no serial options enabled
tty00 at 0x03f8 (irq = 4) is a 16550A
tty14 at 0x0260 (irq = 3) is a 16550A
</verb>
<sect2> Newer kernels
<p>
With more modern Linux kernels, script files such as
<tt>/etc/serial.conf</tt> and the program <tt>setserial</tt>
are generally used to govern the parameters of serial ports; your
configuration will likely have to be modified to accommodate the new device, though
this apparently depends on your kernel/distribution of choice.
The best reference for such modifications is David S. Lawyer's excellent
<url url="http://www.linuxdoc.org/HOWTO/Serial-HOWTO.html" name="Serial
HOWTO">, in particular the section on 
<url url="http://www.linuxdoc.org/HOWTO/Serial-HOWTO-8.html#set_serial"
name="Setserial">, where he notes, in particular, "Don't ever use setserial
with Laptops (PCMCIA)".  The documentation with your distribution should
provide you with more information on the particular defaults and
initialization scripts used.
<p>
As an example, Sean's laptop with the Lucent LT modem, running
Red Hat 6.2/kernel 2.2.14-5, required no modifications to the (
in fact nonexistent) <tt>/etc/serial.conf</tt> whatsoever.
With Marvin's PCI Lucent winmodem with a Debian installation, however,
the following
section is needed in the file <tt>/etc/serial.conf</tt>:
<verb>

# These are two spare devices you can use to customize for 
# some board which is not supported above....
#
#Lucent Modem driver version 4.27.5.66
#  ltmodem.o was compiled for kernel version 2.2.12-20
#  with MANY_PORTS MULTIPORT SHARE_IRQ enabled
#  ttyS14 at 0x0260 (irq = 3) is a Lucent
/dev/ttyS14 uart 16450 port 0x0260 irq 3
#/dev/ttyS15 uart XXXXX port XXXX irq X
# These are the ports used for either the Usenet Serial II
# board, or the Boca Board 4, 8, or 16 port boards.
</verb>
<p>
Whatever your particular configuration, conflicts for interrupt
(IRQ) assignments are generally to be avoided.
Information on your serial port properties can be displayed with: 
<verb>
   setserial -agv /dev/ttyS*
</verb>
which returns information like: 
<verb>
/dev/ttyS0, Line 0, UART: 16550A, Port: 0x03f8, IRQ: 4
        Baud_base: 115200, close_delay: 50, divisor: 0
        closing_wait: 3000
        Flags: spd_normal skip_test session_lockout

/dev/ttyS14, Line 14, UART: 16950/954, Port: 0x0260, IRQ: 3
        Baud_base: 115200, close_delay: 50, divisor: 0
        closing_wait: 3000
        Flags: spd_normal skip_test
</verb> 

<sect1> Try it out with a minimal terminal program
<p>
At this point you probably want to try dialing out with a simple terminal
program like <tt>minicom</tt>.
<p>
<sect1> Configure your ppp dialer
<p>
The name and location of these scripts depend on the particular Linux distribution
(among Redhat, Debian, Suse and many others) and the particular software
mediating the dialup (such as kppp and wvdial). Many
distributions/dial-up software have a configuration utility which will
request your input and then automatically generate the dial-up scripts. The minimum
information required is: 
<itemize>
<item> The telephone number of your Internet Service Provider (ISP)
<item> Your username and password for the ISP 
<item> The modem device file (i.e. /dev/modem, /dev/ttyS14 , etc.)
</itemize>
<p>
If you have trouble, consult the documentation of your ppp dialer and/or the
<url url="http://www.linuxdoc.org/HOWTO/PPP-HOWTO/index.html" name="PPP-HOWTO">.
Example scripts for the particular example of pppconfig with Debian are
given in the appendix.
<p>
<sect1> Dial up
<p>
Try to connect to your ISP with the ppp dialer.
<p>
<sect2> It works!
<p>
Congratulations!
<p>
<sect2> It doesn't work!
<p>
Dang!
<p>
See the Troubleshooting and FAQ sections of this howto for
some ideas on how to fix it.
<p>
<sect1> Post-Installation
<p>
To avoid having to insert the module(s) in the kernel every time
you want to dial in, see the appendix section
"Coincident insertion and removal of ppp related modules."
<p>

<!--
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
 -->
<sect>FAQ
<p>
<sect1>I have a winmodem.  Will it work under Linux?
<p>
Probably not.  Please see the section "Which Linmodem hardware is supported?" above,
and check the Linux Modem Compatibility
<url url="http://www.o2.net/~gromitkc/winmodem.html#Database" name="database">
at
<url url="http://www.kcdata.com/~gromitkc/winmodem.html" name="Rob Clark's site">.
<p>
<sect1> I get a "device or resource busy" error.
<p>
<itemize>
<item> If you have an ISA modem, did you use the isapnptools to allocate IRQ and DMA
resources to the card?  See "ISA Plug-n-Play", above, for more information.
<item> If you do <tt>setserial -agv /dev/ttyS*</tt>, does it return something
sane for your device file?  If not, see the "Modifying your serial port configuration"
section above.
<item> Otherwise, double-check that you created the device file correctly,
and try to eliminate any IRQ conflicts you might have.  If all looks well, but
it still doesn't work, check the <url url="http://Linmodems.org" name="Linmodems.org">
 mailing list to see if someone
else has (and has perhaps fixed) the same problem, or try to fix it yourself
and inform others of your results.
</itemize>
<p>
<sect1> I get unresolved symbols when fixscripting/insmoding.
<p>
Unresolved symbols are a true danger of version mismatching and are, 
in general, bad, but are also almost inevitable with binary modules.
If the fixscript reports unresolved symbols, or the module does not
work despite the unresolved symbols, you may be out of luck with
that kernel/module combination; however,
a few common cases involve symbols like:
<itemize>
<item> <tt>slhc_xxxx</tt>:  You probably need to insmod the slhc 
module before inserting the modem/ppp modules.
<item> <tt>printk, jiffies</tt>:  Your kernel may be compiled with
SMP enabled.  None of the binary modules are known to be SMP-safe, and will
probably only work on a single-processor machine with a single-processor
kernel, i.e. SMP disabled.  You should try recompiling your kernel or
otherwise obtaining a version with SMP disabled.  (Thanks to
Tom Reinertson (treinertson(at)uswest.net)) 
<item> <tt>tty_xxxx</tt> with esscom.o: 
Earlier fixscripts were not able to handle the version-specific symbols
in this module.  A preliminary, expanded fixscript has been included in
this version of the
HOWTO which should be able to fix this module as well.  It assumes you
have a fairly recent version of the depmod utility; later versions
will improve the reliability and flexibility of these new parts of the fixscript
code.  Look for more recent versions of this HOWTO
<url url="http://walbran.org/sean/linux/linmodem-howto.html"> to
see if the script has been improved.
</itemize>
If a module works in an unstable fashion,
it could be that, under some circumstances, you are avoiding those
symbols, while in others, you slam up against them.  Try out different
ppp dialup programs (wvdial, kppp), which call a different set of functions
under similar conditions.  It is also possible that the fixscript, which
was designed for the lucent module, is not "fixing" the symbols used
in your module.  If you find no combination that works, consider "downgrading"
to a kernel which has a closer version match to that of the module.
<p>
<sect1> The <tt>ppp2214.o</tt> doesn't work with my SuSE (or other) kernel.
<p>
The 2.2.14 ppp.o trick appears to be sensitive to kernel versions
and configurations.  Try to obtain one that matches your kernel as
well as possible, and if that doesn't work, try to obtain one from
any other source you can find.  For SuSE 7.0, Christoph Hebeisen has 
posted a 2.2.14 ppp.o pre-fixed for the SuSE 2.2.16 kernel at his
site, <url url="http://www.physcip.uni-stuttgart.de/heby/computer/ltmodem/"> , which should work.
<p>
<sect1> My PCTel modem doesn't work.
<p>
<itemize>
<item> Do you need to give the module a country code parameter?  See the appendix.
<item> Are you using the right driver module?  There are a few PCTel drivers
around (see the section "Which Linmodem hardware is supported?" above).
You might try one of the others and see if that helps.
</itemize>
<p>
<sect1> The modem dials and connects fine, but then it drops the connection.
<p>
This is an often-reported problem that may not have a solution.
<p>
It is possible that the module is installed correctly and is working,
but that you have a problem with your ppp configuration.  See "Configure
your PPP dialer", above, for more information.
<p>
It has been reported that, with some kernel/module mismatches, a program
like <tt>kppp</tt> will give this error, while an alternative like <tt>wvdial</tt>
does not, for the same modules and hardware.  You may wish to try a different
ppp dialer and see if that helps. 
<p>
If none of these helps, you may wish to consider trying to use a kernel version which
is closer to the module.  Otherwise, try the mailing list at 
<url url="http://Linmodems.org" name="Linmodems.org"> for help.
<p>
<sect1> I get a kernel panic on closing the connection or unloading the driver.
<p>
There are a couple of possible solutions to this, neither of which may work:
<itemize>
<item> Try a different ppp dialer (wvdial, kppp).
<item> Configure the module so that it stays in the kernel, i.e. so that it
is not unloaded.
</itemize>
<p>
<sect1> Nothing seems to work.  To whom can I turn for help?
<p>
<itemize>
<item> Double-check that the modem you have is actually supported by
the module you have.  See "Which Linmodem Hardware Is Supported?" above.
<item> Try to determine at which stage of the installation process
things break down.  Check the man pages on the commands used in that
stage and see if you can determine the source of the problem.
</itemize>
<p>
If all seems lost, please see the section "Troubleshooting", below , and consider sending
a message with the complete information described there to the
mailing list at <url url="http://linmodems.org" name="Linmodems.org">.
<p>
<sect1> Who wrote the driver for my winmodem, and how do I contact him/her?
<p>
Probably somebody on contract to the manufacturer, who probably does not have the
authority the update/release/change the source code, and who probably doesn't
have time to reply to your email in any case.  See, for example,
<url url="http://lwn.net/1999/1209/a/lucent.html">
<p>
<!--
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
 -->
<sect>Troubleshooting
<p>
So you've read through this document, the 
<url url="http://www.linuxdoc.org/HOWTO/Modem-HOWTO.html" name="Modem-HOWTO">,
and the
<url url="http://www.linuxdoc.org/HOWTO/PPP-HOWTO/index.html" name="PPP Howto">,
are pretty sure that your modem matches one of the drivers available,
but it still doesn't work?  There are a number of points in
the process at which something could break down.  Marvin Stodolsky
writes:
<p>
Linux generally maintains records of networking connections which are
very useful in troubleshooting problems.  Their particular filenames
vary with both the Linux distribution and Dial-in software.  For both
your own trouble shooting and queries for help to a list, it will be
useful if you accumulate the information requested below. As Root, start a
script record named say, Modem test.  After this script is terminated
with "exit," copy it out of your Linux partition for transmission to the
List which may aid you. Change to the directory in which the modem
install scripts are located.  Below, # are explanatory comments.
<p>
<verb>
# start the recording,
script ModemTest.txt 
# type in as much info on your Modem card as you have
echo winmodem name, manufacturer, designation, and chip if possible
# this gives your current kernel version
uname -r
# this gives information on your serial ports
setserial -agv /dev/ttyS*
# this information on your interrupts (irq)
cat /proc/interrupts
# show the contents of your module installation script (insert script name):
cat ScriptName
# Check if your script is executable:
ls -l ScriptName
# a response is OK if it has "x" such as below:
# -rwxrw-rw-  1 root     root  654 Jan  6  2000 ltinst
# otherwise make it executable with:
chmod o+x ScriptName
# verify with
ls -l ScriptName
# if ScriptName has not been successfully run before under this kernel
# run it with:
./ScriptName
# what is the symbolic link /dev/modem set to:
ls -l /dev/modem
# What is the DeviceName specified in the ScriptName (/dev/ttyS14 or ...?)
echo DeviceName
# what is your modem driver name? Something like DriverName.o
# with the ".o" indicating it is a compiled binary
echo This is my DriverName.o
# if should have been inserted in the Modules Path
# Try to display it there with:
find /lib/modules | grep DriverName
# Is DriverName among the modules installed in the running kernel?
lsmod
# if not try a simple insertion:
insmod ./DriverName.o
# or if it was in the Modules Path, the following will suffice:
insmod DriverName
# check for insertion:
lsmod
# if not inserted, try forcing:
insmod -f ./DriverName
# list your inserted modules again.
lsmod
# If DriverName is NOT listed, 
# their is an incompatibility between modem hardware, driver and kernel.
# Further effort will be of No use.
# If DriverName is listed, let's do a bit more information.
# You may first wish to rerun the configuration utility 
# used to setup dial-in connections for your Linux installation.
# Remember to edit your PassWord from this record later.
# You will probably be queried for the following information 
# which you should have ready:
#Port to be used (/dev/modem or /dev/ttySn),Dial-inNumber, UserName, PassWord. 
# Run your configuration utility.
YourSetUpConf
# To stop recording 
exit
</verb>
<p>
If dialin was not successfull, append to this a record from your log file.
As an example, a section of a /var/log/syslog from a Debian
Linux system is below. 
<p>
<verb>
Aug 21 08:35:41 koala kernel: CSLIP: code copyright 1989 Regents of the University of California
Aug 21 08:35:41 koala kernel: PPP: version 2.3.7 (demand dialling)
Aug 21 08:35:41 koala kernel: PPP line discipline registered.
Aug 21 08:35:42 koala kernel: registered device ppp0
Aug 21 08:35:42 koala pppd[1539]: pppd 2.3.11 started by root, uid 0
Aug 21 08:35:43 koala chat[1545]: abort on (BUSY)
Aug 21 08:35:43 koala chat[1545]: abort on (NO CARRIER)
Aug 21 08:35:43 koala chat[1545]: abort on (VOICE)
Aug 21 08:35:43 koala chat[1545]: abort on (NO DIALTONE)
Aug 21 08:35:43 koala chat[1545]: abort on (NO DIAL TONE)
Aug 21 08:35:43 koala chat[1545]: abort on (NO ANSWER)
Aug 21 08:35:43 koala chat[1545]: send (ATZ^M)
Aug 21 08:35:43 koala chat[1545]: expect (OK)
Aug 21 08:35:43 koala chat[1545]: ATZ^M^M
Aug 21 08:35:43 koala chat[1545]: OK
Aug 21 08:35:43 koala chat[1545]:  -- got it 
Aug 21 08:35:43 koala chat[1545]: send (ATQ0V1E1S0=0&amp;C1&amp;D2S11=55+FCLASS=0^M)
Aug 21 08:35:44 koala chat[1545]: expect (OK)
Aug 21 08:35:44 koala chat[1545]: ^M
Aug 21 08:35:44 koala chat[1545]: ATQ0V1E1S0=0&amp;C1&amp;D2S11=55+FCLASS=0^M^M
Aug 21 08:35:44 koala chat[1545]: OK
Aug 21 08:35:44 koala chat[1545]:  -- got it 
Aug 21 08:35:44 koala chat[1545]: send (ATDT17574238738^M)
Aug 21 08:35:44 koala chat[1545]: expect (CONNECT)
Aug 21 08:35:44 koala chat[1545]: ^M
Aug 21 08:36:16 koala chat[1545]: ATDT17574238738^M^M
Aug 21 08:36:16 koala chat[1545]: CONNECT
Aug 21 08:36:16 koala chat[1545]:  -- got it 
Aug 21 08:36:16 koala chat[1545]: send (\d)
Aug 21 08:36:17 koala pppd[1539]: Serial connection established.
Aug 21 08:36:17 koala pppd[1539]: Using interface ppp0
Aug 21 08:36:17 koala pppd[1539]: Connect: ppp0 <--> /dev/ttyS14
Aug 21 08:36:18 koala pppd[1539]: sent [LCP ConfReq id=0x1 <asyncmap 0x0> <magic 0x64acd5df> <pcomp> <accomp>]
Aug 21 08:36:18 koala pppd[1539]: rcvd [LCP ConfReq id=0x1 < 00 04 00 00> <mru 1524> <asyncmap 0xa0000> <auth pap> <pcomp> <accomp> < 11 04 05 f4> < 13 09 03 00 c0 7b 7d 08
8c>]
Aug 21 08:36:18 koala pppd[1539]: sent [LCP ConfRej id=0x1 < 00 04 00 00> < 11 04 05 f4> < 13 09 03 00 c0 7b 7d 08 8c>]
Aug 21 08:36:18 koala pppd[1539]: rcvd [LCP ConfAck id=0x1 <asyncmap 0x0> <magic 0x64acd5df> <pcomp> <accomp>]
Aug 21 08:36:18 koala pppd[1539]: rcvd [LCP ConfReq id=0x2 <mru 1524> <asyncmap 0xa0000> <auth pap> <pcomp> <accomp>]
Aug 21 08:36:18 koala pppd[1539]: sent [LCP ConfAck id=0x2 <mru 1524> <asyncmap 0xa0000> <auth pap> <pcomp> <accomp>]
Aug 21 08:36:18 koala pppd[1539]: sent [LCP EchoReq id=0x0 magic=0x64acd5df]
Aug 21 08:36:18 koala pppd[1539]: sent [PAP AuthReq id=0x1 user="stodolsk" password=<hidden>]
Aug 21 08:36:19 koala pppd[1539]: rcvd [LCP EchoRep id=0x0 magic=0x0]
Aug 21 08:36:19 koala pppd[1539]: rcvd [PAP AuthAck id=0x1 ""]
Aug 21 08:36:19 koala pppd[1539]: sent [IPCP ConfReq id=0x1 <addr 0.0.0.0> <compress VJ 0f 01>]
Aug 21 08:36:19 koala kernel: PPP BSD Compression module registered
Aug 21 08:36:19 koala kernel: PPP Deflate Compression module registered
Aug 21 08:36:19 koala pppd[1539]: sent [CCP ConfReq id=0x1 <deflate 15> <deflate(old#) 15> <bsd v1 15>]
Aug 21 08:36:19 koala pppd[1539]: rcvd [IPCP ConfReq id=0x1 <compress VJ 0f 01> <addr 10.65.9.14>]
Aug 21 08:36:19 koala pppd[1539]: sent [IPCP ConfAck id=0x1 <compress VJ 0f 01> <addr 10.65.9.14>]
Aug 21 08:36:19 koala pppd[1539]: rcvd [IPCP ConfNak id=0x1 <addr 207.172.212.104>]
Aug 21 08:36:19 koala pppd[1539]: sent [IPCP ConfReq id=0x2 <addr 207.172.212.104> <compress VJ 0f 01>]
Aug 21 08:36:19 koala pppd[1539]: rcvd [LCP ProtRej id=0x3 80 fd 01 01 00 0f 1a 04 78 00 18 04 78 00 15 03 2f]
Aug 21 08:36:19 koala pppd[1539]: rcvd [IPCP ConfAck id=0x2 <addr 207.172.212.104> <compress VJ 0f 01>]
Aug 21 08:36:19 koala pppd[1539]: Cannot determine ethernet address for proxy ARP
Aug 21 08:36:19 koala pppd[1539]: local  IP address 207.172.212.104
Aug 21 08:36:19 koala pppd[1539]: remote IP address 10.65.9.14
Aug 21 08:36:19 koala pppd[1539]: Script /etc/ppp/ip-up started (pid 1548)
Aug 21 08:36:20 koala pppd[1539]: Script /etc/ppp/ip-up finished (pid 1548), status =
0x0
</verb>
<p>
<!--
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
 -->
<p>
<sect> Appendix:  Useful Scripts and Other Information
<sect1> Fixscript:  Changes binary module kernel version information (Mark Spieth)
<p>
The following script
edits the kernel version information of a module to match the running
kernel.  Note that this does not update the module code to fix any actual
kernel API discrepancies, but simply masquerades the module as having
been compiled under a different version.  This allows the module's insertion
without warnings using a plain <tt>insmod</tt> call, but by no means guarantees
the module's functioning.
<p>
The script is given below, but is also available for download at
<url url="http://walbran.org/sean/linux/stodolsk/fixscript">

<p>
Note that the script must be made executable by something like
<tt>chmod +x fixscript</tt>.
<p>
The script:
<verb>
#! /bin/bash
# To make this file executable:  chmod +x fixscript
# This is a very slight edit of the ltfixscript contributed to
# the Linmodems Newslist 
#  From - Sun Jul 23 04:27:38 2000
#  From: "Mark Spieth" <mark at  digivation.com.au>
#  To: <discuss@linmodems.org>
#  Subject: ltmodem symbols and version fixed
#  Date: Sun, 23 Jul 2000 12:39:44 +1000
#  Organization: Digivation Pty Ltd

echo "Fixscript V1.21"

if [ -z "$1" -o -z "$2" ]; then
cat <<END
This script changes version number tags of binary
kernel modules to match the version of the currently
running kernel. It also renames any symbol that the
current kernel cannot resolve into their equivalent
resolvable symbols.

For inserting binary modules into kernels, the fixed 

module can be inserted with:
        insmod module
which is used in automated kernel module management,
rather than forcing module loading with:
        insmod -f module
which is necessary when kernel and module versions
are not matched.

WARNING! This change is purely cosmetic, and the use
of version matched binaries whenever possible is
strongly advised. It may crash your kernel due to
inconsistencies in data structures between the kernel
as it stands and the headers used to originally compile
the module being fixed. No guarantees are given or implied
under any circumstances.

GNU objcopy version 2.9.5 or later is required;
this is provided as part of the binary utilities
packages such as the Debian binutils.deb

USAGE: fixscript input-file output-file
END
exit 1
fi

MI=/tmp/modinfo
DI=/tmp/depinfo

#new kernel version modinfo section
echo -ne "kernel_version="`uname -r`"\0" > $MI

#build the objcopy command
CMD="objcopy"
#for i in `depmod -e $1 | grep -vE "^$1:"` ; do
depmod -e $1 2>$DI
AWKSTR=\$2
for i in `awk "{print $AWKSTR}" $DI | grep _R` ; do
 echo doing $i
 i1=`echo $i | awk '{ 
  gsub(/_R[0-9a-fA-F]+/,""); 
  printf("%s", $1); 
 }'`
 echo "i1=" $i1
 echo " trunc=\"$i1\""
 searchstr=$i1"_R"
 echo "searchstr=" $searchstr
 new=`cat /proc/ksyms | grep $searchstr | awk "{print $AWKSTR}"` 
 echo " new=$new"
 CMD="$CMD --redefine-sym=$i=$new"
done

#replace the modinfo section with the new one
CMD="$CMD --remove-section=.modinfo --add-section=.modinfo=$MI"
CMD="$CMD $*"

#run the command
echo "CMD:" $CMD
$CMD


#remove the section file
rm -f $MI
rm -f $DI

</verb>
<p>
<sect1> Coincident insertion and removal of ppp related modules (Marvin Stodolsky)
<p>
The Lucent driver installation script defaults
to having the module loaded upon boot, by appending the line 
<verb>
insmod -f ltmodem
</verb>
to the end of the initialization script <tt>/etc/rc.d/rc.local</tt>.  If
you have, i.e., an ESS modem, you could replace "ltmodem" with "esscom"
above to have your module automatically loaded on boot.  Note, however,
that the initialization scripts differ with different Linux distributions,
so you will need to find, modify, or create the appropriate script(s) for your 
particular setup.
<p>
However, many users prefer to run "lean kernels" which only have the auxiliary modules
inserted when necessary.  Below are examples of scripts for starting and
stopping an online session using a Lucent winmodem with the ltmodem.o driver.
It can be applied to many other drivers by simply replacing "ltmodem" with
"YourModemDriver".  
<p>
Modemup:
<verb>
#!/bin/sh
# This script inserts the kernel modules supporting
# WinModems using the Lucent   ltmodem.o  module.
# Save as /usr/local/bin/Modemup, then 
#    chmod a+x /usr/local/bin/Modemup
# to make it executable. 
# Since insmod & rmmmod require root permission, permission for an
#  ordinary User must be given under  secure-su  or  sudo.
#
# the ltmodem.o driver must be within /lib/modules/kernl-version/misc
#
# When kernel-source-2.?.?? code becomes available for  ltmodem.o  ,
#    forced "-f" insertion should be removed from the following line:
/sbin/insmod -f ltmodem
# and the complaint about version mis-match will also then disappear.
insmod slhc
# is needed to support ppp
insmod ppp
# if you are using a ppp.o which is not version matched with the kernel
#    insmod -f ppp
# may be necessary instead   
echo Loaded kernel modules are:
lsmod
# An automatic start of the ppp connection is specified 
# by entering the command that starts your online session such as:
#   wvdial, pon,  ppp-on, kppp or
# Whatever
## End Modemup
</verb>
<p>
Modown:
<verb>
#! /bin/sh
# /usr/local/bin/Modown ends a pppd session and does cleanup.
# Save as /usr/local/bin/Modown, then 
#   chmod a+x /usr/local/bin/Modown
# Starting pppd session related modules are:
#   ppp_deflate            39108   1  (autoclean)
#   bsd_comp                3664   0  (autoclean)
#   ppp                    19916   2  (autoclean) [ppp_deflate bsd_comp]
#   slhc                    4200   1  (autoclean) [ppp]
#   ltmodem               452936   1 
# NOTE THAT ltmodem did NOT acquire autoclean status
echo " "
echo Terminating ppp0 with poff
poff
sleep 1
# is a pause to let the poff process to terminate, after which
/sbin/rmmod ltmodem
# removes ltmodem.o module
echo " "
echo Removed module   ltmodem
# /sbin/lsmod
# echo " "
# echo A pause before removing modules ppp_deflate bsd_comp, then ppp slhc
sleep 1
/sbin/rmmod ppp_deflate bsd_comp
/sbin/rmmod ppp slhc
/sbin/lsmod
# but doesn't remove the sound related modules called up. Thus
echo " "
echo Removing sound related module called by LTmodem, soundcore
echo "  " if not otherwise in use.
/sbin/rmmod soundcore
echo Remaining modules in kernel-`uname -r` are:
/sbin/lsmod
# displays remaining modules
echo " "
## End Modown
</verb>
<p>
<sect1> Example PPP scripts (Marvin Stodolsky)
<p> Example PPP scripts configured for a Debian installation by pppconfig are:
<p>
/etc/ppp/peers/provider:
<verb>
# This optionfile was generated by pppconfig 2.0.5. 
hide-password 
noauth
connect "/usr/sbin/chat -v -f /etc/chatscripts/provider"
debug
/dev/ttyS14  # port used by the Lucent Winmodem
115200
defaultroute
noipdefault 
user NameAtIP
remotename provider
ipparam provider
</verb>
<p>
/etc/chatscripts/provider:
<verb>
# This chatfile was generated by pppconfig 2.0.5.
# Please do not delete any of the comments.  Pppconfig needs them.
# 
# ispauth PAP
# abortstring
ABORT BUSY ABORT 'NO CARRIER' ABORT VOICE ABORT 'NO DIALTONE' ABORT 'NO DIAL TONE' ABORT 'NO ANSWER'
# modeminit
'' ATZ
OK ATQ0V1E1S0=0&amp;C1&amp;D2S11=55+FCLASS=0
# ispnumber
OK-AT-OK ATDT3019178111
# ispconnect
CONNECT \d\c
# prelogin
# ispname
# isppassword
# postlogin
# end of pppconfig stuff
</verb>
<p>
<sect1> PCTel Module Parameters:  Country Code
<p>
The following is quoted from one of the PCTel readme files.
My interpretation of this is that you should do something like
<verb>
insmod pctel.o country_sel=7
</verb>
(depending on your country code, below).
If this works for you (or doesn't), please let me know at sean(at)walbran.org
<p>

<p>
<verb>
Set and report country code.

This driver takes a module parameter to setup the correct country code
setting for various country's telephone networks and it also can report
back the country code been set.

Here are the two versions for country_code selection and reporting:

VERSION #1:

To set country code:
"country_sel_rep   sel   7" will sets the country code to 7.

To query the driver for the currently set country code:
"country_sel_rep   rep" returns the current country code as the exit code.

VERSION #2:

To set country code: 
"country_sel   7" to set the country code to 7.

To query the driver for the currently set country code:
"country_rep" return the current country code as the exit code.

country_code                    country_name

    1             	        USA
    2		                FRANCE
    3				GERMANY
    4				ITALY
    5				SWEDEN
    6				UK
    7				JAPAN
    8				AUSTRALIA
    9				SPAIN
   10				TAIWAN
   11				SINGAPORE
   12				KOREA
   13				SWITZERLAND
   14				NORWAY
   15				NETHERLANDS
   16				BELGIUM
   17				CANADA
   18				IRELAND
   19				PORTUGAL
   20				POLAND
   21				HUNGARY
   22				FINLAND
   23				DENMARK
   24				AUSTRIA
   25				S.AFRICA
   26				CTR21 COUNTRIES
   27				CHINA
   28				MALAYSIA
   29				LUXUMBURG
   30				GREECE
   31				ICELAND
   32				NEW ZEALAND
   33				BRAZIL
</verb>
<p>
</article>


