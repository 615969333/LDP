<!doctype linuxdoc system>

<article>

<!-- Title information -->

<title>Using Term to Pierce an Internet Firewall
<author>Barak Pearlmutter, <tt>bap@cs.unm.edu</tt>
<date>v, 15 July 1996

<abstract>
Directions for using ``term'' to do network stuff through a TCP firewall
that you're not supposed to be able to.
</abstract>

<!-- Table of contents -->
<toc>


<!-- Begin the document -->

<sect>Disclaimer

<p>
<bf>!!! READ THIS IMPORTANT SECTION !!!</bf>
</p>

<p>
<bf>
I hereby disclaim all responsibility for this hack.
If it backfires on you in any way whatsoever, that's the breaks.
Not my fault.
If you don't understand the risks inherent in doing this, don't do it.
If you use this hack and it allows vicious hackers
to break into your company's computers and costs you your job and
your company millions of dollars, well that's just tough nuggies.
Don't come crying to me.
</bf>
</p>


<sect>Copyright
<p>
Unless otherwise stated, Linux HOWTO documents are copyrighted by their
respective authors. Linux HOWTO documents may be reproduced and distributed 
in whole or in part, in any medium physical or electronic, as long as
this copyright notice is retained on all copies. Commercial redistribution 
is allowed and encouraged; however, the author would like to be notified of 
any such distributions. 
</p>

<p>
All translations, derivative works, or aggregate works incorporating 
any Linux HOWTO documents must be covered under this copyright notice. 
That is, you may not produce a derivative work from a HOWTO and impose
additional restrictions on its distribution. Exceptions to these rules
may be granted under certain conditions; please contact the Linux HOWTO
coordinator at the address given below.
</p>

<p>
In short, we wish to promote dissemination of this information through as
many channels as possible. However, we do wish to retain copyright on the
HOWTO documents, and would like to be notified of any plans to redistribute
the HOWTOs. 
</p>

<p>
If you have questions, please contact Tim Bynum, the Linux HOWTO 
coordinator, at linux-howto@sunsite.unc.edu via email.
</p>


<sect>Introduction
<p>
The "term" program is normally used over a modem or serial line, to
allow various host-to-host services to flow along this simple serial
connection.  However, sometimes it is useful to establish a term
connection between two machines that communicate via telnet.  The most
interesting instance of this is for connecting two hosts which are
separated by ethernet firewalls or SOCKS servers.  Such firewalls
provides facilities for establishing a telnet connection through the
firewall, typically by using the SOCKS protocol to allow inside
machines to get connections out, and requiring outside users to telnet
first to a gateway machine which requires a one-time password.  These
firewalls make it impossible to, for instance, have X clients on an
inside machine communicate with an X server on an outside machine.
But, by setting up a term connection, these restrictions can all be
bypassed quite conveniently, at the user level.
</p>


<sect>The basic procedure
<p>
Setting up a term connection over a telnet substrate is a two-phase
process.  First your usual telnet client is used to set up a telnet
connection and log in.  Next, the telnet client is paused and control
of the established telnet connection is given to term.
</p>


<sect>Detailed directions
<p>
In detail, the process goes like this.
</p>

<p>
First, from a machine inside the firewall, telnet to a target machine
outside the firewall and log in.
</p>

<p>
Unless you are under linux and will be using the proc filesystem (see
below) make sure your shell is an sh style shell.  Ie if your default
shell is a csh variant, invoke telnet by
<tscreen>
<verb>
(setenv SHELL /bin/sh; telnet machine.outside)
</verb>
</tscreen>
</p>

<p>
After logging in, on the remote (outside) machine invoke the command
<tscreen>
<verb>
term -r -n off telnet
</verb>
</tscreen>
</p>

<p>
Now break back to the telnet prompt on the local (inside) machine,
using <tt>^]</tt> or whatever, and use the telnet shell escape command
<tt>!</tt> to invoke term,
<tscreen>
<verb>
telnet> ! term -n on telnet >&ero;3 <&ero;3
</verb>
</tscreen>
</p>

<p>
Et voila!!!
</p>

<p>
(If you have a variant telnet, you might have to use some other file
descriptor than 3; easy to check using strace.  But three seems to
work on all bsd descendent telnet clients I've tried, under both SunOS
4.x and the usual linux distributions.)
</p>

<p>
Some telnet clients do not have the ! shell escape command.  Eg the
telnet client distributed with Slackware 3.0 is one such client.  The
sources that the Slackware telnet client is supposedly built from,
<tscreen>
<verb>
ftp://ftp.cdrom.com:/pub/linux/slackware-3.0/source/n/tcpip/NetKit-B-0.05.tar.gz
</verb>
</tscreen>
have the shell escape command.  A simple solution is therefore to
obtain these sources and recompile them.  This unfortunately is a task
I have had no luck with.  Plus, if you are running from inside a SOCKS
firewall, you will need a SOCKSified telnet client anyway.  To that
end, I was able to compile a SOCKSified telnet client from
<tscreen>
<verb>
ftp://ftp.nec.com/pub/security/socks.cstc/socks.cstc.4.2.tar.gz
</verb>
</tscreen>
or if you're outside the USA,
<tscreen>
<verb>
ftp://ftp.nec.com/pub/security/socks.cstc/export.socks.cstc.4.2.tar.gz
</verb>
</tscreen>
</p>

<p>
Alternatively, under linux kernels up to 1.2.13, you can pause the
telnet with <tt>^]^z</tt>, figure out its pid, and invoke
<tscreen>
<verb>
term -n on -v /proc/<telnetpid>/fd/3 telnet
</verb>
</tscreen>
This doesn't work with newer 1.3.x kernels, which closed some
mysterious security hole by preventing access to these fd's by
processes other than the owner process and its children.
</p>


<sect>Multiple term sockets
<p>
It is a good idea to give the term socket an explicit name. 
This is the &dquot;<tt>telnet</tt>&dquot; argument in the invocations
of term above. 
Unless you have the TERMSERVER environment variable set to telnet as
appropriate, you invoke term clients with the -t switch,
e.g. &dquot<tt>trsh -t telnet</tt>&dquot;.
</p>


<sect>The <tt>&tilde;/.term/termrc.telnet</tt> init file
<p>
I have checked line clarity using linecheck over this medium.
I expected it to be completely transparent, but it is not.
However, the only bad character seems to be 255.
The <tt>&tilde;/.term/termrc.telnet</tt> I use
(the <tt>.telnet</tt> is the name of the term connection, see above)
contains:
<tscreen>
<verb>
baudrate off
escape 255
ignore 255
timeout 600
</verb>
</tscreen>
</p>

<p>
Perhaps it could be improved by diddling,
I am getting a throughput of only about 30k cps over
a long-haul connection through a slow firewall.
Ftp can move about 100k cps over the same route.
A realistic baudrate might avoid some timeouts.
</p>


<sect>Direction
<p>
Obviously, if you are starting from outside the firewall and zitching
in using a SecureID card or something, you will want to reverse the
roles of the remote vs local servers given above.  (If you don't
understand what this means, perhaps you are not familiar enough with
term to use the trick described in this file responsibly.)
</p>


<sect>Security
<p>
This is not much more of a vulnerability than the current possibility
of having a telnet connection hijacked on an unsecured outside
machine.  The primary additional risk comes from people being able to
use the term socket you set up without you even being aware of it.  So
be careful out there.  (Personally, I do this with an outside machine
I know to be pretty secure, namely a linux laptop I maintain myself
that does not accept any incoming connections.)
</p>

<p>
Another possibility is to add "socket off" to the remote
<tt>&tilde;/.term/termrc.telnet</tt>, or
<tt>add &dquot;-u off&dquot;</tt> to invocation of term. 
This prevents the socket from being hijacked from the remote end,
with only a minor loss of functionality.
</p>


<sect>Telnet mode
<p>
Be sure the remote telnetd is not in some nasty seven-bit mode.
Or if it is, you have to tell term about it when you invoke term,
by adding the <tt>-a</tt> switch at both ends.
(I sometimes use &dquot;<tt>^] telnet&gt; set outbin</tt>&dquot; or
&dquot;<tt>set bin</tt>&dquot; or invoke telnet with a <tt>-8</tt> switch
to put the connection into eight-bit mode.)
</p>


<sect>Bugs and term wish list
<p>
The linecheck program has some problems checking telnet connections
sometimes.  This is sometimes because it doesn't check the return code
of the <tt>read()</tt> call it makes.  For network connections,
this call to <tt>read()</tt> can return <tt>-1</tt> with an <tt>EINTR</tt>
(interrupted) or <tt>EAGAIN</tt> (try again) error code.
Obviously this should be checked for.
</p>

<p>
There are a number of features that could ease the use of term over
telnet.  These primarily relate to an assumption that influenced the
design of term, namely that the connection is low bandwidth, low
latency, and somewhat noisy.
</p>

<p>
A telnet connection is in general high bandwidth, high latency, and
error free.  This means that the connection could be better utilized
if (a) the maximum window size was raised, well above the limit
imposed by term's <tt>N_PACKETS/2=16</tt>,
(b) there was an option to turn off sending and checking packet checksums,
and (c) larger packets were permitted when appropriate.
</p>

<p>
Also, to enhance security, it would be nice to have a term option to
log all connections through the socket it monitors to a log file, or
to stderr, or both.  This would allow one to see if one's term
connection is being subverted by nasty hackers on the outside insecure
machine.
</p>


<sect>Tricks that don't seem to work

<p>
Some telnet clients and servers agree to encrypt their communications,
to prevent evesdropping on the connection.  Unfortunately, the hack
used above (using the network connection that the telnet client has
set up while the telnet client is idle) won't work in that case.
Instead, one really must go through the telnet client itself, so it
can do its encryption.  It seems like that requires a simple hack to
the telnet client itself, to add a command that runs a process with
its stdin and stdout are connected to the live telnet connection.
This would also be useful for various 'bots, so perhaps someone has
already hacked it up.
</p>


<sect>Related resources
<p>
A vaguely related trick is to SOCKSify one's Term library.
Details, including patches to SOCKS, are available from
Steven Danz &lt;danz@wv.mentorg.com&gt;.
</p>



<sect>Acknowledgments
<p>
Thanks for valuable suggestions from:
<itemize>
  <item>Gary Flake   &lt;flake@scr.siemens.com&gt;
  <item>Bill Riemers &lt;bcr@physics.purdue.edu&gt;
  <item>Greg Louis   &lt;glouis@dynamicro.on.ca&gt;
</itemize>
</p>


<p>
<quote>
<bf>Extra copy of IMPORTANT DISCLAIMER --- BELIEVE IT!!!</bf>
</quote>
</p>

<p>
<quote>
<bf>
I hereby disclaim all responsibility for this hack.  If it backfires
on you in any way whatsoever, that's the breaks.  Not my fault.  If
you don't understand the risks inherent in doing this, don't do it.
If you use this hack and it allows vicious hackers to break into your
company's computers and costs you your job and your company millions
of dollars, well that's just tough nuggies.  Don't come crying to me.
</bf>
</quote>
</p>

</article>
