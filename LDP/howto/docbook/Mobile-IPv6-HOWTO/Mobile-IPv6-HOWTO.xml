<?xml version="1.0" encoding="ISO-8859-1"?>

<!DOCTYPE article PUBLIC "-//OASIS//DTD DocBook XML V4.2//EN"
    "http://docbook.org/xml/4.2/docbookx.dtd" []>
   <!-- "DTD/docbookx.dtd" []> -->
    
<article>
  <articleinfo>

    <!-- Article Title -->
    <title>Linux Mobile IPv6 HOWTO</title>
    <titleabbrev>mipv6</titleabbrev>

    <author>
       <firstname>Lars</firstname>
       <surname>Strand</surname>
       <affiliation>
          <!-- Valid email -->
          <address><email>lars (at) unik no</email></address>
       </affiliation>
     </author>
     <authorinitials>LKS</authorinitials>

     <!-- All dates specified in ISO "YYYY-MM-DD" format -->
     <pubdate>2003-11-22</pubdate>

     <!-- Most recent revision goes at the top; list in descending order -->
     <revhistory>
       <revision>
          <revnumber>0.7.1</revnumber>
          <date>2003-11-22</date>
          <authorinitials>LKS</authorinitials>
          <revremark>Changed the license from <ulink
          url="http://www.gnu.org/copyleft/fdl.html"> GFDL </ulink> to 
          <ulink url="http://www.opencontent.org/openpub/"> OPL
          </ulink> due to some GFDL <ulink
          url="http://people.debian.org/~srivasta/Position_Statement.xhtml">
          problems.</ulink></revremark> 
       </revision>
       <revision>
          <revnumber>0.7</revnumber>
          <date>2003-11-18</date>
          <authorinitials>LKS</authorinitials>
          <revremark>Converted to XML Docbook. Some cleanup.</revremark>
       </revision>
       <revision>
          <revnumber>0.6</revnumber>
          <date>2002-11-07</date>
          <authorinitials>LKS</authorinitials>
          <revremark>Fixed some errors + update. Thanks to Henrik Petander 
	  petander (at) tcs hut fi.</revremark>
       </revision>
       <revision>
          <revnumber>0.5.1</revnumber>
          <date>2003-11-03</date>
          <authorinitials>LKS</authorinitials>
          <revremark>Updated to MIPL relase 1.0 (kernel 2.4.22).</revremark>
       </revision>
       <revision>
          <revnumber>0.5</revnumber>
          <date>2003-08-05</date>
          <authorinitials>LKS</authorinitials>
          <revremark>Initial release.</revremark>
       </revision>
     </revhistory>

     <!-- Provide a good abstract; a couple of sentences is sufficient -->
     <abstract>
        <para>
         This document describes the software and procedures to set up
	 and use mobile IPv6 for Linux. </para>
     </abstract>

  </articleinfo>


<!-- ##################################################### -->

<sect1 id="intro">
  <title>Introduction</title>

  <para>
  This document describes the software and procedures to set up and 
  use mobile IPv6 for Linux. The <ulink
  url="http://www.ietf.org/internet-drafts/draft-ietf-mobileip-ipv6-24.txt">
  "draft-ietf-mipv6-ipv6-24"</ulink> answer the
  <emphasis>what</emphasis> and <emphasis>why</emphasis> mobile ip:
  </para>

<!-- ################## -->

  <sect2 id="WhatisMIPv6">
  <title>What is Mobile IP?</title>

    <para>
    <quote>Each mobile node is always identified by its home
    address, regardless of its current point of attachment to the
    Internet. While situated away from its home, a mobile node is also
    associated with a care-of address, which provides information
    about the mobile node's current location.  IPv6 packets addressed
    to a mobile node's home address are transparently routed to its
    care-of address via the mobile nodes Home Agent (HA).  The
    protocol enables IPv6 nodes to cache the binding of a mobile
    node's home address with its care-of address, and to then send any
    packets destined for the mobile node directly to it at this
    care-of address.</quote> --- draft-ietf-mipv6-24, page 1-2. 
    </para>
  </sect2>

<!-- ################## -->

  <sect2 id="WhyMIPv6">
  <title>Why Mobile IP?</title>
    <para>
    <quote>Without specific support for mobility in IPv6, packets destined to a
    mobile node (host or router) would not be able to reach it while the
    mobile node is away  from its home link (the link on which its home
    IPv6 subnet prefix is in use), since routing is based on the subnet
    prefix in a packet's destination IP address.  In order to continue
    communication in spite of its movement, a mobile node could change its
    IP address each time it moves to a new link, but the mobile node would
    then not be able to maintain transport and higher-layer connections
    when it changes location.  Mobility support in IPv6 is particularly
    important, as mobile computers are likely to account for a majority or
    at least a substantial fraction of the population of the Internet
    during the lifetime of IPv6.</quote> --- draft-ietf-mipv6-24, page 6.
    </para>
   
    <para>
    For all the details, read the <ulink
    url="http://www.ietf.org/internet-drafts/draft-ietf-mobileip-ipv6-24.txt">
    "draft-ietf-mipv6-ipv6-24"</ulink>
   </para>

  </sect2>

<!-- ################## -->

  <sect2 id="HowWork">
  <title>How does it work?</title>
  
  <mediaobject id="mobileIP">
    <imageobject>
      <imagedata fileref="images/Mobile-IP.png" format="PNG" align="center" scalefit="0"/> 
    </imageobject>
  <textobject>
    <phrase>Mobile IP</phrase>
  </textobject>
  <caption>
   <para>Mobile IP</para>
  </caption>
  </mediaobject>

  <para>
  <orderedlist>
  <listitem>
    <para> The Mobile Node (MN) travel to a foreign network and gets a
    new care-of-address.</para>
  </listitem>
  <listitem>
     <para> MN performs a binding update to it's Home Agent (HA) (the
     new care-of-address gets registrated at HA). HA sends a binding
     acknowledge to MN.</para>
  </listitem>
  <listitem>
     <para>A Correspondent Node (CN) want to contact MN. HA intercepts
     packets destined to MN.</para>
  </listitem>
  <listitem>
     <para>HA then tunnels all packets to MN from CN using MN's
     care-of-address.</para>
  </listitem>
  <listitem>
    <para>When MN answers CN, it may use it current care-of-address
    (and perform a binding to CN) and communicate with CN directly
    (optimized routing) or it can tunnel all it's packets through HA.</para>
  </listitem>
  </orderedlist>
  </para>

 <para>See figure <link linkend="mobileIP">"Mobile IP"</link> for
 explanation.
 </para>
 
 </sect2>

</sect1>

<!-- ##################################################### -->
<sect1 id="IPv6">
<title>IPv6</title>

<para>IP version 6 (IPv6) is a new version of the Internet Protocol, 
designed as the successor to IP version 4 (IPv4) <ulink
url="http://www.ietf.org/rfc/rfc791.txt">[RFC-791]</ulink>. The
changes from IPv4 to IPv6 fall primarily into the following
categories: 
</para>

<itemizedlist>
  <listitem>
    <para>Expanded addressing capabilities </para>
  </listitem>
  <listitem>
    <para>Header format simplification</para>
  </listitem>
  <listitem>
    <para>Improved support for extensions and options</para>
  </listitem>
  <listitem>
    <para>Flow labeling capability</para>
  </listitem>
  <listitem>
    <para>Authentication and privacy capabilities</para>
  </listitem>
</itemizedlist>

<para><emphasis>You should have basic knowledge of IPv6 stateless
  auto-configuring to fully understand how MIPv6 works. You can read
  up on IPv6 Stateless Address Autoconfiguration in
  <ulink
  url="http://www.ietf.org/rfc/rfc2462.txt">[RFC2462]</ulink>.
  </emphasis> 
</para> 

<para>For more information on IPv6 in general, visit the the <ulink
url="http://www.ietf.org/html.charters/ipv6-charter.html">IPv6
Working Group (IETF)</ulink>.
</para>

</sect1>

<!-- ##################################################### -->

<sect1 id="MIPv6">
<title>Mobile IPv6 for Linux</title>

<para>There are currently two Mobile IPv6 Linux implementation
available. The Lancaster University in UK has the oldest(?)
implementation (<ulink url="http://www.cs-ipv6.lancs.ac.uk/MobileIP/">
http://www.cs-ipv6.lancs.ac.uk/MobileIP/</ulink>). The latest kernel
supported is 2.1.90, and is compatible with IETF mobile IPv6 draft-v5
(current is v24). The code and website has not been updated since
1998, so it is considered obsolete. </para>


<para>The other, and up-to-date, implementation is MIPL HUT (Helsinki
University of Technology). The latest supported kernel is 2.4.22, and
they have patches for the upcoming 2.6 kernel. Visit <ulink
url="http://www.mipl.mediapoli.com/">
http://www.mipl.mediapoli.com/</ulink> for papers, software or to
browse the mail-archive. </para> 

<!-- ################## -->

 <sect2 id="patch">
 <title>Patching the kernel</title>

 <para>The MIPL MIPv6 require a kernel patch. The implementation
 modifies the IPv6 kernel stack, so a kernel recompile is
 necessary. The install process is well documented, but I will give a
 brief step-by-step howto. </para>

<para><emphasis>NB! The need for two different kernels, one for Mobile
  Node (MN) and one for Home Agent (HA), is obsolete. Just compile
  support for MN and HA in the same kernel. The decision of
  functionality is made at the time of module loading, so you may not
  load both the modules at the same time.</emphasis></para>

  <para>
  <orderedlist>

  <listitem>
    <para> Download the latest Linux MIPv6 source code from
    <ulink url="http://www.mipl.mediapoli.com/">
    http://www.mipl.mediapoli.com</ulink>. The latest release today is: 
    <emphasis>mipv6-1.0-v2.4.22</emphasis>. The last four numbers
    corresponds to the linux kernel the patch should be applied to:
    </para> 
    
    <screen>
      # cd /usr/local/src
      # wget http://www.mipl.mediapoli.com/download/mipv6-1.0-v2.4.22.tar.gz
      # tar zxfv mipv6-1.0-v2.4.22.tar.gz
    </screen>
  </listitem>

  <listitem>
    <para> Download and unpack the correspondent Linux kernel version
    from ftp.kernel.org: </para>

    <screen>
       # cd /usr/src
       # wget ftp://ftp.kernel.org/pub/linux/kernel/v2.4/linux-2.4.22.tar.bz2
       # tar jxvf linux-2.4.22.tar.bz2
       # ln -s linux-2.4.22 linux
       # cd linux
     </screen> 
  </listitem>

  <listitem> 
    <para>Apply the MIPv6 patch:</para>

    <screen>
     # patch -p1 --dry-run &lt; /usr/local/src/mipv6-1.0-v2.4.22/mipv6-1.0-v2.4.22.patch
    </screen>
  
     <para>This does not actually do anything but display errors if any.  If you
     get any failed hunks, you should NOT proceed. If everything went fine
     do:</para>

    <screen> 
      # patch -p1 &lt; /usr/local/src/mipv6-1.0-v2.4.22/mipv6-1.0-v2.4.22.patch 
    </screen> 
  </listitem>

  <listitem>
     <para> Now your kernel tree is ready for configuration. Run your
     favorite 'make *config'. The MIPv6 options are under "Networking
     Options". The following options should be present in
     <emphasis>".config"</emphasis>:</para>
     
     <screen>
     CONFIG_EXPERIMENTAL=y 
     CONFIG_SYSCTL=y 
     CONFIG_PROC_FS=y 
     CONFIG_MODULES=y 
     CONFIG_NET=y 
     CONFIG_NETFILTER=y 
     CONFIG_UNIX=y 
     CONFIG_INET=y 
     CONFIG_IPV6=m
     CONFIG_IPV6_SUBTREES=y
     CONFIG_IPV6_IPV6_TUNNEL=m
     CONFIG_IPV6_MOBILITY=m
     CONFIG_IPV6_MOBILITY_MN=m
     CONFIG_IPV6_MOBILITY_HA=m
    </screen>
    
    <para> Since MIPL is still work-in-progress you might want to
   enable this. With debug messages it is easier to figure out what
   happened when something goes wrong.  Also when reporting a bug
   debug messages are very helpful:</para>

   <screen>
   CONFIG_IPV6_MOBILITY_DEBUG=y
   </screen>

   <para>To be sure you have all the correct options, you can run
   <userinput>chkconf_kernel.sh</userinput> which is a small shell
   script included in the MIPL.</para>
   </listitem>

   <listitem>
     <para> Next you should compile and install your kernel.</para>
 
     <para> Hint: To  easily distinguish this kernel from other
      kernels, you can change the "EXTRAVERSION" value in the
      <userinput>/usr/src/linux/Makefile</userinput> to
      f.ex. "-MIPv6-1".</para>

   </listitem>

  </orderedlist>
  </para>

  <para>Read the <ulink
  url="http://tldp.org/HOWTO/Kernel-HOWTO/">Linux Kernel
  HOWTO</ulink> for detailed instruction on how to patch, compile and
  install your new kernel.</para>

  </sect2>

<!-- ################## -->

  <sect2 id="userspace">
    <title>Userspace tools</title>
    <para>The userspace tool <userinput>mipdiag</userinput>, config
    files and init scripts must be installed for the module to work
    correctly:</para> 

    <screen>
      # cd /usr/local/src/mipv6-1.0-v2.4.22
      # ./configure
      # make &amp;&amp; make install
    </screen>
  
  </sect2>

<!-- ################## -->

  <sect2 id="dev">
    <title>MIPv6 dev entry</title>
    <para>The MIPv6 module also need a new dev entry. Issue the
    command:</para>

    <screen>
      # mknod /dev/mipv6_dev c 0xf9 0
    </screen>
  </sect2>

<!-- ################## -->

  <sect2 id="startup">
    <title>Automatic startup</title>

    <orderedlist>
      <listitem>
        <para><emphasis>Redhat:</emphasis></para>
        <para>All init scripts are located in /etc/init.d/, which are
        symlinked to the correct runlevel (/etc/rcX.d/). You can issue
        the command:</para>

        <screen>
   # chkconfig --add mobile-ip6
        </screen>

        <para>to enable at startup, or</para>
    
        <screen>
   # chkconfig --del mobile-ip6
        </screen>

        <para>to remove from startup.</para>
      </listitem>

      <listitem>
        <para><emphasis>Debian:</emphasis></para>

        <para>If you are so lucky to be running Debian, you can issue the command:</para>

        <screen>
   # update-rc.d -n mobile-ip6 start 75 3 4 5 . stop 05 1 2 6 .
        </screen>

        <para>to set up all the necessary links.</para>
      </listitem>
     
      <listitem>
       <para><emphasis>Slackware:</emphasis></para>

       <para>Slackware users have all their startup/runlevel scripts in
       "/etc/rc.d". Since 'configure' doesn't check for "/etc/rc.d",
       you can add <emphasis>INIT_SLACK="/etc/rc.d"</emphasis>, and then
       INIT_SLACK to INITDIRS in 'configure' (search for INITDIR in
       configure). Since you are running Slackware, you probably know
       this already. The following command should then do the
       trick:</para>  

       <screen>
   # echo '/etc/rc.d/mobile-ip6 start' >> /etc/rc.d/rc.local
       </screen>
     </listitem>

   </orderedlist>

 </sect2>
</sect1>

<!-- ##################################################### -->

<sect1 id="testbed">
  <title>Test-bed</title>
  <para>Now you should have a working mobile-kernel, installed userlevel tools
  and enabled automatic startup at boot. If anything went wrong, go
  through the above step carefully.</para>

<!-- ################## -->

  <sect2 id="testcase">
    <title>Test-case</title>
    <para>The addresses we are using in our test-bed is site-local. <emphasis>Note
    that link local addresses won't work!</emphasis> Our test-bed consist of four
    nodes, see figure <link linkend="mipv6testbed">"Mobile IPv6
    testbed"</link>.</para> 

    <orderedlist>
      <listitem>
        <para><emphasis>HA - Home Agent:</emphasis> The HA is located at the home
        network with address <userinput>fec0:106:2700::2</userinput>
        with one wireless interface.</para>
      </listitem>

      <listitem>
        <para><emphasis>MN - Mobile Node:</emphasis> When MN is on the
	"home network", it has address
	<userinput>fec0:106:2700::4</userinput>. When MN travel to
	another network, it generates a new "care-of-address".</para> 
      </listitem>
   
      <listitem>
        <para><emphasis>R - Router:</emphasis> This is the router from
	the home network to the internet. One wireless interface with
	address <userinput>fec0:106:2700::1</userinput> and a wired
	interface with address
	<userinput>fec0:106:2300::2</userinput></para> 
      </listitem>

      <listitem>
        <para><emphasis>AR - Access Router:</emphasis> The link
	between AR and R is our "internet" (but is actually only a
	cross-cable). The AR has two interface; the wired connected to
	R has address <userinput>fec0:106:2300::1</userinput>, the
	wireless has address
	<userinput>fec0:106:1100::1</userinput>.</para> 
      </listitem>

     </orderedlist>

    <mediaobject id="mipv6testbed">
      <imageobject>
        <imagedata fileref="images/mipv6-testbed.png" format="PNG" align="center" scalefit="0"/> 
      </imageobject>
    <textobject>
      <phrase>Mobile IPv6 testbed</phrase>
    </textobject>
    <caption>
     <para>Mobile IPv6 testbed</para>
    </caption>
    </mediaobject>
    </sect2>
   
<!-- ################## --> 
  <sect2 id="stepbystep">
    <title>Step-by-step</title>

<!-- ############ -->
    <sect3 id="fullyipv6">
      <title>Fully functional IPv6 network</title>
      <para>Before we can start testing mobile ip, we need a fully
      functional ipv6 network. All the nodes should be able to ping
      each other! This is a crucial part. If for example AR is not
      able to ping HA, then there will be no binding update!</para>

      <para>I will give a brief instruction to get our network up and
      running  using IPv6. For more info on setting up a IPv6 network,
      you can read Peter Bieringer's excellent <ulink
      url="http://ldp.linux.no/HOWTO/Linux+IPv6-HOWTO/">Linux IPv6
      HOWTO</ulink>.</para>

      <para>I've turned off encryption for simplicity - <emphasis>NOTE that you
      should ALWAYS use encryption when dealing with wireless
      networks!</emphasis></para>

      <para><emphasis>Also note that the different wireless network
      have different ESSID's!</emphasis></para>

      <orderedlist>
        <listitem>
          <para><emphasis>MN:</emphasis> The Mobile Node has one wireless
          interface. Forwarding should be turned off, but should accept
          autoconf and ra's:</para>

	  <screen>
          # iwconfig eth0 mode ad-hoc essid homenet enc off
          # ifconfig eth0 inet6 add fec0:106:2700::4/64
          # echo "0" > /proc/sys/net/ipv6/conf/eth0/forwarding
          # echo "1" > /proc/sys/net/ipv6/conf/eth0/autoconf
          # echo "1" > /proc/sys/net/ipv6/conf/eth0/accept_ra
          # echo "1" > /proc/sys/net/ipv6/conf/eth0/accept_redirects
          # /etc/init.d/mobile-ipv6 start
          # ip route add ::/0 via fec0:106:2700::1
          </screen>

        </listitem>
        
        <listitem>
          <para><emphasis>HA:</emphasis> The Home Agent has one
          wireless interface. It should have forwarding turned on
          because it uses normal routing to deliver packets captured
          from a physical interface to the virtual tunnel
          interface. <emphasis>NB! You must add a default route or else
          HA will have problem contacting the MN. One possible solution
          is to have HA as the default router of the home network.</emphasis></para>

	  <screen>
          # iwconfig eth0 mode ad-hoc essid homenet enc off
          # ifconfig eth0 inet6 add fec0:106:2700::2/64
          # echo "1" > /proc/sys/net/ipv6/conf/eth0/forwarding
          # echo "0" > /proc/sys/net/ipv6/conf/eth0/autoconf
          # echo "0" > /proc/sys/net/ipv6/conf/eth0/accept_ra
          # echo "0" > /proc/sys/net/ipv6/conf/eth0/accept_redirects
          # ip route add ::/0 via fec0:106:2700::1
          # /etc/init.d/mobile-ipv6 start
          </screen>
       </listitem>

       <listitem>
          <para><emphasis>R:</emphasis> The (home) Router has two
          interfaces, one wireless and one line. The Router must have
          forwarding turned on.</para>
 
          <screen>
          # ifconfig eth0 inet6 add fec0:106:2300::2/64
          # iwconfig eth1 mode ad-hoc essid homenet enc off
          # ifconfig eth1 inet6 add fec0:106:2700::1/64
          # echo "1" > /proc/sys/net/ipv6/conf/all/forwarding
          # echo "0" > /proc/sys/net/ipv6/conf/all/autoconf
          # echo "0" > /proc/sys/net/ipv6/conf/all/accept_ra
          # echo "0" > /proc/sys/net/ipv6/conf/all/accept_redirects
          # ip route add fec0:106:1100::/64 via fec0:106:2300::1
          </screen>
       </listitem>

       <listitem>
          <para><emphasis>AR:</emphasis> The Access Router (on foregin
          network) also has two interfaces, one wireless and one
          line. Forwarding must be turned on.</para>
 
          <screen>
          # ifconfig eth0 inet6 add fec0:106:2300::1/64
          # iwconfig eth1 mode ad-hoc essid visitnet enc off
          # ifconfig eth1 inet6 add fec0:106:1100::1/64
          # echo "1" > /proc/sys/net/ipv6/conf/all/forwarding
          # echo "0" > /proc/sys/net/ipv6/conf/all/autoconf
          # echo "0" > /proc/sys/net/ipv6/conf/all/accept_ra
          # echo "0" > /proc/sys/net/ipv6/conf/all/accept_redirects
          # ip route add fec0:106:2700::/64 via fec0:106:2300::2
          </screen>
       </listitem>
     </orderedlist>

     <para>Instead of modifying proc variables, you can use
     <emphasis>sysctl</emphasis>.</para> 

     <para>Note: We are setting static routes on our test-bed. You
     should now be able to ping all the hosts from every host.</para>
   </sect3>

<!-- ############ -->
   <sect3 id="ARradvd">
     <title>Configuring radvd on AR</title>

     <para>When MN comes to a new network, it does a link-local address
     configuration, if that succeeds it goes to next phase. I'll let
     <ulink
     url="http://www.ietf.org/rfc/rfc2462.txt">[RFC2462]</ulink>
     (IPv6 Stateless Address Autoconfiguration) describe the next
     fase:</para>  

     <para>
     <quote>The next phase of autoconfiguration involves obtaining a Router
     Advertisement or determining that no routers are present. If routers 
     are present, they will send Router Advertisements that specify what
     sort of autoconfiguration a host should do.  If no routers are
     present, stateful autoconfiguration should be invoked.</quote></para>

    <para>
    <quote>Routers send Router Advertisements periodically, but the delay
    between successive advertisements will generally be longer than a
    host performing autoconfiguration will want to wait. To
    obtain an advertisement quickly, a host sends one or more Router 
    Solicitations to the all-routers multicast group.</quote>  --- page 8</para>

    <para>This is where we use RADVD.</para>

    <para>Read <ulink
    url="http://www.ietf.org/rfc/rfc2462.txt">[RFC2462]</ulink>
    more more details concerning IPv6 Stateless Address
    Autoconfiguration.</para> 

    <para>We'll configure RADVD on AR's wireless interface. The
    radvd.conf file should contain this:</para>

    <screen>
    # cat /etc/radvd.conf
    interface eth1                     
    {                                   
          AdvSendAdvert on;
          AdvIntervalOpt on;            

          MinRtrAdvInterval 3;         
          MaxRtrAdvInterval 10;        
          AdvHomeAgentFlag off;        

          prefix fec0:106:1100::/64    
          {                           
              AdvOnLink on;           
              AdvAutonomous on;        
              AdvRouterAddr on;       
          };                         
    }; 
    </screen>
    <para>We then start it:</para>

    <screen>
    # /etc/init.d/radvd start
    </screen>

    <para>You should now be able to use <userinput>radvdump</userinput> to
    see that the radvd messages really are being sent periodically:</para>

    <screen>
    # radvdump
    Router advertisement from fe80::202:2dff:fe54:d1b2 (hoplimit 255)
    Received by interface eth1
          # Note: {Min,Max}RtrAdvInterval cannot be obtained with radvdump
          AdvCurHopLimit: 64
          AdvManagedFlag: off
          AdvOtherConfigFlag: off
          AdvHomeAgentFlag: off
          AdvReachableTime: 0
          AdvRetransTimer: 0
          Prefix fec0:106:1100::/64
                  AdvValidLifetime: 2592000
                  AdvPreferredLifetime: 604800
                  AdvOnLink: on
                  AdvAutonomous: on
                  AdvRouterAddr: off
          AdvSourceLLAddress: 00 02 2D 54 D1 B2
    </screen>

    </sect3>

    <sect3 id="radvdar">
      <title>Configuring radvd on HA</title>

      <para>
       To enable the MN to know when it's home, HA should also be sending
       out RAs. We should therefore enable RADVD on the HA as well. The
       <emphasis>/etc/radvd.conf</emphasis> should contain: 
      </para>

     <screen>
     # cat /etc/radvd.conf
     interface eth1
     {
        AdvSendAdvert on;
        MaxRtrAdvInterval 3;
        MinRtrAdvInterval 1;    
        AdvIntervalOpt off;
        AdvHomeAgentFlag on;
        HomeAgentLifetime 10000;
        HomeAgentPreference 20;
        AdvHomeAgentInfo on;
        prefix fec0:106:2700::2/64
        {
          AdvRouterAddr on;
          AdvOnLink on;
          AdvAutonomous on;
          AdvPreferredLifetime 10000;
          AdvValidLifetime 12000;
        };
      };
      </screen>

    <para><emphasis>To be completed</emphasis></para>
   
   </sect3>

<!-- ############ -->
   <sect3 id="confmipv6">
     <title>Configuring MIPv6</title>
     <para>The last configuration is MIPv6 settings in
     <emphasis>network-mip6.conf</emphasis>. In RedHat the file is
     found under
     <emphasis>/etc/sysconfig/network-mip6.conf</emphasis>. The file 
     should be pretty self-explanatory. </para>

     <screen>
     # cat /etc/sysconfig/network-mip6.conf
     
     # Home Agent configuration file
     FUNCTIONALITY=ha
     DEBUGLEVEL=1
     MIN_TUNNEL_NR=1
     MAX_TUNNEL_NR=5
     TUNNEL_SITELOCAL=yes
  
     # cat /etc/sysconfig/network-mip6.conf

     # Mobile Node configuration file
     FUNCTIONALITY=mn
     DEBUGLEVEL=1
     TUNNEL_SITELOCAL=yes
     MIN_TUNNEL_NR=1
     MAX_TUNNEL_NR=3
     HOMEDEV=mip6mnha1     
     HOMEADDRESS=fec0:106:2700::4/64  # MN home adress
     HOMEAGENT=fec0:106:2700::2/64    # HA's address
    </screen>

    <para>Next, start mobile-IP:</para>

    <screen>
    # /etc/init.d/mobile-ip6 start
    </screen>

    <para>You can verify that it started by doing a:</para>

    <screen>
    # ifconfig
    </screen>

    <para>If a tunnel get up, 'ip6tnl1'; mobile-ip6 is started.</para>
  
   </sect3>
  </sect2>
 </sect1>

<!-- ##################################################### -->

  <sect1 id="dotest">
    <title>Doing some tests</title>

    <sect2 id="pretest">
      <title>Pre-test</title>
      <para>Do every configuration as shown above, especially important is
      to have different ESSID on the home net and visited network. </para>

      <para>When you start mobile-ipv6 on MN, you will see it
      multicasting router solicitations messages:</para>

      <screen>
      # tcpdump -i eth0 -vv ip6 or proto ipv6

      ...
      13:32:54.681763 fe80::202:a5ff:fe6f:a08a > ff02::2: icmp6: router solicitation \
      (src lladdr: 0:2:a5:6f:a0:8a) (len 16, hlim 255)

      13:32:55.681763 fe80::202:a5ff:fe6f:a08a > ff02::2: icmp6: router solicitation \
      (src lladdr: 0:2:a5:6f:a0:8a) (len 16, hlim 255)

      13:32:57.681765 fe80::202:a5ff:fe6f:a08a > ff02::2: icmp6: router solicitation \
      (src lladdr: 0:2:a5:6f:a0:8a) (len 16, hlim 255)
      ...

      </screen>
    </sect2>
 
<!-- ################## -->

    <sect2 id="MovDet">
      <title>Movement detection</title>
      <para>Generic movement detection uses Neighbor Unreachability
      Detection to detect when the default router is no longer
      bi-directionally reachable, in which case the mobile node must
      discover a new default router (usually on a new link).</para>

      <para> To easily see whats going on, you should have one xterm
      window for each of this commands: </para>

      <screen>
      # watch ifconfig eth0
      # watch route -A inet6
      # tcpdump -i eth0 -vv ip6 or proto ipv6
      </screen>

      <para>To travel to another net, you can issue the command on MN:</para>

      <screen>
      # iwconfig eth1 essid visitnet
      </screen>

      <para>The MN is the on the other wireless network, and since it is
      sending out "router solicitation" (multicast), our AR will
      respond with it's prefix. MN will then configure itself with at new
      IPv6 address with the received prefix and it's own MAC address. If
      you do a 'ifconfig eth0' you will see the new ipv6 address:</para>

      <screen>
      # ifconfig eth0
      eth0  Link encap:Ethernet  HWaddr 00:02:A5:6F:A0:8A
            inet addr:192.168.100.134  Bcast:255.255.255.255  Mask:255.255.255.255
            inet6 addr: fe80::202:a5ff:fe6f:a08a/10 Scope:Link            <co id="linkaddr"/>
            inet6 addr: fec0:106:1100:0:202:a5ff:fe6f:a08a/64 Scope:Site  <co id="newaddr"/>
            inet6 addr: fec0:106:2700::4/64 Scope:Site                    <co id="oldaddr"/>
            UP BROADCAST RUNNING MULTICAST  MTU:1500  Metric:1
            RX packets:65 errors:44 dropped:0 overruns:0 frame:44
            TX packets:134 errors:5 dropped:0 overruns:0 carrier:0
            collisions:0 txqueuelen:100
            RX bytes:5528 (5.3 Kb)  TX bytes:21272 (20.7 Kb)
            Interrupt:3 Base address:0x100
      </screen>
      <calloutlist>
        <callout arearefs="linkaddr">
          <para>The link-local address generated at boot</para>
        </callout>
        <callout arearefs="newaddr">
          <para>The new 'foregin' address, generated by combining AR's
           prefix and MAC-address</para>
        </callout>
        <callout arearefs="oldaddr">
          <para>The 'old' (home) address</para>
        </callout>
      </calloutlist>
    
      <para>Almost at the same time, the MN will perform a binding update
      to HA. In your tcpdump window, you will see several packets
      destined to HA. To verify that the binding update has been sent and
      acknowledged from MN. Do a:</para>

      <screen>
      # mipdiag -s
      Mobile IPv6 Statistics
      NEncapsulations           : 0
      NDecapsulations           : 0
      NBindUpdatesRcvd          : 0
      NBindAcksRcvd             : 1    <co id="back"/>
      NBindNAcksRcvd            : 0
      NBindRqsRcvd              : 0
      NBindUpdatesSent          : 1    <co id="bupdate"/>
      NBindAcksSent             : 0
      NBindNAcksSent            : 0
      NBindRqsSent              : 0
      NBindUpdatesDropAuth      : 0
      NBindUpdatesDropInvalid   : 0
      NBindUpdatesDropMisc      : 0
      NBindAcksDropAuth         : 0
      NBindAcksDropInvalid      : 0
      NBindAcksDropMisc         : 0
      NBindRqsDropAuth          : 0
      NBindRqsDropInvalid       : 0
      NBindRqsDropMisc          : 0
     </screen>
     <calloutlist>
       <callout arearefs="back">
         <para>One binding ACK received.</para>
       </callout>
       <callout arearefs="bupdate">
         <para>One binding UPDATE sent.</para>
       </callout>
     </calloutlist>

     <para>You can also verify the binding with the following command
     (on MN):</para> 

     <screen>
     # mipdiag -l
     Mobile IPv6 Binding update list
     Recipient CN: fec0:106:2700::2
     BINDING home address: fec0:106:2700::4 care-of address: fec0:106:1100:0:202:a5ff:fe6f:a08a
             expires: 115 sequence: 0 state: 1
             delay: 3 max delay 256 callback time: 68
     </screen>

     <para>You can also verify it on HA with the statistics option
     (-s) and with the:</para> 

     <screen>
     # mipdiag -c
     Mobile IPv6 Binding cache
     Home Address      Care-of Address                     Lifetime  Type 
     fec0:106:2700::4  fec0:106:1100:0:202:a5ff:fe6f:a08a  104       2 
     </screen>
   </sect2>

<!-- ################## -->

  <sect2 id="ping6">
     <title>ping6</title>

     <para>From the MN, you can try to ping AR's eth1
     (fec0:106:1100::1)</para> 

     <screen>
     # ping6 fec0:106:1100::1
     PING fec0:106:1100::1(fec0:106:1100::1) from fec0:106:2700::4 : 56 data bytes
     64 bytes from fec0:106:1100::1: icmp_seq=1 ttl=62 time=8.01 ms
     64 bytes from fec0:106:1100::1: icmp_seq=2 ttl=62 time=8.02 ms
     ...
     </screen>

     <para>By using tcpdump, you can see how the packets travel:</para>

     <screen>
     12:13:51.789688 fec0:106:1100:0:202:a5ff:fe6f:a08a > fec0:106:2700::2: \  <co id="mntoha"/>
     fec0:106:2700::4 > fec0:106:1100::1: icmp6: echo request \ <co id="hatocr"/>
     (len 64, hlim 64) (len 104, hlim 255)

     12:13:51.797675 fec0:106:2700::2 > fec0:106:1100:0:202:a5ff:fe6f:a08a: \ <co id="artomn"/>
     fec0:106:1100::1 > fec0:106:2700::4: icmp6: echo reply \
     (len 64, hlim 62) (len 104, hlim 253)
     </screen>

      <calloutlist>
        <callout arearefs="mntoha">
          <para>The packet goes first from MN to the HA using MN new
          IPv6 address.</para>
        </callout>
        <callout arearefs="hatocr">
          <para>Then from HA to AR.</para>
        </callout>
        <callout arearefs="artomn">
          <para>The AR then responds to HA and tunnels the packets to
          MN.</para> 
        </callout>
      </calloutlist>

     <para>You can now see the statistics have been updated:</para>

     <screen>
     # mipdiag -s
     Mobile IPv6 Statistics
     NEncapsulations           : 56
     NDecapsulations           : 25
     ...
    </screen>
  </sect2>

<!-- ################## -->

  <sect2 id="routeTable">
    <title>Kernel IP routing table</title>
    <para>One interesting thing the mipv6 do, is change the default route to
    a tunnel. The new default route become:</para>

    <screen>
    # route -A inet6
    Kernel IPv6 routing table
    Destination      Next Hop       Flags Metric Ref    Use Iface
    ::/0             ::             UD    64     0        0 ip6tnl1
    ....
    </screen>
  </sect2>

<!-- ################## -->

  <sect2 id="movement">
    <title>Travelling through several foregin LAN's</title>

    <para>To be completed.</para>
  </sect2>

<!-- ################## -->

  <sect2 id="home">
    <title>Returning home</title>

    <para>To be completed.</para>
  </sect2>

<!-- ################## -->

  <sect2 id="realLife">
     <title>Real life testing - smooth handover</title>
     <para>To really get the feel on how mobile IP works, fire up gnomemeeting
     (See figure gnomemeeting and start a netmeeting. NB! You must use
     the latest gnomemeeting to get support for IPv6! The do a "travel"
     and you can see a (almost) smooth handover.</para>

     <mediaobject id="gnomemeeting">
       <imageobject>
         <imagedata fileref="images/gnomemeeting1.png" format="PNG" align="center" scalefit="0"/> 
       </imageobject>
     <textobject>
       <phrase>Gnomemeeting</phrase>
     </textobject>
     <caption>
       <para>Using gnomemeeting with IPv6 to test roaming between two
       wireless networks</para>
      </caption>
     </mediaobject>
  </sect2> 

</sect1> 

<!-- ##################################################### -->

<sect1 id="faq">
  <title>FAQ</title>

  <orderedlist>
    <listitem>
      <para><emphasis>Q: Why do we have to create the
      /dev/mipv6_dev entry?</emphasis></para>

      <para>A: The dev file is mainly so that the userspace tool,
      mipdiag, can make modifications to the kernel parameters using
      ioctl calls through the device file. 'mknod' creates the special
      device file with paramters recognizable by the mobile-ip6
      module.</para> 
    </listitem>

    <listitem>
      <para><emphasis>Q: Does MIPL support
      IPSec?</emphasis></para> 

      <para>A: There is no support IPSec on 2.4.x. MIPL for 2.6 series will
      have IPSec support from the start. You may use a 3rd. party IPSec
      implementation.</para>
    </listitem>

    <listitem>
      <para><emphasis>Q: How can I control the type of routing used for
      communication between the MN and a CN (through HA tunnel or by
      direct communication using binding update/acks)?</emphasis></para>

      <para>A: You can control this through:</para>

      <para>
      <userinput>/proc/sys/conf/net/ipv6/mobility/accept_return_routability</userinput>
      </para>

      <para>Set it to 0 with</para>

      <para>
      <userinput># echo 0 >
      /proc/sys/..../accept_return_routability</userinput>
      </para>

      <para>if you do not want to use return routability and route
      optimization. Then MN will communicate with CNs only through the
      home tunnel.</para>
   </listitem>

   <listitem>
     <para><emphasis>Q: Can different wireless network
     have different ESSIDs / WEP keys?</emphasis></para>

     <para>A: Yes, but you must change this upon arrival to the new
     network. MIPv6 from MIPL can't do this automatically.</para>
   </listitem>    
 
   <listitem>
     <para><emphasis>Q: Host B has two interfaces with two
      different subnet assigned. When I ping B from host A, it does
      not answer! Why doesn't it do that? Host A know where host B
      (subnet) are!</emphasis></para>

      <para>A: The host B doesn't know where host A are (B doesn't
      know where A's net is), so you must add a route
      entry:</para> 
   
      <para><userinput>
       # ip route add fec0:106:2700::/64 via fec0:106:2300::1
      </userinput></para>

     <para>or</para>

      <para><userinput>
      # route -A inet6 add fec0:106:2700::/64 gw fec0:106:2300::1 dev eth0
      </userinput></para>
   </listitem>

   <listitem>
     <para><emphasis>Q: How do I set default gateway in
     ipv6?</emphasis></para> 
    
     <para>A: You do that using the traditional ``route'' or the newer ``ip''
     command:</para>
  
     <para><userinput>
      # ip route ::/0 via  &lt;ipv6-host>
      # route -A inet6 add default gw &lt;ipv6-host>
     </userinput></para>
   </listitem>

   <listitem>
     <para><emphasis>Q: Why does the host send a multicast
     address rather than an anycast address, requesting for router
     solicitation?</emphasis></para> 

     <para>A: Because the host wants an answer from every routers, not from any 
     router.  The idea is to be able to get all parameters and to choice
     the "best" default router.</para>
   </listitem>

   <listitem>
     <para><emphasis>Q: Why doesn't MN notice that it has
     moved?</emphasis></para>

     <para>A: It thinks that its previous router is still reachable. This may
     result from very large lifetimes in router advertisements. Check the
     configuration of the program sending router advertisements in the
     routers. If the program supports router advertisement interval, you
     can use it to help MN in movement detection by setting the use of
     interval to on. See man radvd.conf for details.</para>
   </listitem>
  </orderedlist>

</sect1>

<!-- ##################################################### -->

<sect1 id="resources">
  <title>Useful Resources</title>

  <para>
  <orderedlist>
    <listitem> 
      <para>Mobile IPv6 for Linux <ulink
      url="http://www.mipl.mediapoli.com/">
      http://www.mipl.mediapoli.com/</ulink></para> 
    </listitem>
    
    <listitem>
      <para>Mobile IP Working Group (IETF) <ulink
      url="http://www.ietf.org/html.charters/mobileip-charter.html">
      http://www.ietf.org/html.charters/mobileip-charter.html </ulink></para>
    </listitem>

    <listitem>
      <para>Mobile IPv6 draft <ulink
      url="http://www.ietf.org/internet-drafts/draft-ietf-mobileip-ipv6-24.txt">
      http://www.ietf.org/internet-drafts/draft-ietf-mobileip-ipv6-24.txt</ulink>
      </para>
    </listitem>

    <listitem>
      <para>IPv6 Working Group (IETF) <ulink
      url="http://www.ietf.org/html.charters/ipv6-charter.html">
      http://www.ietf.org/html.charters/ipv6-charter.html </ulink></para>
    </listitem>
   
    <listitem>
      <para>RFC2460 Internet Protocol, Version 6 (IPv6) Specification
      <ulink url="http://www.ietf.org/rfc/rfc2460.txt">
      http://www.ietf.org/rfc/rfc2460.txt </ulink></para>
    </listitem>

    <listitem>
      <para>RFC2461 Neighbor Discovery for IP Version 6 (IPv6) <ulink
      url="http://www.ietf.org/rfc/rfc2461.txt">
      http://www.ietf.org/rfc/rfc2461.txt </ulink></para>
    </listitem>
   
    <listitem>
      <para>RFC2462 IPv6 Stateless Address Autoconfiguration <ulink
      url="http://www.ietf.org/rfc/rfc2462.txt">
      http://www.ietf.org/rfc/rfc2462.txt </ulink></para>
    </listitem>
 
    <listitem>
      <para>Peter Bieringer's Linux IPv6 HOWTO (en) <ulink
      url="http://ldp.linux.no/HOWTO/Linux+IPv6-HOWTO/">
      http://ldp.linux.no/HOWTO/Linux+IPv6-HOWTO/ </ulink></para>
    </listitem>

    <listitem>
      <para>Current Status of IPv6 Support for Networking Applications
      <ulink url="http://www.deepspace6.net/docs/ipv6_status_page_apps.html">
      http://www.deepspace6.net/docs/ipv6_status_page_apps.html</ulink></para>
    </listitem>
  
    <listitem>
      <para>Linux Kernel HOWTO <ulink
      url="http://www.ibiblio.org/pub/Linux/docs/HOWTO/other-formats/html_single/Kernel-HOWTO.html">
      http://www.ibiblio.org/pub/Linux/docs/HOWTO/other-formats/html_single/Kernel-HOWTO.html
      </ulink></para>
    </listitem>
  </orderedlist>
  </para>
</sect1>

<!-- ##################################################### -->

<sect1 id="copyack">
  <title>Copyright, acknowledgments and miscellaneous</title>

<!-- ################## -->

  <sect2 id="copyright">
    <title>Copyright and License</title>
    <para>
     Copyright (c) 2003 by Lars Strand. This material may
     be distributed only subject to the terms and conditions set forth
     in the Open Publication License, v1.0 or later (the latest version
     is presently available at <ulink
     url="http://www.opencontent.org/openpub/">
     http://www.opencontent.org/openpub/ </ulink>).
    </para>

    <para>
     Linux is a registered trademark of Linus Torvalds.
    </para>
  </sect2>

<!-- ################## -->

  <sect2 id="disclaimer">
    <title>Disclaimer</title>

    <para>
     No liability for the contents of this document can be accepted.
     Use the concepts, examples and information at your own risk.
     There may be errors and inaccuracies, that could be damaging to
     your system.  Proceed with caution, and although this is highly
     unlikely, the author(s) do not take any responsibility.
    </para>

    <para>
     All copyrights are held by their by their respective owners,
     unless specifically noted otherwise.  Use of a term in this
     document should not be regarded as affecting the validity of any
     trademark or service mark.  Naming of particular products or
     brands should not be seen as endorsements.
    </para>
  </sect2>

<!-- ################## -->

  <sect2 id="produced">
    <title>How this document was produced</title>
    <para>This document was originally written in LaTeX using
    Emacs. HTML version created with latex2html. Later it was
    converted to DocBook XML.</para>

    <para>An up-to-date version of this document can be found at:</para>

    <para> HTML: <ulink url="http://www.gnist.org/~lars/work/insc/mipv6/">
    http://www.gnist.org/~lars/work/insc/mipv6/</ulink> </para>
  </sect2>

<!-- ################## -->

  <sect2 id="feedback">
    <title>Feedback</title>
    <para>Suggestions, corrections, additions wanted. Contributors
    wanted and acknowledged. Flames not wanted.</para>

    <para>I can always be reached at <email>lars at unik no</email></para>
  </sect2>

<!-- ################## -->

  <sect2 id="ack">
    <title>Acknowledgments</title>
    <para>This document was produced as a part of Interoperable
    Networks for Secure Communications <ulink
    url="http://insc.nodeca.mil.no/">(INSC task 6)</ulink></para> 

    <para>Thanks to Andreas Hafslund (andreha [at] unik.no) for
    initial support. Also thanks to UniK (University Graduate Center)
    <ulink url="http://www.unik.no">http://www.unik.no</ulink> and FFI
    (Norwegian Defence Research Establishment) <ulink
    url="http://www.ffi.mil.no">http://www.ffi.mil.no</ulink> for
    hardware support.</para>

    <para>Thanks also to the other HOWTO authors whose works I have
    referenced: </para>

    <para><emphasis>Linux IPv6 HOWTO (en)</emphasis> by Peter
    Bieringer</para> 
  </sect2>

</sect1>

</article>

