<!doctype book public "-//OASIS//DTD DocBook V3.1//EN"
 [ <!entity header system "header.sgml">
 
]>

<book>
<!-- DocBook file was created by LyX 1.1
  See http://www.lyx.org/ for more information -->
 <bookinfo>
  <title>
  Linux IPv6 HOWTO
 </title>
<author> 
 <firstname>
  Peter 
 </firstname>
 <surname>
  Bieringer
 </surname>
<affiliation><address> <email>pb (at) bieringer.de</email> </address> </affiliation> 
</author>
<revhistory> 
<revision> <revnumber>Release 0.14</revnumber> <date>2002-01-14</date> <authorinitials>PB</authorinitials> <revremark>See  <link linkend="revision-history">revision history</link> for more</revremark></revision>
<revision> <revnumber>Release 0.13</revnumber> <date>2002-01-05</date> <authorinitials>PB</authorinitials> <revremark>See  <link linkend="revision-history">revision history</link> for more</revremark></revision>
</revhistory> 
 <abstract>
 <para>
  The goal of the Linux IPv6 HOWTO is to answer both basic and advanced questions about IPv6 on the Linux operating system. This HOWTO will provide the reader with enough information to install, configure, and use IPv6 applications on Linux machines.
 </para>
 </abstract>
 </bookinfo>
 <chapter id="chapter-general">
  <title>
  General
 </title>
 <comment>
  &ldquo;&lt;&rdquo; must be encoded using &ldquo;&amp;lt;&rdquo; because of SGML export, otherwise this will be recognized as SGML tag, which isn't really one...
 </comment>
  <sect1 id="general-copright">
   <title>
   Copyright, license and others
  </title>
   <sect2>
    <title>
    Copyright
   </title>
   <para>
    Written and Copyright (C) 2001-2002 by Peter Bieringer
   </para>
   </sect2>
   <sect2>
    <title>
    License
   </title>
   <para>
    This Linux IPv6 HOWTO is published under GNU GPL version 2:




   </para>
   <para>
    The Linux IPv6 HOWTO, a guide how to configure and use IPv6 on Linux systems. 

   </para>
   <para>
    Copyright (C) 2001-2002 Peter Bieringer 

   </para>
   <para>
    This documentation is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation; either version 2 of the License, or (at your option) any later version. 
   </para>
   <para>
    This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for more details. 
   </para>
   <para>
    You should have received a copy of the GNU General Public License along with this program; if not, write to the Free Software Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.
   </para>
   </sect2>
   <sect2>
    <title>
    About the author
   </title>
    <sect3>
     <title>
     Internet/IPv6 history of the author
    </title>
    <itemizedlist>
     <listitem>
     <para>
     1993: I got in contact with the Internet using console based e-mail and news client (e.g. look for &ldquo;e91abier&rdquo; on <ulink url="http://groups.google.com/">groups.google.com</ulink>, that's me).
     </para>
    </listitem>
     <listitem>
     <para>
     1996: I got a request for designing a course on IPv6, including a workshop with the Linux operating system.
     </para>
    </listitem>
     <listitem>
     <para>
     1997: Started writing a guide on how to install, configure and use IPv6 on Linux systems, called <ulink url="http://www.bieringer.de/linux/IPv6/">IPv6 & Linux - HowTo</ulink> (see <ulink url="http://www.bieringer.de/linux/IPv6/IPv6-HOWTO/IPv6-HOWTO-0.html#history">IPv6 & Linux - HowTo/History</ulink> for more information).
     </para>
    </listitem>
     <listitem>
     <para>
     2001: Started writing this new Linux IPv6 HOWTO. 
     </para>
    </listitem>
    </itemizedlist>
    </sect3>
    <sect3>
     <title>
     Contact
    </title>
    <para>
     The author can be contacted via e-mail at &lt;pb at bieringer dot de&gt; and also via his <ulink url="http://www.bieringer.de/pb/">homepage</ulink>.
    </para>
    <para>
     He's currently living in Munich &lsqb;northern part of Schwabing&rsqb; / Bavaria / Germany (south) / Europe (middle) / Earth (surface/mainland).
    </para>
    </sect3>
   </sect2>
  </sect1>
  <sect1 id="general-category">
   <title>
   Category
  </title>
  <para>
   This HOWTO should be listed in category &ldquo;<emphasis>Networking</emphasis>/<emphasis>Protocols</emphasis>&rdquo;.
  </para>
  </sect1>
  <sect1>
   <title>
   Version, History and To-Do
  </title>
   <sect2>
    <title>
    Version
   </title>
   <para>
    The current version is shown above.
   </para>
   </sect2>
   <sect2>
    <title>
    History
   </title>
    <sect3>
     <title>
     Major history
    </title>
    <para>
     2001-11-30: Starting to design new HOWTO.
    </para>
    <para>
     2002-01-02: A lot of content completed, first public release of chapter 1 (version 0.10).
    </para>
    <para>
     2002-01-14: More completed, some reviews, public release of the whole document (version 0.14).
    </para>
    </sect3>
    <sect3>
     <title>
     Full history
    </title>
    <para>
     See <link linkend="revision-history">revision history</link> at the end of this document.
    </para>
    </sect3>
   </sect2>
   <sect2>
    <title>
    To-Do
   </title>
   <itemizedlist>
    <listitem>
    <para>
    Fill in missing content
    </para>
   </listitem>
    <listitem>
    <para>
    Finishing grammar checking
    </para>
   </listitem>
   </itemizedlist>
   </sect2>
  </sect1>
  <sect1>
   <title>
   Translations
  </title>
  <para>
   Translations always have to contain the URL, version number and copyright of the original document (but yours, too).
  </para>
   <sect2>
    <title>
    To German
   </title>
   <para>
    A German translation is planned by me (German is my native language), but it won't happen until the document change frequency is less than once/month and when I get enough free time to do that. If you have more free time than me, please feel free to take over the translation!
   </para>
   </sect2>
   <sect2>
    <title>
    To other languages
   </title>
   <para>
    Please wait until the document change frequency is less than once/month.
   </para>
   </sect2>
  </sect1>
  <sect1>
   <title>
   Technical
  </title>
   <sect2>
    <title>
    Original source of this HOWTO
   </title>
   <para>
    This HOWTO is written with LyX version 1.1.6fix1 on a Red Hat Linux 7.2 system with template SGML (DocBook book). SGML is generated using export function in LyX.
   </para>
   </sect2>
   <sect2>
    <title>
    On-line references to the HTML version of this HOWTO (linking/anchors)
   </title>
    <sect3>
     <title>
     Master index page
    </title>
    <para>
     Generally, a reference to the master index page is recommended. 
    </para>
    </sect3>
    <sect3>
     <title>
     Dedicated pages
    </title>
    <para>
     Because the HTML pages are generated out of the SGML file, the HTML filenames turn out to be quite random. However, some pages are tagged in LyX, resulting in static names. These tags are useful for references and shouldn't be changed in the future.
    </para>
    <para>
     If you think that I have forgotten a tag, please let me know, and I will add it.
    </para>
    </sect3>
   </sect2>
  </sect1>
  <sect1>
   <title>
   Preface
  </title>
  <para>
   Some things first:
  </para>
   <sect2>
    <title>
    How many issues of a Linux &amp; IPv6 related HOWTO are floating around?
   </title>
   <para>
    Including this, there are three (3) HOWTO documents available. Sorry, if that's too many ;-)
   </para>
    <sect3>
     <title>
     Linux IPv6 FAQ/HOWTO (outdated)
    </title>
    <para>
     The first IPv6 related document was written by <emphasis>Eric Osborne</emphasis> and called <ulink url="http://www.linuxhq.com/IPv6/">Linux IPv6 FAQ/HOWTO</ulink> (please use it only for historical issues). Latest version was 3.2.1 released 14. Juli 1997.
    </para>
    <para>
     Please help: if someone knows the date of birth of this HOWTO, please send me an e-mail (information will be needed in &ldquo;history&rdquo;).
    </para>
    </sect3>
    <sect3>
     <title>
     IPv6 &amp; Linux - HowTo (maintained)
    </title>
    <comment>
     This HOWTO is really named &ldquo;HowTo&rdquo;
    </comment>
    <para>
     There exists a second one called <ulink url="http://www.bieringer.de/linux/IPv6/">IPv6 & Linux - HowTo</ulink> written by me (<emphasis>Peter Bieringer</emphasis>) in pure HTML. It was born April 1997 and the first English version was published in June 1997. I will continue to maintain it, but it will slowly fade in favor of the Linux IPv6 HOWTO you are reading right this second.
    </para>
    </sect3>
    <sect3>
     <title>
     Linux IPv6 HOWTO (this document)
    </title>
    <para>
     Because the <ulink url="http://www.bieringer.de/linux/IPv6/">IPv6 & Linux - HowTo</ulink> is written in pure HTML it's not really compatible with the <ulink url="http://www.linuxdoc.org/">Linux Documentation Project (LDP)</ulink>. I (<emphasis>Peter Bieringer</emphasis>) got a request in late November 2001 to rewrite the <ulink url="http://www.bieringer.de/linux/IPv6/">IPv6 & Linux - HowTo</ulink> in SGML. However, because of the discontinuation of that HOWTO (<ulink url="http://www.bieringer.de/linux/IPv6/IPv6-HOWTO/IPv6-HOWTO-0.html#history">Future of IPv6 & Linux - HowTo</ulink>) once IPv6 becomes more and more standard, I decided to write a new document covering basic and advanced issues which will remain important over the next years. Dynamic content will be still found further on in the second HOWTO (<ulink url="http://www.bieringer.de/linux/IPv6/">IPv6 & Linux - HowTo</ulink>).
    </para>
    </sect3>
   </sect2>
  </sect1>
  <sect1>
   <title>
   Used terms
  </title>
   <sect2>
    <title>
    Network related
   </title>
   <variablelist>
    <varlistentry>
    <term>
    Link
</term><listitem><para>A link is a layer 2 network packet transport medium, examples are Ethernet, Token Ring, PPP, SLIP, ATM, ISDN, Frame Relay,...
    </para>
   </listitem>
   </varlistentry>
    <varlistentry>
    <term>
    Node
</term><listitem><para>A node is a host or a router.
    </para>
   </listitem>
   </varlistentry>
    <varlistentry>
    <term>
    Host
</term><listitem><para>Normally a single homed host on a link. Normally it has only one active network interface, e.g. Ethernet or (not and) PPP.
    </para>
   </listitem>
   </varlistentry>
    <varlistentry>
    <term>
    Dual homed host
</term><listitem><para>A dual homed host is a node with two network (physical or virtual) interfaces on two different links, but do not forwarding any packets between the two connected links.
    </para>
   </listitem>
   </varlistentry>
    <varlistentry>
    <term>
    Router
</term><listitem><para>A router is a node with two or more network (physical or virtual) interfaces, able to forward any packets between the interfaces.
    </para>
   </listitem>
   </varlistentry>
    <varlistentry>
    <term>
    Tunnel
</term><listitem><para>A tunnel is typically a point-to-point connection on which packets are exchanged which contains data of another protocol, e.g. an IPv6-in-IPv4 tunnel.
    </para>
   </listitem>
   </varlistentry>
    <varlistentry>
    <term>
    NIC
</term><listitem><para>Network Interface Card
    </para>
   </listitem>
   </varlistentry>
   </variablelist>
   </sect2>
   <sect2>
    <title>
    Document related
   </title>
    <sect3>
     <title>
     Placeholders
    </title>
    <para>
     In generic examples you will find sometimes like
    </para>
    <programlisting>
&lt;myipaddress>
    </programlisting>
    <para>
     For real use on your system command line or in scripts this has to be replaced with related content (also removing &lt; and &gt;), the result would be e.g.
    </para>
    <programlisting>
1.2.3.4
    </programlisting>
    </sect3>
    <sect3>
     <title>
     Commands in the shell
    </title>
    <para>
     Commands executable as non-root user starts with &dollar;, e.g.
    </para>
    <programlisting>
$ whoami
    </programlisting>
    <para>
     Commands executable as root user starts with &num;, e.g.
    </para>
    <programlisting>
# whoami
    </programlisting>
    </sect3>
   </sect2>
  </sect1>
  <sect1>
   <title>
   Requirements for using this HOWTO
  </title>
   <sect2>
    <title>
    Personal prerequisites
   </title>
    <sect3>
     <title>
     Experience with Unix tools
    </title>
    <para>
     You should be familiar with the major Unix tools e.g. <emphasis>grep</emphasis>, <emphasis>awk</emphasis>, <emphasis>find</emphasis>, ... , and know about their most commonly used command-line options.
    </para>
    </sect3>
    <sect3>
     <title>
     Experience with networking theory
    </title>
    <para>
     You should know about layers, protocols, addresses, cables, plugs, etc. If you are new to this field, here is one good starting point for you: <ulink url="http://www.linuxports.com/howto/intro_to_networking/">linuxports/howto/intro_to_networking</ulink>
    </para>
    </sect3>
    <sect3>
     <title>
     Experience with IPv4 configuration
    </title>
    <para>
     You should definitely have some experience in IPv4 configuration, otherwise it's hard for you to understand what's really going on.
    </para>
    </sect3>
    <sect3>
     <title>
     Experience with the Domain Name System (DNS)
    </title>
    <para>
     Also you should understand what the Domain Name System (DNS) is, what it provides and how to use it.
    </para>
    </sect3>
    <sect3>
     <title>
     Experience with network debugging strategies
    </title>
    <para>
     You should at least understand how to use <emphasis>tcpdump</emphasis> and what<emphasis> </emphasis>it can show you. Otherwise, network debugging will very hard for you.
    </para>
    </sect3>
   </sect2>
   <sect2>
    <title>
    Linux operating system compatible hardware
   </title>
   <para>
    Surely you want to run some tests too, not only read this HOWTO and fall asleep here and there. :)
   </para>
   </sect2>
  </sect1>
  <sect1>
   <title>
   Credits
  </title>
  <para>
   The quickest way to be added to this nice list is to send bug fixes, corrections, and/or updates to me ;-).
  </para>
  <para>
   If you want to do a major review, please ask the author for the native LyX file as diffs against SGML don't help too much.
  </para>
   <sect2>
    <title>
    Major credits
   </title>
   <itemizedlist>
    <listitem>
    <para>
    David Ranch &lt;dranch at trinnet dot net&gt;: For encouraging me to write this HOWTO, his editorial comments on the first few revisions, and his contributions to various IPv6 testing results on my IPv6 web site. Also for his major reviews and suggestions.
    </para>
   </listitem>
    <listitem>
    <para>
    Pekka Savola &lt;pekkas at netcore dot fi&gt;: For major reviews and suggestions.
    </para>
   </listitem>
    <listitem>
    <para>
    Martin F. Krafft &lt;madduck at madduck dot net&gt;: For grammar checks and general reviewing of the document.
    </para>
   </listitem>
   </itemizedlist>
   </sect2>
   <sect2>
    <title>
    Other credits
   </title>
    <sect3>
     <title>
     Document technique related
    </title>
    <para>
     Writing a LDP HOWTO as a newbie (in LyX and exporting this to DocBook to conform to SGML) isn't as easy as some people say. There are some strange pitfalls... Nevertheless, thanks to:
    </para>
    <itemizedlist>
     <listitem>
     <para>
     Authors of the <ulink url="http://www.linuxdoc.org/LDP/LDP-Author-Guide/">LDP Author Guide</ulink>
     </para>
    </listitem>
     <listitem>
     <para>
     B. Guillon: For his <ulink url="http://perso.libertysurf.fr/bgu/doc/db4lyx/">DocBook with LyX HOWTO</ulink>
     </para>
    </listitem>
    </itemizedlist>
    </sect3>
    <sect3>
     <title>
     Document content related
    </title>
    <itemizedlist>
     <listitem>
     <para>
     S .P. Meenakshi &lt;meena at cs dot iitm dot ernet dot in&gt;: For a hint using a &ldquo;send mail&rdquo; shell program on tcp_wrapper/hosts.deny
     </para>
    </listitem>
    </itemizedlist>
    <para>
     more to come...
    </para>
    </sect3>
   </sect2>
  </sect1>
 </chapter>
 <chapter id="chapter-basics">
  <title>
  Basics
 </title>
  <sect1>
   <title>
   What is IPv6?
  </title>
  <para>
   IPv6 is a new layer 3 transport protocol (see <ulink url="http://www.linuxports.com/howto/intro_to_networking/c4412.htm#PAGE103HTML">linuxports/howto/intro_to_networking/ISO - OSI Model</ulink>) which will supersede IPv4 (also known as IP). IPv4 was designed long time ago (<ulink url="http://rfc.net/rfc760.html">RFC 760</ulink> from January 1980) and since its incantation, there were many requests for more addresses and enhanced capabilities. Major changes in IPv6 are the redesign of the header, including the increase of address size from 32 bits to 128 bits. Because the layer 3 is responsible for end-to-end packet transport using packet routing based on addresses, it must include the new IPv6 addresses (source and destination), like IPv4.
  </para>
  <para>
   For more information about the IPv6 history take a look at older IPv6 related RFCs listed e.g. at <ulink url="http://www.switch.ch/lan/ipv6/references.html">SWITCH IPv6 Pilot / References</ulink>.
  </para>
  </sect1>
  <sect1 id="basic-history-IPv6-Linux">
   <title>
   History of IPv6 in Linux
  </title>
  <para>
   To-do: better time-line, more content...
  </para>
   <sect2>
    <title>
    Beginning
   </title>
   <para>
    The first IPv6 related network code was added to the Linux kernel 2.1.8 in November 1996 by Pedro Roque. It was based on the BSD API:
   </para>
   <programlisting>
diff -u --recursive --new-file v2.1.7/linux/include/linux/in6.h linux/include/linux/in6.h 
--- v2.1.7/linux/include/linux/in6.h Thu Jan 1 02:00:00 1970 
+++ linux/include/linux/in6.h Sun Nov 3 11:04:42 1996 
@@ -0,0 +1,99 @@ 
+/* 
+ * Types and definitions for AF_INET6 
+ * Linux INET6 implementation 
+ * + * Authors: 
+ * Pedro Roque &lt;******> 
+ * 
+ * Source: 
+ * IPv6 Program Interfaces for BSD Systems 
+ * &lt;draft-ietf-ipngwg-bsd-api-05.txt>
   </programlisting>
   <para>
    The shown lines were copied from patch-2.1.8 (e-mail address was blanked on copy&amp;paste).
   </para>
   </sect2>
   <sect2>
    <title>
    In between
   </title>
   <para>
    Because of lack of manpower, the IPv6 implementation in the kernel couldn't follow the discussed drafts or newly released RFCs. In October 2000, a project was started in Japan, called <ulink url="http://www.linux-ipv6.org/">USAGI</ulink>, whose aim was to implement all missing or outdated IPv6 support in Linux, tracking the current IPv6 implementation in FreeBSD made by the <ulink url="http://www.kame.net/">KAME project</ulink>. From time to time they created snapshot against current vanilla Linux kernel sources.
   </para>
   </sect2>
   <sect2>
    <title>
    Current
   </title>
   <para>
    Unfortunately, the <ulink url="http://www.linux-ipv6.org/">USAGI</ulink> patch is so big, that current Linux networking maintainers aren't able to include it in the production source of the Linux kernel 2.4.x series. Therefore the 2.4.x series misses some (many) extensions and also didn't fulfill all current drafts and RFCs. This can cause some interoperability problems with other operating systems.
   </para>
   </sect2>
   <sect2>
    <title>
    Future
   </title>
   <para>
    <ulink url="http://www.linux-ipv6.org/">USAGI</ulink> now makes use of the new Linux kernel development series 2.5.x to put all their current extensions into this development release. Hopefully the 2.6.x kernel series will contain a true and up-to-date IPv6 implementation.
   </para>
   </sect2>
  </sect1>
  <sect1>
   <title>
   How do IPv6 addresses look like?
  </title>
  <para>
   As said, IPv6 addresses are 128 bits long. This number of bits can cause very high decimal numbers with up to 39 digits: 
  </para>
  <programlisting>
2^{128}-1: 340282366920938463463374607431768211455
  </programlisting>
  <para>
   &quot;Such numbers are not really addresses that can be memorized. Also the IPv6 address schema is bitwise orientated (just like IPv4, but that's not often recognized). Therefore a better notation of such big numbers is hexadecimal. In hexadecimal, 4 bits (also known as &ldquo;nibble&rdquo;) are represented by a digit or char from 0-9 and a-f (10-15) and reduces the length to 32 chars.
  </para>
  <programlisting>
2^{128}-1: 0xffffffffffffffffffffffffffffffff
  </programlisting>
  <para>
   This representation is also not very convenient (possible mix-up or loss of single hexadecimal digits), so the designers of IPv6 chose a hexadecimal format with a colon as separator after each block of 16 bits. In addition, the leading &quot;0x&quot; (a signifier for hexadecimal values used in programming languages) is removed:
  </para>
  <programlisting>
2^{128}-1: ffff:ffff:ffff:ffff:ffff:ffff:ffff:ffff
  </programlisting>
  <para>
   A usable address (see address types later) is e.g.: 
  </para>
  <programlisting>
3ffe:ffff:0100:f101:0210:a4ff:fee3:9566
  </programlisting>
  <para>
   For simplifications, leading zeros of each 16 bit block can be omitted: 
  </para>
  <programlisting>
3ffe:ffff:0100:f101:0210:a4ff:fee3:9566  ->  3ffe:ffff:100:f101:210:a4ff:fee3:9566
  </programlisting>
  <para>
   One sequence of 16 bit blocks containing only zeroes can be replaced with &ldquo;::&ldquo;. But not more than one time, because otherwise its no longer a unique representation. 
  </para>
  <programlisting>
3ffe:ffff:100:f101:0:0:0:1  ->  3ffe:ffff:100::1
  </programlisting>
  <para>
   The biggest reduction is seen by the IPv6 localhost address: 
  </para>
  <programlisting>
0000:0000:0000:0000:0000:0000:0000:0001  ->  ::1
  </programlisting>
  <para>
   There is also a so-called <emphasis>compact</emphasis> (base85 coded) representation defined <ulink url="http://rfc.net/rfc1924.html">RFC 1924 / A Compact Representation of IPv6 Addresses</ulink> (written 1996), never seen in the wild, but here is an example: 
  </para>
  <programlisting>
# ipv6calc --addr_to_base85 3ffe:ffff:0100:f101:0210:a4ff:fee3:9566 
Itu&-ZQ82s>J%s99FJXT
  </programlisting>
  <blockquote>
  <para>
   Info: <emphasis>ipv6calc</emphasis> is an IPv6 address format calculator and converter program and can be found here: <ulink url="http://www.bieringer.de/linux/IPv6/tools/index.html#ipv6calc">ipv6calc</ulink>
  </para>
  </blockquote>
  </sect1>
  <sect1>
   <title>
   FAQ (Basics)
  </title>
   <sect2>
    <title>
    Why is the name IPv6 and not IPv5 as successor for IPv4?
   </title>
   <para>
    On any IP header, the first 4 bits are reserved for protocol version. So theoretically a protocol number between 0 and 15 is possible:
   </para>
   <itemizedlist>
    <listitem>
    <para>
    4: is already used for IPv4
    </para>
   </listitem>
    <listitem>
    <para>
    5: is reserved for the Stream Protocol (STP, <ulink url="http://rfc.net/rfc1819.html">RFC 1819</ulink>) (which never really made it to the public)
    </para>
   </listitem>
   </itemizedlist>
   <para>
    So the next free number was 6.
   </para>
   </sect2>
   <sect2>
    <title>
    IPv6 addresses: why such a high number of bits?
   </title>
   <para>
    During the design of IPv4, people thought that 32 bits were enough for the world. Looking back into the past, 32 bits were enough until now and will perhaps be enough for another couple years. However, 32 bits are not not enough to provide each network device with a global address in the future. Think about mobile phones, cars (including electronic devices on its CAN-bus), toasters, refrigerators, light switches, and so on...
   </para>
   <para>
    So designers have chosen 128 bit, 4 times more in length and 2^96 in size than in IPv4 today.
   </para>
   <para>
    But the usable size is smaller than it may appear, because in the currently defined address schema, 64 bits are user for interface identifiers. The other 64 bits are used for routing. Assuming the current strict levels of aggregation (/48, /35, ...), it's still possible to &ldquo;run out&rdquo; of space, but surely not in the near future.
   </para>
   </sect2>
   <sect2>
    <title>
    IPv6 addresses: why so small a number of bits on a new design?
   </title>
   <para>
    Well, there is one (or more?) people on the Internet who think about IPv8 and IPv16, but their design is far away from acceptance and implementation.
   </para>
   <para>
    128 bit was the best choice regarding header overhead and data transport. Think about the minimum Maximum Transfer Unit (MTU) in IPv4 (576 octets) and in IPv6 (1280 octets), the header length in IPv4 is 20 octets (minimum, can increase to 60 octets with IPv4 options) and in IPv6 is 48 octets (fixed). This is 3.4 &percnt; of MTU in IPv4 and 3.8 &percnt; of MTU in IPv6. This means the header overhead is nearly equal. More bits for addresses would require bigger headers and therefore more overhead. Also think about the maximum MTU on normal links (like Ethernet today): it's 1500 octets (in special cases: 9k octets using Jumbo frames). Ultimately, it wouldn't be a proper design if 10 &percnt; or 20 &percnt; of transported data in a Layer-3 packet were used for addresses and not for payload...
   </para>
   </sect2>
  </sect1>
 </chapter>
 <chapter id="chapter-addresstypes">
  <title>
  Address types
 </title>
 <para>
  Like IPv4, IPv6 addresses can be split into network and host parts using subnet masks.
 </para>
 <para>
  IPv4 has shown that sometimes it would be nice, if more than one IP address can be assigned to an interface, each for a different purpose (aliases, multi-cast). 
 </para>
 <para>
  To remain extensible in the future, IPv6 is going further and allows more than one IPv6 address assigned to an interface. There is currently no limit defined by an RFC, only in the implementation of the IPv6 stack (to prevent DoS attacks).
 </para>
 <para>
  Using this big number of bits for addresses, IPv6 defines address types based on some leading bits, which are hopefully never going to be broken in the future (unlike IPv4 today and the history of class A, B, and C).
 </para>
 <para>
  Also the number of bits are separated into a network part (upper 64 bits) and a host part (lower 64 bits), to facilitate auto-configuration .
 </para>
  <sect1>
   <title>
   Addresses without a special prefix
  </title>
   <sect2>
    <title>
    Localhost address
   </title>
   <para>
    This is a special address for the loopback interface, like IPv4 with its &ldquo;127.0.0.1&rdquo;. With IPv6, the localhost address is:
   </para>
   <programlisting>
0000:0000:0000:0000:0000:0000:0000:0001 
   </programlisting>
   <para>
    or compressed:
   </para>
   <programlisting>
::1
   </programlisting>
   <para>
    Packets with this address as source or destination should never leave the sending host.
   </para>
   </sect2>
   <sect2>
    <title>
    Unspecified address
   </title>
   <para>
    This is a special address like &ldquo;any&rdquo; or &ldquo;0.0.0.0&rdquo; in IPv4 . For IPv6 it's:
   </para>
   <programlisting>
0000:0000:0000:0000:0000:0000:0000:0000 
   </programlisting>
   <para>
    or:
   </para>
   <programlisting>
::
   </programlisting>
   <para>
    This address are mostly used/seen in socket binding (to any IPv6 address) or routing tables.
   </para>
   <para>
    Note: the unspecified address cannot be used as a source address.
   </para>
   </sect2>
   <sect2>
    <title>
    IPv6 address with embedded IPv4 address
   </title>
   <para>
    There are two addresses which contain an IPv4 address.
   </para>
    <sect3>
     <title>
     IPv4-mapped IPv6 address
    </title>
    <para>
     IPv4-only IPv6-compatible addresses are sometimes used/shown for sockets created by an IPv6-enabled daemon, but binding to an IPv4 address only.
    </para>
    <para>
     These addresses are defined with a special prefix of length 96 (a.b.c.d is the IPv4 address):
    </para>
    <programlisting>
0:0:0:0:0:ffff:a.b.c.d/96
    </programlisting>
    <para>
     or in compressed format
    </para>
    <programlisting>
::ffff:a.b.c.d/96
    </programlisting>
    <para>
     For example, the IPv4 address 1.2.3.4 looks like this:
    </para>
    <programlisting>
::ffff:1.2.3.4
    </programlisting>
    </sect3>
    <sect3>
     <title>
     IPv4-compatible IPv6 address
    </title>
    <para>
     Also for sockets, in this case it's for dual use and looking like
    </para>
    <programlisting>
0:0:0:0:0:0:a.b.c.d/96
    </programlisting>
    <para>
     or in compressed format
    </para>
    <programlisting>
::a.b.c.d/96
    </programlisting>
    <para>
     They are also used by automatic tunneling, which is being replaced by <link linkend="tunneling-6to4">6to4 tunneling</link>.
    </para>
    </sect3>
   </sect2>
  </sect1>
  <sect1>
   <title>
   Network part, also known as prefix
  </title>
  <para>
   Designers defined some address types and left a lot of room for future use. <ulink url="http://rfc.net/rfc2373.html">RFC 2373 [July 1998] / IP Version 6 Addressing Architecture</ulink> defines the current addressing scheme but there is already a new draft available: <ulink url="ftp://ftp.ietf.org/internet-drafts/">draft-ietf-ipngwg-addr-arch-*.txt</ulink>.
  </para>
  <para>
   Now lets take a look at the different types of prefixes (and therefore address types):
  </para>
   <sect2>
    <title>
    Link local address type
   </title>
   <para>
    These are special addresses which will only be valid on a link of an interface. Using this address as destination the packet would never pass a router. It's used for link communication like:
   </para>
   <itemizedlist>
    <listitem>
    <para>
    anyone else here on this link?
    </para>
   </listitem>
    <listitem>
    <para>
    anyone here with a special address (e.g. looking for a router)?
    </para>
   </listitem>
   </itemizedlist>
   <para>
    They're starting with (<emphasis>&ldquo;x&rdquo;</emphasis> is any hex char, normally <emphasis>&ldquo;0</emphasis>&rdquo;)
   </para>
   <programlisting>
fe8x<emphasis>:  <- currently the only used one</emphasis>
fe9x<emphasis>:</emphasis>
feax<emphasis>:</emphasis>
febx<emphasis>:</emphasis>
   </programlisting>
   <para>
    An address with this prefix is found on each IPv6-enabled interface after stateless auto-configuration (which is normally always the case).
   </para>
   <para>
    Note: only fe80 is currently used for that.
   </para>
   </sect2>
   <sect2>
    <title>
    Site local address type
   </title>
   <para>
    These are addresses similar to the <ulink url="http://rfc.net/rfc1918.html">RFC 1918 / Address Allocation for Private Internets</ulink> in IPv4 today, with the added advantage that everyone who use this address type has the capability to use the given 16 bits for a maximum number of 65536 subnets. Comparable with the 10.0.0.0/8 in IPv4 today.
   </para>
   <para>
    Another advantage: because it's possible to assign more than one address to an interface with IPv6, you can also assign such a site local address in addition to a global one.
   </para>
   <para>
    It's starting with (<emphasis>&ldquo;x&rdquo;</emphasis> is any hex char, normally <emphasis>&ldquo;0</emphasis>&rdquo;) 
   </para>
   <programlisting>
fecx<emphasis>:  <- common used one</emphasis>
fedx<emphasis>:</emphasis>
feex<emphasis>:</emphasis>
fefx<emphasis>:</emphasis>
   </programlisting>
   </sect2>
   <sect2>
    <title>
    Global address type &quot;Aggregatable global unicast&quot;
   </title>
   <para>
    Today, there is one global address type defined (the first design, called &quot;provider based,&quot; was thrown away some years ago <ulink url="http://rfc.net/rfc1884.html">RFC 1884 / IP Version 6 Addressing Architecture [obsolete]</ulink>, you will find some remains in older Linux kernel sources).
   </para>
   <para>
    It's starting with (<emphasis>x</emphasis> are hex chars)
   </para>
   <programlisting>
2xxx: 
3xxx:
   </programlisting>
   <para>
    There are some subtypes defined by now:
   </para>
    <sect3>
     <title>
     6bone test addresses
    </title>
    <para>
     These were the first global addresses which were defined and in use. They all start with 
    </para>
    <programlisting>
3ffe:
    </programlisting>
    <para>
     Example:
    </para>
    <programlisting>
3ffe:ffff:100:f102::1
    </programlisting>
    <para>
     A special 6bone test address which will be never be globally unique is starting with 
    </para>
    <programlisting>
3ffe:ffff: 
    </programlisting>
    <para>
     and is mostly shown in examples, because if real addresses are shown, it's possible that people do a copy &amp; paste to their configuration files and can cause duplicates an globally unique address. This can cause many troubles on the original host (e.g. getting answer packets for request that were never sent).
    </para>
    </sect3>
    <sect3>
     <title>
     6to4 addresses
    </title>
    <para>
     These addresses, designed for a special tunneling possibility &lsqb;<ulink url="http://rfc.net/rfc3056.html">RFC 3056 / Connection of IPv6 Domains via IPv4 Clouds</ulink> and <ulink url="http://rfc.net/rfc2893.html">RFC 2893 / Transition Mechanisms for IPv6 Hosts and Routers</ulink>&rsqb;, encode a given IPv4 address and a possible subnet and are starting with 
    </para>
    <programlisting>
2002:
    </programlisting>
    <para>
     For example, representing 192.168.1.1/5:
    </para>
    <programlisting>
2002:c0a8:0101:5::1
    </programlisting>
    </sect3>
    <sect3>
     <title>
     Assigned by provider for hierarchical routing
    </title>
    <para>
     These addresses are delegated to Internet service providers (ISP) and start with
    </para>
    <programlisting>
2001:
    </programlisting>
    </sect3>
   </sect2>
   <sect2>
    <title>
    Multicast addresses
   </title>
   <para>
    Multicast addresses are used for related services. 
   </para>
   <para>
    They alway start with (<emphasis>xx</emphasis> is the scope value)
   </para>
   <programlisting>
ffxy:
   </programlisting>
   <para>
    They are split into scopes and types:
   </para>
    <sect3>
     <title>
     Multicast scopes
    </title>
    <para>
     Multicast scope is a parameter to specify the maximum distance a multicast packet can travel from the sending entity.
    </para>
    <para>
     Currently, the following regions (scopes) are defined:
    </para>
    <itemizedlist>
     <listitem>
     <para>
     ffx1: node-local, packets never leave the node.
     </para>
    </listitem>
     <listitem>
     <para>
     ffx2: link-local, packets are never forwarded by routers, so they never leave the specified link.
     </para>
    </listitem>
     <listitem>
     <para>
     ffx5: site-local, packets never leave the site.
     </para>
    </listitem>
     <listitem>
     <para>
     ffx8: organization-local, packets never leave the organization (not so easy to implement, must be covered by routing protocol).
     </para>
    </listitem>
     <listitem>
     <para>
     ffxe: global scope.
     </para>
    </listitem>
     <listitem>
     <para>
     others are reserved
     </para>
    </listitem>
    </itemizedlist>
    </sect3>
    <sect3>
     <title>
     Multicast types
    </title>
    <para>
     There are many types already defined/reserved (see <ulink url="http://rfc.net/rfc2373.html">RFC 2373 / IP Version 6 Addressing Architecture</ulink> for details). Some examples are:
    </para>
    <itemizedlist>
     <listitem>
     <para>
     All Nodes Address: ID = 1h, addresses all hosts on the local node (ff01:0:0:0:0:0:1) or the connected link (ff02:0:0:0:0:0:1).
     </para>
    </listitem>
     <listitem>
     <para>
     All Routers Address: ID = 2h, addresses all routers on the local node (ff01:0:0:0:0:0:2), on the connected link (ff02:0:0:0:0:0:2), or on the local site (ff05:0:0:0:0:0:2)
     </para>
    </listitem>
    </itemizedlist>
    </sect3>
    <sect3>
     <title>
     Solicited node link-local multicast address
    </title>
    <para>
     Special multicast address used as destination address in neighborhood discovery, because unlike in IPv4, there exists no ARP anymore in IPv6.
    </para>
    <para>
     An example for such address looks like
    </para>
    <programlisting>
ff02::1:ff00:1234
    </programlisting>
    <para>
     Used prefix shows that this is a link-local multicast address. The suffix is generated from the destination address. In this example, a packet should be sent to address &ldquo;fe80::1234&rdquo;, but the network stack don't know the current layer 2 MAC address. It replaces the upper 104 bits with &ldquo;ff02::1:ff00::/104&rdquo; and let the least 24 bits exist. Such address is now used on-link to find the corresponding node which has to send a reply containing its layer 2 MAC address also.
    </para>
    </sect3>
   </sect2>
   <sect2>
    <title>
    Anycast addresses
   </title>
   <para>
    Anycast addresses are special addresses and are able to cover things like nearest DNS server, nearest DHCP server, or similar dynamic groups. Addresses are taken out of the unicast address space (aggregatable global or site-local at the moment). The anycast mechanism (client view) will be handled by dynamic routing protocols.
   </para>
   <para>
    Note: Anycast addresses cannot be used as source addresses, they are only used as destination addresses.
   </para>
    <sect3>
     <title>
     Subnet-router anycast address
    </title>
    <para>
     A simple example for an anycast addresses is the subnet-router anycast address. Assuming that a node has the following global assigned IPv6 address:
    </para>
    <programlisting>
3ffe:ffff:100:f101:210:a4ff:fee3:9566/64  <- Node's address
    </programlisting>
    <para>
     The subnet-router anycast address will be created blanking the suffix (least significant 64 bits) completely:
    </para>
    <programlisting>
3ffe:ffff:100:f101::/64  <- subnet-router anycast address
    </programlisting>
    </sect3>
   </sect2>
  </sect1>
  <sect1>
   <title>
   Address types (host part)
  </title>
  <para>
   For auto-configuration and mobility issues, it was decided to use the lower 64 bits as host part of the address in most of the current address types. Therefore each single subnet can hold a big amount of addresses.
  </para>
  <para>
   This host part can be inspected differently:
  </para>
   <sect2>
    <title>
    Automatically computed (also known as stateless)
   </title>
   <para>
    With auto-configuration, the host part of the address is computed by converting the MAC address of an interface (if available) with the EUI-64 method to a unique IPv6 address. If no MAC address is available (happens e.g. on virtual devices), something else (like the IPv4 addresses or the MAC address of a physical interface) is used instead.
   </para>
   <para>
    Looking again at the first example 
   </para>
   <programlisting>
3ffe:ffff:100:f101:210:a4ff:fee3:9566
   </programlisting>
   <para>
    here, 
   </para>
   <programlisting>
210:a4ff:fee3:9566 
   </programlisting>
   <para>
    is the host part and computed from the NIC's MAC address 
   </para>
   <programlisting>
00:10:A4:E3:95:66 
   </programlisting>
   <para>
    using the <ulink url="http://standards.ieee.org/regauth/oui/tutorials/EUI64.html">IEEE-Tutorial EUI-64</ulink> design for EUI-48 identifiers.
   </para>
    <sect3>
     <title>
     Privacy problem with automatically computed and solution
    </title>
    <para>
     Because the &quot;automatically computed&quot; host part is globally unique (except when a vendor of a NIC uses the same MAC address on more than one NIC), client tracking is possible on the server in proxy-less connection.
    </para>
    <para>
     This is already known, and a solution was designed: privacy extension, defined in <ulink url="http://rfc.net/rfc3041.html">RFC 3041 / Privacy Extensions for Stateless Address Autoconfiguration in IPv6</ulink> (there is also already a newer draft available: <ulink url="ftp://ftp.ietf.org/internet-drafts/">draft-ietf-ipngwg-temp-addresses-*.txt</ulink>). Using a random and a static value a new suffix is generated from time to time. Note: this is only reasonable for outgoing client connections and isn't really useful for well-known servers.
    </para>
    </sect3>
   </sect2>
   <sect2>
    <title>
    Manually set
   </title>
   <para>
    For servers it's perhaps easier to remember simpler addresses, but that's also accounted for. It's possible to assign (additionally) another IPv6 address to an interface, e.g. 
   </para>
   <programlisting>
3ffe:ffff:100:f101::1
   </programlisting>
   <para>
    For manual suffixes like &ldquo;::1&rdquo; shown in the above example it's required that the 6th most significant bit is set to 0 (the universal/local bit of the automatically generated identifier). Also some other (otherwise unchosen) bit combinations are reserved for anycast addresses, too.
   </para>
   </sect2>
  </sect1>
  <sect1>
   <title>
   Prefix lengths for routing
  </title>
  <para>
   In the early design phase it was planned to use a fully hierarchical routing approach to reduce the size of the routing tables maximally. Reasons for such thoughts were the number of current IPv4 routing entries in core routers (&gt; 104 thousand in May 2001), reducing the need of memory in hardware routers (ASIC driven) to hold the routing table and increase speed (fewer entries hopefully result in faster lookups).
  </para>
  <para>
   Today's view is that routing will be mostly hierarchically designed for networks with only one service provider. With more than one ISP connections, this is not possible, and subject to an issue named multi-homing.
  </para>
   <sect2>
    <title>
    Prefix lengths (also known as &quot;netmasks&quot;)
   </title>
   <para>
    Similar to IPv4, the routable network path for routing to take place. Because standard netmask notation for 128 bits doesn't look nice, designers employed the IPv4 Classless Inter Domain Routing (CIDR, <ulink url="http://rfc.net/rfc1519.html">RFC 1519</ulink>) scheme, which specifies the number of bits of the IP address to be used for routing. It is also called the &quot;slash&quot; notation.
   </para>
   <para>
    An example looks like: 
   </para>
   <programlisting>
3ffe:ffff:100:1:2:3:4:5/48
   </programlisting>
   <para>
    This notation will be expanded to
   </para>
   <itemizedlist>
    <listitem>
    <para>
    Network: 
    </para>
   </listitem>
   </itemizedlist>
   <programlisting>
3ffe:ffff:0100:0000:0000:0000:0000:0000
   </programlisting>
   <itemizedlist>
    <listitem>
    <para>
    Net-mask: 
    </para>
   </listitem>
   </itemizedlist>
   <programlisting>
ffff:ffff:ffff:0000:0000:0000:0000:0000
   </programlisting>
   </sect2>
   <sect2>
    <title>
    Matching a route
   </title>
   <para>
    Under normal circumstances (no QoS) a lookup in a routing table results in the route with the most significant number of address bits means the route with the biggest prefix length matches first.
   </para>
   <para>
    For example if a routing table shows following entries (list is not complete):
   </para>
   <programlisting>
3ffe:ffff:100::/48     ::            U  1 0 0 sit1 
3ffe::/16              ::192.88.99.1 UG 1 0 0 tun6to4 
2000::/3               ::192.88.99.1 UG 1 0 0 tun6to4
   </programlisting>
   <para>
    Shown destination addresses of IPv6 packets will be routed through shown device
   </para>
   <programlisting>
3ffe:ffff:100:1:2:3:4:5/48  ->  routed through device sit1
3ffe:ffff:200:1:2:3:4:5/48  ->  routed through device tun6to4
   </programlisting>
   </sect2>
  </sect1>
 </chapter>
 <chapter id="chapter-systemcheck">
  <title>
  IPv6-ready system check
 </title>
 <para>
  Before you can start using IPv6 on a Linux host, you have to test, whether your system is IPv6-ready. Perhaps you have to do some work to enable it first.
 </para>
  <sect1>
   <title>
   IPv6-ready kernel
  </title>
  <para>
   Modern Linux distributions already contain IPv6-ready kernels, the IPv6 capability is mostly compiled as module, so it's possible that this module is not loaded on startup.
  </para>
  <para>
   See <ulink url="http://www.bieringer.de/linux/IPv6/status/IPv6+Linux-status-distributions.html">IPv6+Linux-Status-Distribution</ulink> page for most up-to-date information.
  </para>
   <sect2>
    <title>
    Check for IPv6 support in the current running kernel
   </title>
   <para>
    To check, whether current running kernel supports IPv6, take a look into your /proc-file-system. Following entry must exists: 
   </para>
   <programlisting>
/proc/net/if_inet6
   </programlisting>
   <para>
    A short auto-magically test looks like:
   </para>
   <programlisting>
# test -f /proc/net/if_inet6 && echo "Running kernel is IPv6 ready"
   </programlisting>
   <para>
    If this fails, it's possible, that the IPv6 module is not loaded.
   </para>
   </sect2>
   <sect2>
    <title>
    Try to load IPv6 module
   </title>
   <para>
    You can try to load the IPv6 module executing
   </para>
   <programlisting>
# modprobe ipv6
   </programlisting>
   <para>
    If this is successful, this module should be listed, testable with following auto-magically line:
   </para>
   <programlisting>
# lsmod |grep -w 'ipv6' && echo "IPv6 module successfully loaded"
   </programlisting>
   <para>
    And the upper shown check should be now run successfully.
   </para>
   <para>
    Note: unloading the module is currently not supported and can result under some circumstances in a kernel crash.
   </para>
    <sect3>
     <title>
     Automatically loading of module
    </title>
    <para>
     It's possible to automatically load the IPv6 module on demand. You only have to add following line in the configuration file of the kernel module loader (normally /etc/modules.conf or /etc/conf.modules):
    </para>
    <programlisting>
alias net-pf-10 ipv6  # automatically load IPv6 module on demand
    </programlisting>
    <para>
     It's also possible to disable automatically loading of the IPv6 module using following line
    </para>
    <programlisting>
alias net-pf-10 off   # disable automatically load of IPv6 module on demand
    </programlisting>
    </sect3>
   </sect2>
   <sect2>
    <title>
    Compile kernel with IPv6 capabilities
   </title>
   <para>
    If both upper shown results were negative and your kernel has no IP6 support, than you have some possibilities:
   </para>
   <itemizedlist>
    <listitem>
    <para>
    Update your distribution to a current one which supports IPv6 out-of-the-box (recommended for newbies), see here again: <ulink url="http://www.bieringer.de/linux/IPv6/status/IPv6+Linux-status-distributions.html">IPv6+Linux-Status-Distribution</ulink>
    </para>
   </listitem>
    <listitem>
    <para>
    Compile a new vanilla kernel (easy, if you know which options you needed)
    </para>
   </listitem>
    <listitem>
    <para>
    Recompile kernel sources given by your Linux distribution (sometimes not so easy)
    </para>
   </listitem>
    <listitem>
    <para>
    Compile a kernel with USAGI extensions
    </para>
   </listitem>
   </itemizedlist>
   <para>
    If you've decided to compile a kernel, you should have already experience in kernel compiling and read the <ulink url="http://www.linuxdoc.org/HOWTO/Kernel-HOWTO.html">Linux Kernel HOWTO</ulink>.
   </para>
   <para>
    A mostly up-to-time comparison between vanilla and USAGI extended kernels is available on <ulink url="http://www.bieringer.de/linux/IPv6/status/IPv6+Linux-status-kernel.html">IPv6+Linux-Status-Kernel</ulink>.
   </para>
    <sect3>
     <title>
     Compiling a vanilla kernel
    </title>
    <para>
     More detailed hints about compiling an IPv6-enabled kernel can be found e.g. on <ulink url="http://www.bieringer.de/linux/IPv6/IPv6-HOWTO/IPv6-HOWTO-2.html#kernel">IPv6-HOWTO-2#kernel</ulink>.
    </para>
    </sect3>
    <sect3>
     <title>
     Compiling a kernel with USAGI extensions
    </title>
    <para>
     Same as for vanilla kernel, only recommend for advanced users, which are already familiar with IPv6 and kernel compilation. See also <ulink url="http://www.linux-ipv6.org/faq.html">USAGI project / FAQ</ulink>.
    </para>
    </sect3>
   </sect2>
   <sect2>
    <title>
    IPv6-ready network devices
   </title>
   <para>
    Not all existing network devices have already (or ever) the capability to transport IPv6 packets. A current status can be found at <ulink url="http://www.bieringer.de/linux/IPv6/status/IPv6+Linux-status-kernel.html#transport">IPv6+Linux-status-kernel.html#transport</ulink>.
   </para>
   <para>
    Major issue is that because of the network layer structure of kernel implementation an IPv6 packet isn't really recognized by it's IP header number (6 instead of 4). It's recognized by the protocol number of the Layer 2 transport protocol. Therefore any transport protocol which doesn't use such protocol number hasn't now the capability to dispatch the IPv6 packet. Attention: the packet is still transported over the link, but on receivers side, the dispatching won't work (you can see this e.g. using tcpdump).
   </para>
    <sect3>
     <title>
     Currently known &ldquo;never IPv6 capable links&rdquo;
    </title>
    <itemizedlist>
     <listitem>
     <para>
     Serial Line IP (SLIP, <ulink url="http://rfc.net/rfc1055.html">RFC 1055</ulink>), should be better called now to SLIPv4, device named: slX
     </para>
    </listitem>
     <listitem>
     <para>
     Parallel Line IP (PLIP), same like SLIP, device names: plipX
     </para>
    </listitem>
     <listitem>
     <para>
     ISDN with encapsulation <emphasis>rawip</emphasis>, device names: isdnX
     </para>
    </listitem>
    </itemizedlist>
    </sect3>
    <sect3>
     <title>
     Currently known &ldquo;not supported IPv6 capable links&rdquo;
    </title>
    <itemizedlist>
     <listitem>
     <para>
     ISDN with encapsulation <emphasis>syncppp</emphasis>, device names: ipppX (design issue of the ipppd, will be merged into more general PPP layer in kernel series 2.5.x)
     </para>
    </listitem>
    </itemizedlist>
    </sect3>
   </sect2>
  </sect1>
  <sect1>
   <title>
   IPv6-ready network configuration tools
  </title>
  <para>
   You don't get a lot success, if you're running an IPv6-ready kernel, but have no tools to configure IPv6. There are exist some in several packages to configure IPv6.
  </para>
   <sect2>
    <title>
    net-tools package
   </title>
   <para>
    The net-tool packages include some tools like ifconfig and route, which helps you configure IPv6 on an interface. Look at the output of ifconfig -? or route -?, if something is shown like IPv6 or inet6, then the tool is IPv6-ready.
   </para>
   <para>
    Auto-magically check:
   </para>
   <programlisting>
# /sbin/ifconfig -? 2>& 1|grep -qw 'inet6' && echo "utility 'ifconfig' is IPv6-ready"
   </programlisting>
   <para>
    Same check can be done for route:
   </para>
   <programlisting>
# /sbin/route -? 2>& 1|grep -qw 'inet6' && echo "utility 'route' is IPv6-ready"
   </programlisting>
   </sect2>
   <sect2>
    <title>
    iproute package
   </title>
   <para>
    Alexey N. Kuznetsov (current a maintainer of the Linux networking code) created a tool-set which configure networks through the netlink device. Using this tool-set you are able to do more than using net-tools, but the documentation is not very well for newbies.
   </para>
   <programlisting>
# /sbin/ip 2>&1 |grep -qw 'inet6' && echo "utility 'ip' is IPv6-ready"
   </programlisting>
   <para>
    If the program /sbin/ip isn't found, then I very recommend to install the iproute package. 
   </para>
   <itemizedlist>
    <listitem>
    <para>
    You can get it from your Linux distribution (if contained)
    </para>
   </listitem>
    <listitem>
    <para>
    You can download the tar-ball and recompile it: <ulink url="ftp://ftp.inr.ac.ru/ip-routing/">Original FTP source</ulink> and mirror (missing)
    </para>
   </listitem>
    <listitem>
    <para>
    You've able to look for a proper RPM package at <ulink url="http://rpmfind.net/linux/rpm2html/search.php?query=iproute">RPMfind/iproute</ulink> (sometimes rebuilding of a SRPMS package is recommended)
    </para>
   </listitem>
   </itemizedlist>
   </sect2>
  </sect1>
  <sect1>
   <title>
   IPv6-ready test/debug programs
  </title>
  <para>
   After you've prepared your system for IPv6, you sure want to use IPv6 now for network communications. First you should learn to look with a sniffer program for IPv6 packets. This is very recommended because in debug/troubleshooting issues this can help you very fast.
  </para>
   <sect2>
    <title>
    IPv6 ping
   </title>
   <para>
    This program is mostly included in package <emphasis>iputils</emphasis>. It's designed for simple transport tests sending ICMPv6 echo-request packets and wait for ICMPv6 echo-reply packets.
   </para>
   <para>
    Usage
   </para>
   <programlisting>
# ping6 &lt;hostwithipv6address>
# ping6 &lt;ipv6address>
# ping6 [-I &lt;device>] &lt;link-local-ipv6address>
   </programlisting>
   <para>
    Example
   </para>
   <programlisting>
# ping6 -c 1 ::1 
PING ::1(::1) from ::1 : 56 data bytes 
64 bytes from ::1: icmp_seq=0 hops=64 time=292 usec

--- ::1 ping statistics --- 
1 packets transmitted, 1 packets received, 0% packet loss 
round-trip min/avg/max/mdev = 0.292/0.292/0.292/0.000 ms
   </programlisting>
   <para>
    Hint: ping6 needs raw access to socket and therefore root permissions. So if non-root users cannot use ping6 then there exist 2 issues:
   </para>
   <orderedlist>
    <listitem>
    <para>
    ping6 is not in user's path (probably, because ping6 stays mostly in /usr/sbin -&gt; add path (not really recommended)
    </para>
   </listitem>
    <listitem>
    <para>
    ping6 don't run well, because of missing root permissions -&gt; chmod u+s /usr/sbin/ping6
    </para>
   </listitem>
   </orderedlist>
    <sect3>
     <title>
     Specifying interface for IPv6 ping
    </title>
    <para>
     Using link-local addresses for an IPv6 ping kernel doesn't know through which (physically or virtual) device it must send the packet - each device has a link-local address. A try will result in following error message:
    </para>
    <programlisting>
# ping6 fe80::212:34ff:fe12:3456 
connect: Invalid argument
    </programlisting>
    <para>
     In this case you have to specify the interface additionally like shown here:
    </para>
    <programlisting>
# ping6 -I eth0 -c 1 fe80::2e0:18ff:fe90:9205 
PING fe80::212:23ff:fe12:3456(fe80::212:23ff:fe12:3456) from fe80::212:34ff:fe12:3478 eth0: 56 data bytes 
64 bytes from fe80::212:23ff:fe12:3456: icmp_seq=0 hops=64 time=445 usec

--- fe80::2e0:18ff:fe90:9205 ping statistics --- 
1 packets transmitted, 1 packets received, 0% packet loss round-trip min/avg/max/mdev = 0.445/0.445/0.445/0.000 ms
    </programlisting>
    </sect3>
   </sect2>
   <sect2>
    <title>
    IPv6 traceroute6
   </title>
   <para>
    This program is mostly included in package <emphasis>iputils</emphasis>. Its a program similar to IPv4 traceroute. But unlike modern IPv4 versions, the IPv6 one doesn't still understand to traceroute using ICMP echo-request packets (which is more accepted by firewalls around than UDP packets to high ports). Below you will see an example:
   </para>
   <programlisting>
# traceroute6 www.6bone.net 
traceroute to 6bone.net (3ffe:b00:c18:1::10) from 3ffe:ffff:0000:f101::2, 30 hops max, 16 byte packets 
 1 localipv6gateway (3ffe:ffff:0000:f101::1) 1.354 ms 1.566 ms 0.407 ms 
 2 swi6T1-T0.ipv6.switch.ch (3ffe:2000:0:400::1) 90.431 ms 91.956 ms 92.377 ms 
 3 3ffe:2000:0:1::132 (3ffe:2000:0:1::132) 118.945 ms 107.982 ms 114.557 ms 
 4 3ffe:c00:8023:2b::2 (3ffe:c00:8023:2b::2) 968.468 ms 993.392 ms 973.441 ms 
 5 3ffe:2e00:e:c::3 (3ffe:2e00:e:c::3) 507.784 ms 505.549 ms 508.928 ms 
 6 www.6bone.net (3ffe:b00:c18:1::10) 1265.85 ms * 1304.74 ms
   </programlisting>
   </sect2>
   <sect2>
    <title>
    IPv6 tracepath6
   </title>
   <para>
    This program is mostly included in package <emphasis>iputils</emphasis>. Its a program like traceroute6 and traces the path to a given destination discovering the MTU along this path. Below you will see an example:
   </para>
   <programlisting>
# tracepath6 www.6bone.net 
 1?: [LOCALHOST] pmtu 1480 
 1: 3ffe:401::2c0:33ff:fe02:14 150.705ms 
 2: 3ffe:b00:c18::5 267.864ms 
 3: 3ffe:b00:c18::5 asymm 2 266.145ms pmtu 1280 
 3: 3ffe:3900:5::2 asymm 4 346.632ms 
 4: 3ffe:28ff:ffff:4::3 asymm 5 365.965ms 
 5: 3ffe:1cff:0:ee::2 asymm 4 534.704ms 
 6: 3ffe:3800::1:1 asymm 4 578.126ms !N 
Resume: pmtu 1280
   </programlisting>
   </sect2>
   <sect2>
    <title>
    IPv6 tcpdump
   </title>
   <para>
    On Linux tcpdump is the major tool for packet capturing. Below you find some examples. IPv6 support is normally built-in in current releases of version 3.6.
   </para>
   <para>
    tcpdump uses expressions for filtering packets to minimize the noise:
   </para>
   <itemizedlist>
    <listitem>
    <para>
    icmp6: filters native ICMPv6 traffic
    </para>
   </listitem>
    <listitem>
    <para>
    ip6: filters native IPv6 traffic (including ICMPv6)
    </para>
   </listitem>
    <listitem>
    <para>
    proto ipv6: filters tunneled IPv6-in-IPv4 traffic
    </para>
   </listitem>
    <listitem>
    <para>
    not port ssh: to suppress displaying SSH packets for running tcpdump in a remote SSH session
    </para>
   </listitem>
   </itemizedlist>
   <para>
    Also some command line options are very useful to catch and print more information of a packet, mostly interesting for digging into ICMPv6 packets:
   </para>
   <itemizedlist>
    <listitem>
    <para>
    &ldquo;-s 512&rdquo;: increase the snap length during capturing of a packet to 512 bytes
    </para>
   </listitem>
    <listitem>
    <para>
    &ldquo;-vv&rdquo;: really verbose output
    </para>
   </listitem>
    <listitem>
    <para>
    &ldquo;-n&rdquo;: don't resolve addresses to names, useful if reverse DNS resolving isn't working proper
    </para>
   </listitem>
   </itemizedlist>
    <sect3>
     <title>
     IPv6 ping to 3ffe:ffff:100:f101::1 native over a local link
    </title>
    <programlisting>
# tcpdump -t -n -i eth0 -s 512 -vv ip6 or proto ipv6 
tcpdump: listening on eth0 
3ffe:ffff:100:f101:2e0:18ff:fe90:9205 > 3ffe:ffff:100:f101::1: icmp6: echo request (len 64, hlim 64) 
3ffe:ffff:100:f101::1 > 3ffe:ffff:100:f101:2e0:18ff:fe90:9205: icmp6: echo reply (len 64, hlim 64)
    </programlisting>
    </sect3>
    <sect3>
     <title>
     IPv6 ping to 3ffe:ffff:100::1 routed through an IPv6-in-IPv4-tunnel
    </title>
    <para>
     1.2.3.4 and 5.6.7.8 are tunnel endpoints (all addresses are examples)
    </para>
    <programlisting>
# tcpdump -t -n -i ppp0 -s 512 -vv ip6 or proto ipv6 
tcpdump: listening on ppp0 
1.2.3.4 > 5.6.7.8: 2002:ffff:f5f8::1 > 3ffe:ffff:100::1: icmp6: echo request (len 64, hlim 64) (DF) (ttl 64, id 0, len 124) 
5.6.7.8 > 1.2.3.4: 3ffe:ffff:100::1 > 2002:ffff:f5f8::1: icmp6: echo reply (len 64, hlim 61) (ttl 23, id 29887, len 124) 
1.2.3.4 > 5.6.7.8: 2002:ffff:f5f8::1 > 3ffe:ffff:100::1: icmp6: echo request (len 64, hlim 64) (DF) (ttl 64, id 0, len 124) 
5.6.7.8 > 1.2.3.4: 3ffe:ffff:100::1 > 2002:ffff:f5f8::1: icmp6: echo reply (len 64, hlim 61) (ttl 23, id 29919, len 124)
    </programlisting>
    </sect3>
   </sect2>
  </sect1>
  <sect1>
   <title>
   IPv6-ready programs
  </title>
  <para>
   Current distributions already contain most needed IPv6 enabled client and servers. See first on <ulink url="http://www.bieringer.de/linux/IPv6/status/IPv6+Linux-status-distributions.html">IPv6+Linux-Status-Distribution</ulink>. If still not included, you can check <ulink url="http://www.bieringer.de/linux/IPv6/status/IPv6+Linux-status-apps.html">IPv6 & Linux - Current Status - Applications</ulink> whether the program is already ported to IPv6 and usable with Linux. For common used programs there are some hints available at <ulink url="http://www.bieringer.de/linux/IPv6/IPv6-HOWTO/IPv6-HOWTO-3.html">IPv6 & Linux - HowTo - Part 3</ulink> and <ulink url="http://www.bieringer.de/linux/IPv6/IPv6-HOWTO/IPv6-HOWTO-4.html">IPv6 & Linux - HowTo - Part 4</ulink>.
  </para>
  </sect1>
  <sect1>
   <title>
   IPv6-ready client programs (selection)
  </title>
  <para>
   To run the following shown tests require that your system is IPv6 enabled and some examples show addresses which only can be reached if a successful connection to the 6bone is available.
  </para>
   <sect2>
    <title>
    Checking DNS for resolving IPv6 addresses
   </title>
   <para>
    Because of security updates in the last years every Domain Name System (DNS) server should run newer software which already understands the (intermediate) IPv6 address-type AAAA (the newer one named A6 isn't still common at the moment because only supported using BIND9 and newer and also the non-existent support of root domain IP6.ARPA). A simple whether the used system can resolve IPv6 addresses is
   </para>
   <programlisting>
# host -t AAAA www.join.uni-muenster.de
   </programlisting>
   <para>
    and should show something like following:
   </para>
   <programlisting>
www.join.uni-muenster.de. is an alias for ns.join.uni-muenster.de. 
ns.join.uni-muenster.de. has AAAA address 3ffe:400:10:100:201:2ff:feb5:3806
   </programlisting>
   </sect2>
   <sect2>
    <title>
    IPv6-ready telnet clients
   </title>
   <para>
    IPv6-ready telnet clients are available. A simple test can be done with
   </para>
   <programlisting>
$ telnet 3ffe:400:100::1 80
Trying 3ffe:400:100::1... 
Connected to 3ffe:400:100::1. 
Escape character is '^]'. 
HEAD / HTTP/1.0

HTTP/1.1 200 OK 
Date: Sun, 16 Dec 2001 16:07:21 
GMT Server: Apache/2.0.28 (Unix) 
Last-Modified: Wed, 01 Aug 2001 21:34:42 GMT 
ETag: "3f02-a4d-b1b3e080" 
Accept-Ranges: bytes 
Content-Length: 2637 
Connection: close 
Content-Type: text/html; charset=ISO-8859-1

Connection closed by foreign host.
   </programlisting>
   <para>
    If the telnet client don't understand the IPv6 address and says something like &ldquo;cannot resolve hostname&rdquo;, then it's not IPv6-enabled.
   </para>
   </sect2>
   <sect2>
    <title>
    IPv6-ready ssh clients
   </title>
    <sect3>
     <title>
     openssh
    </title>
    <para>
     Current versions of openssh are IPv6-ready. Depending on configuring before compiling it has two behavior.
    </para>
    <itemizedlist>
     <listitem>
     <para>
     --without-ipv4-default: the client tries an IPv6 connect first automatically and fall back to IPv4 if not working
     </para>
    </listitem>
     <listitem>
     <para>
     --with-ipv4-default: default connection is IPv4, IPv6 connection must be force like following example shows
     </para>
    </listitem>
    </itemizedlist>
    <programlisting>
$ ssh -6 ::1 
user@::1's password: ****** 
[user@ipv6host user]$
    </programlisting>
    <para>
     If your ssh client don't understand the option &ldquo;-6&rdquo; then it's not IPv6-enabled, like most ssh version 1 packages.
    </para>
    </sect3>
    <sect3>
     <title>
     ssh.com
    </title>
    <para>
     SSH.com's SSH client and server is also IPv6 aware now and is free for all Linux and FreeBSD machine regardless if used for personal or commercial use.
    </para>
    </sect3>
   </sect2>
   <sect2>
    <title>
    IPv6-ready web browsers
   </title>
   <para>
    A current status of IPv6 enabled web browsers is available at <ulink url="http://www.bieringer.de/linux/IPv6/status/IPv6+Linux-status-apps.html#HTTP">IPv6+Linux-status-apps.html#HTTP</ulink>.
   </para>
   <para>
    Most of them have unresolved problems at the moment
   </para>
   <orderedlist>
    <listitem>
    <para>
    If using an IPv4 only proxy in the settings, IPv6 requests will be send to the proxy, too. But proxy don't understand the request and fails. Solution: update proxy software (see later).
    </para>
   </listitem>
    <listitem>
    <para>
    Automatic proxy settings (*.pac) cannot be extended to handle IPv6 requests differently (e.g. don't use proxy) because of their nature (written in Java-script and well hard coded in source like to be seen in Maxilla source code).
    </para>
   </listitem>
   </orderedlist>
   <para>
    Also older versions don't understand an URL with IPv6 encoded addresses like <ulink url="http://[3ffe:400:100::1]/">http://[3ffe:400:100::1]/</ulink> (this given URL only works with an IPv6-enabled browser!).
   </para>
   <para>
    A short test is to try shown URL with a given browser and using no proxy.
   </para>
    <sect3>
     <title>
     URLs for testing
    </title>
    <para>
     A good starting point for browsing using IPv6 is <ulink url="http://www.kame.net/">http://www.kame.net/</ulink>. If the turtle on this page is animated, the connection is via IPv6, otherwise the turtle is static.
    </para>
    </sect3>
   </sect2>
  </sect1>
  <sect1>
   <title>
   IPv6-ready server programs
  </title>
  <para>
   In this part of this HOWTO, more client specific issues are mentioned. Therefore hints for IPv6-ready servers like sshd, httpd, telnetd, etc. are shown below in <link linkend="chapter-hints-daemons">Hints for IPv6-enabled daemons</link>.
  </para>
  </sect1>
 </chapter>
 <chapter id="chapter-configuration-interface">
  <title>
  Configuring interfaces
 </title>
  <sect1>
   <title>
   Different network devices
  </title>
  <para>
   On a node, there exist different network devices. They can be collected in classes
  </para>
  <itemizedlist>
   <listitem>
   <para>
   Physically bounded, like eth0, tr0
   </para>
  </listitem>
   <listitem>
   <para>
   Virtually existing, like ppp0, tun0, tap0, sit0, isdn0, ippp0
   </para>
  </listitem>
  </itemizedlist>
   <sect2>
    <title>
    Physically bounded
   </title>
   <para>
    Physically bounded interfaces like Ethernet or Token-Ring are normal ones and need no special treatment.
   </para>
   </sect2>
   <sect2>
    <title>
    Virtually bounded
   </title>
   <para>
    Virtually bounded interfaces always need special support
   </para>
    <sect3>
     <title>
     IPv6-in-IPv4 tunnel interfaces
    </title>
    <para>
     This interfaces are normally named sit<emphasis>x</emphasis>. The name <emphasis>sit</emphasis> is a shortcut for Simple Internet Transition. This device has the capability to encapsulate IPv6 packets into IPv4 ones and tunnel them to a foreign endpoint.
    </para>
    <para>
     sit0 has a special meaning and cannot be used for dedicated tunnels.
    </para>
    </sect3>
    <sect3>
     <title>
     PPP interfaces
    </title>
    <para>
     PPP interfaces get their IPv6 capability from an IPv6 enabled PPP daemon.
    </para>
    </sect3>
    <sect3>
     <title>
     ISDN HDLC interfaces
    </title>
    <para>
     IPv6 capability for HDLC with encapsulation ip is already built-in in the kernel
    </para>
    </sect3>
    <sect3>
     <title>
     ISDN PPP interfaces 
    </title>
    <para>
     ISDN PPP interfaces (ippp) aren't IPv6 enabled by kernel. Also there are also no plans to do that because in kernel 2.5.+ they will be replaced by a more generic ppp interface layer.
    </para>
    </sect3>
    <sect3>
     <title>
     SLIP + PLIP
    </title>
    <para>
     Like mentioned earlier, this interfaces don't support IPv6 transport (sending is OK, but dispatching on receiving don't work).
    </para>
    </sect3>
    <sect3>
     <title>
     Ether-tap device
    </title>
    <para>
     Ether-tap devices are IPv6-enabled and also stateless configured. For use, the module &ldquo;ethertap&rdquo; has to be loaded before.
    </para>
    </sect3>
    <sect3>
     <title>
     tun devices
    </title>
    <para>
     Currently not tested by me.
    </para>
    </sect3>
    <sect3>
     <title>
     ATM
    </title>
    <para>
     01/2002: Aren't currently supported by vanilla kernel, supported by USAGI extension
    </para>
    </sect3>
    <sect3>
     <title>
     Others
    </title>
    <para>
     Did I forget an interface?...
    </para>
    </sect3>
   </sect2>
  </sect1>
  <sect1>
   <title>
   Bringing interfaces up/down
  </title>
  <para>
   Two methods can be used to bring interfaces up or down.
  </para>
   <sect2>
    <title>
    Using &quot;ip&quot;
   </title>
   <para>
    Usage: 
   </para>
   <programlisting>
# ip link set dev &lt;interface> up
# ip link set dev &lt;interface> down
   </programlisting>
   <para>
    Example:
   </para>
   <programlisting>

# ip link set dev eth0 up
# ip link set dev eth0 down
   </programlisting>
   </sect2>
   <sect2>
    <title>
    Using &quot;ifconfig&quot;
   </title>
   <para>
    Usage: 
   </para>
   <programlisting>
# /sbin/ifconfig &lt;interface> up
# /sbin/ifconfig &lt;interface> down
   </programlisting>
   <para>
    Example:
   </para>
   <programlisting>
# /sbin/ifconfig eth0 up
# /sbin/ifconfig eth0 down
   </programlisting>
   </sect2>
  </sect1>
 </chapter>
 <chapter id="chapter-configuration-address">
  <title>
  Configuring IPv6 addresses
 </title>
 <para>
  There are different ways to configure an IPv6 address on an interface. You can use use &quot;ifconfig&quot; or &quot;ip&quot;.
 </para>
  <sect1>
   <title>
   Displaying existing IPv6 addresses
  </title>
  <para>
   First you should check, whether and which IPv6 addresses are already configured (perhaps auto-magically during stateless auto-configuration).
  </para>
   <sect2>
    <title>
    Using &quot;ip&quot;
   </title>
   <para>
    Usage:
   </para>
   <programlisting>
# /sbin/ip -6 addr show dev &lt;interface>
   </programlisting>
   <para>
    Example for a static configured host:
   </para>
   <programlisting>
# /sbin/ip -6 addr show dev eth0
2: eth0: &lt;BROADCAST,MULTICAST,UP&gt; mtu 1500 qdisc pfifo_ fast qlen 100
inet6 fe80::210:a4ff:fee3:9566/10 scope link
inet6 3ffe:ffff:0:f101::1/64 scope global
inet6 fec0:0:0:f101::1/64 scope site 
   </programlisting>
   <para>
    Example for a host which is auto-configured
   </para>
   <para>
    Here you see some auto-magically configured IPv6 addresses and their lifetime.
   </para>
   <programlisting>
# /sbin/ip -6 addr show dev eth0 
3: eth0: &lt;BROADCAST,MULTICAST,PROMISC,UP&gt; mtu 1500 qdisc pfifo_fast qlen 100 
inet6 2002:d950:f5f8:f101:2e0:18ff:fe90:9205/64 scope global dynamic 
valid_lft 16sec preferred_lft 6sec 
inet6 3ffe:400:100:f101:2e0:18ff:fe90:9205/64 scope global dynamic 
valid_lft 2591997sec preferred_lft 604797sec inet6 fe80::2e0:18ff:fe90:9205/10 scope link
   </programlisting>
   </sect2>
   <sect2>
    <title>
    Using &quot;ifconfig&quot;
   </title>
   <para>
    Usage:
   </para>
   <programlisting>
# /sbin/ifconfig &lt;interface>
   </programlisting>
   <para>
    Example (output filtered with grep to display only IPv6 addresses). Here you see different IPv6 addresses with different scopes.
   </para>
   <programlisting>
# /sbin/ifconfig eth0 |grep "inet6 addr:"
inet6 addr: fe80::210:a4ff:fee3:9566/10 Scope:Link
inet6 addr: 3ffe:ffff:0:f101::1/64 Scope:Global
inet6 addr: fec0:0:0:f101::1/64 Scope:Site
   </programlisting>
   </sect2>
  </sect1>
  <sect1>
   <title>
   Add an IPv6 address
  </title>
  <para>
   Adding an IPv6 address is similar to the mechanism of &quot;IP ALIAS&quot; addresses in Linux IPv4 addressed interfaces.
  </para>
   <sect2>
    <title>
    Using &quot;ip&quot;
   </title>
   <para>
    Usage: 
   </para>
   <programlisting>
# /sbin/ip -6 addr add &lt;ipv6address>/&lt;prefixlength> dev &lt;interface> 
   </programlisting>
   <para>
    Example:
   </para>
   <programlisting>
# /sbin/ip -6 addr add 3ffe:ffff:0:f101::1/64 dev eth0 
   </programlisting>
   </sect2>
   <sect2>
    <title>
    Using &quot;ifconfig&quot;
   </title>
   <para>
    Usage: 
   </para>
   <programlisting>
# /sbin/ifconfig &lt;interface> inet6 add &lt;ipv6address>/&lt;prefixlength>
   </programlisting>
   <para>
    Example:
   </para>
   <programlisting>
# /sbin/ifconfig eth0 inet6 add 3ffe:ffff:0:f101::1/64 
   </programlisting>
   </sect2>
  </sect1>
  <sect1>
   <title>
   Removing an IPv6 address
  </title>
  <para>
   Not so often needed, be carefully with removing non existent IPv6 address, sometimes using older kernels it results in a crash.
  </para>
   <sect2>
    <title>
    Using &quot;ip&quot;
   </title>
   <para>
    Usage: 
   </para>
   <programlisting>
# /sbin/ip -6 addr del &lt;ipv6address>/&lt;prefixlength> dev &lt;interface> 
   </programlisting>
   <para>
    Example:
   </para>
   <programlisting>
# /sbin/ip -6 addr del 3ffe:ffff:0:f101::1/64 dev eth0 
   </programlisting>
   </sect2>
   <sect2>
    <title>
    Using &quot;ifconfig&quot;
   </title>
   <para>
    Usage:
   </para>
   <programlisting>
# /sbin/ifconfig &lt;interface> inet6 del &lt;ipv6address>/&lt;prefixlength>
   </programlisting>
   <para>
    Example:
   </para>
   <programlisting>
# /sbin/ifconfig eth0 inet6 del 3ffe:ffff:0:f101::1/64
   </programlisting>
   </sect2>
  </sect1>
 </chapter>
 <chapter id="chapter-configuration-route">
  <title>
  Configuring normal IPv6 routes
 </title>
 <para>
  If you want to leave your link and want to send packets in the world wide IPv6-Internet, you need routing. If there is already an IPv6 enabled router on your link, it's possible enough to add IPv6 routes.
 </para>
 <para>
  Also here there are different ways to configure an IPv6 address on an interface. You can use use &quot;ifconfig&quot; or &quot;ip&quot;
 </para>
  <sect1>
   <title>
   Displaying existing IPv6 routes
  </title>
  <para>
   First you should check, whether and which IPv6 addresses are already configured (perhaps auto-magically during auto-configuration).
  </para>
   <sect2>
    <title>
    Using &quot;ip&quot;
   </title>
   <para>
    Usage:
   </para>
   <programlisting>
# /sbin/ip -6 route show [dev &lt;device>]
   </programlisting>
   <para>
    Example:
   </para>
   <programlisting>
# /sbin/ip -6 route show dev eth0
3ffe:ffff:0:f101::/64 proto kernel metric 256 mtu 1500 advmss 1440
fe80::/10             proto kernel metric 256 mtu 1500 advmss 1440
ff00::/8              proto kernel metric 256 mtu 1500 advmss 1440
default               proto kernel metric 256 mtu 1500 advmss 1440
   </programlisting>
   </sect2>
   <sect2>
    <title>
    Using &quot;route&quot;
   </title>
   <para>
    Usage: 
   </para>
   <programlisting>
# /sbin/route -A inet6 
   </programlisting>
   <para>
    Example (output is filtered for interface eth0). Here you see different IPv6 routes for different addresses on a single interface.
   </para>
   <programlisting>
# /sbin/route -A inet6 |grep "\Weth0\W"
3ffe:ffff:0:f101   ::/64 :: UA  256 0 0 eth0<emphasis> <- Interface route for global address</emphasis>
fe80::/10          ::       UA  256 0 0 eth0<emphasis> <- Interface route for link-local address</emphasis>
ff00::/8           ::       UA  256 0 0 eth0<emphasis> <- Interface route for all multicast addresses</emphasis>
::/0               ::       UDA 256 0 0 eth0<emphasis> <- Automatic default route</emphasis>
   </programlisting>
   </sect2>
  </sect1>
  <sect1>
   <title>
   Add an IPv6 route through a gateway
  </title>
  <para>
   Mostly needed to reach the outside with IPv6 using an IPv6-enabled router on your link.
  </para>
   <sect2>
    <title>
    Using &quot;ip&quot;
   </title>
   <para>
    Usage:
   </para>
   <programlisting>
# /sbin/ip -6 route add &lt;ipv6network>/&lt;prefixlength> via &lt;ipv6address> [dev &lt;device>]
   </programlisting>
   <para>
    Example:
   </para>
   <programlisting>
# /sbin/ip -6 route add 2000::/3 via 3ffe:ffff:0:f101::1
   </programlisting>
   </sect2>
   <sect2>
    <title>
    Using &quot;route&quot;
   </title>
   <para>
    Usage: 
   </para>
   <programlisting>
# /sbin/route -A inet6 add &lt;ipv6network>/&lt;prefixlength> gw &lt;ipv6address> [dev &lt;device>] 
   </programlisting>
   <para>
    A device can be needed, too, if the IPv6 address of the gateway is a link local one.
   </para>
   <para>
    Following shown example adds a route for all currently global addresses (2000::/3) through gateway 3ffe:ffff:0:f101::1
   </para>
   <programlisting>
# /sbin/route -A inet6 add 2000::/3 gw 3ffe:ffff:0:f101::1
   </programlisting>
   </sect2>
  </sect1>
  <sect1>
   <title>
   Removing an IPv6 route through a gateway
  </title>
  <para>
   Not so often needed manually, mostly done by network configure scripts on shutdown (full or per interface)
  </para>
   <sect2>
    <title>
    Using &quot;ip&quot;
   </title>
   <para>
    Usage:
   </para>
   <programlisting>
# /sbin/ip -6 route del &lt;ipv6network>/&lt;prefixlength> via &lt;ipv6address> [dev &lt;device>]
   </programlisting>
   <para>
    Example:
   </para>
   <programlisting>
# /sbin/ip -6 route del 2000::/3 via 3ffe:ffff:0:f101::1
   </programlisting>
   </sect2>
   <sect2>
    <title>
    Using &quot;route&quot;
   </title>
   <para>
    Usage: 
   </para>
   <programlisting>
# /sbin/route -A inet6 del &lt;network>/&lt;prefixlength> [dev &lt;device>]
   </programlisting>
   <para>
    Example for removing upper added route again:
   </para>
   <programlisting>
# /sbin/route -A inet6 del 2000::/3 gw 3ffe:ffff:0:f101::1
   </programlisting>
   </sect2>
  </sect1>
  <sect1>
   <title>
   Add an IPv6 route through an interface
  </title>
  <para>
   Not often needed, sometimes in cases of dedicated point-to-point links.
  </para>
   <sect2>
    <title>
    Using &quot;ip&quot;
   </title>
   <para>
    Usage:
   </para>
   <programlisting>
# /sbin/ip -6 route add &lt;ipv6network>/&lt;prefixlength> dev &lt;device> metric 1
   </programlisting>
   <para>
    Example:
   </para>
   <programlisting>
# /sbin/ip -6 route add 2000::/3 dev eth0 metric 1
   </programlisting>
   <para>
    Metric &ldquo;1&rdquo; is used here to be compatible with the metric used by route, because the default metric on using &ldquo;ip&rdquo; is &ldquo;1024&rdquo;.
   </para>
   </sect2>
   <sect2>
    <title>
    Using &quot;route&quot;
   </title>
   <para>
    Usage:
   </para>
   <programlisting>
# /sbin/route -A inet6 add &lt;network>/&lt;prefixlength> dev &lt;device>
   </programlisting>
   <para>
    Example:
   </para>
   <programlisting>
# /sbin/route -A inet6 add 2000::/3 dev eth0 
   </programlisting>
   </sect2>
  </sect1>
  <sect1>
   <title>
   Removing an IPv6 route through an interface
  </title>
  <para>
   Not so often needed to use by hand, configuration scripts will use such on shutdown.
  </para>
   <sect2>
    <title>
    Using &quot;ip&quot;
   </title>
   <para>
    Usage:
   </para>
   <programlisting>
# /sbin/ip -6 route del &lt;ipv6network>/&lt;prefixlength> dev &lt;device>
   </programlisting>
   <para>
    Example:
   </para>
   <programlisting>
# /sbin/ip -6 route del 2000::/3 dev eth0 
   </programlisting>
   </sect2>
   <sect2>
    <title>
    Using &quot;route&quot;
   </title>
   <para>
    Usage:
   </para>
   <programlisting>
# /sbin/route -A inet6 del &lt;network>/&lt;prefixlength> dev &lt;device>
   </programlisting>
   <para>
    Example:
   </para>
   <programlisting>
# /sbin/route -A inet6 del 2000::/3 dev eth0
   </programlisting>
   </sect2>
  </sect1>
 </chapter>
 <chapter id="chapter-configuring-ipv6-in-ipv4-tunnels">
  <title>
  Configuring IPv6-in-IPv4 tunnels
 </title>
 <para>
  If you want to leave your link you have no IPv6 capable network around you, you need IPv6-in-IPv4 tunneling to reach the World Wide IPv6-Internet.
 </para>
 <para>
  There are some kind of tunnel mechanism and also some possibilities to setup tunnels.
 </para>
  <sect1>
   <title>
   Types of tunnels
  </title>
  <para>
   There are more than one possibility to tunnel IPv6 packets over IPv4-only links.
  </para>
   <sect2>
    <title>
    Static point-to-point tunneling: 6bone
   </title>
   <para>
    A point-to-point tunnel is a dedicated tunnel to an endpoint, which knows about your IPv6 network (for backward routing) and the IPv4 address of your tunnel endpoint and defined in <ulink url="http://rfc.net/rfc2893.html">RFC 2893 / Transition Mechanisms for IPv6 Hosts and Routers</ulink>. Requirements:
   </para>
   <itemizedlist>
    <listitem>
    <para>
    IPv4 address of your local tunnel endpoint must be static, global unique and reachable from the foreign tunnel endpoint
    </para>
   </listitem>
    <listitem>
    <para>
    A global IPv6 prefix assigned to you (see 6bone registry)
    </para>
   </listitem>
    <listitem>
    <para>
    A foreign tunnel endpoint which is capable to route your IPv6 prefix to your local tunnel endpoint (mostly remote manual configuration required)
    </para>
   </listitem>
   </itemizedlist>
   </sect2>
   <sect2>
    <title>
    Automatically tunneling
   </title>
   <para>
    Automatic tunneling occurs, when a node directly connects another node gotten the IPv4 address of the other node before.
   </para>
   </sect2>
   <sect2 id="tunneling-6to4">
    <title>
    6to4-Tunneling
   </title>
   <para>
    6to4 tunneling (<ulink url="http://rfc.net/rfc3056.html">RFC 3056 / Connection of IPv6 Domains via IPv4 Clouds</ulink>) uses a simple mechanism to create automatic tunnels. Each node with a global unique IPv4 address is able to be a 6to4 tunnel endpoint (if no IPv4 firewall prohibits traffic). 6to4 tunneling is mostly not a one-to-one tunnel. This case of tunneling can be divided into upstream and downstream tunneling. Also, a special IPv6 address indicates that this node will use 6to4 tunneling for connecting the world-wide IPv6 network
   </para>
    <sect3>
     <title>
     Generation of 6to4 prefix
    </title>
    <para>
     The 6to4 address is defined like following (schema is taken from <ulink url="http://rfc.net/rfc3056.html">RFC 3056 / Connection of IPv6 Domains via IPv4 Clouds</ulink>):
    </para>
    <programlisting>
|   3+13   |    32     |    16  |            64 bits             | 
+---+------+-----------+--------+--------------------------------+ 
|  FP+TLA  |  V4ADDR   | SLA ID |           Interface ID         | 
|  0x2002  |           |        |                                | 
+---+------+-----------+--------+--------------------------------+
    </programlisting>
    <para>
     Where FP is the known prefix for global addresses, TLA is the top level aggregator. V4ADDR is the node's global unique IPv4 address (in hexadecimal notation). SLA is the subnet identifier (65536 local subnets possible).
    </para>
    <para>
     Such prefix is generated and normally using SLA &ldquo;0000&rdquo; and suffix &ldquo;::1&rdquo; assigned to the 6to4 tunnel interface.
    </para>
    </sect3>
    <sect3>
     <title>
     Upstream tunneling
    </title>
    <para>
     The node has to know to which foreign tunnel endpoint its in IPv4 packed IPv6 packets should be send to. In &ldquo;early&rdquo; days of 6to4 tunneling, dedicated upstream accepting routers were defined. See  <ulink url="http://www.kfu.com/~nsayer/6to4/">NSayer's 6to4 information</ulink> for a list of routers.
    </para>
    <para>
     Nowadays, 6to4 upstream routers can be found auto-magically using the anycast address 192.88.99.1. In the background routing protocols handle this, see <ulink url="http://www.faqs.org/rfcs/rfc3068.html">RFC 3068 / An Anycast Prefix for 6to4 Relay Routers</ulink> for details. 
    </para>
    </sect3>
    <sect3>
     <title>
     Downstream tunneling
    </title>
    <para>
     The downstream (6bone -&gt; your 6to4 enabled node) is not really fix and can vary from foreign host which originated packets were send to. There exist two possibilities:
    </para>
    <itemizedlist>
     <listitem>
     <para>
     Foreign host uses uses 6to4 and sends packet direct back to your node (see below)
     </para>
    </listitem>
     <listitem>
     <para>
     Foreign host sends packets back to the world-wide IPv6 network and depending on the dynamic routing a relay router create a automatic tunnel back to your node.
     </para>
    </listitem>
    </itemizedlist>
    </sect3>
   </sect2>
  </sect1>
  <sect1>
   <title>
   Displaying existing tunnels
  </title>
   <sect2>
    <title>
    Using &quot;ip&quot;
   </title>
   <para>
    Usage:
   </para>
   <programlisting>
# /sbin/ip -6 tunnel show [&lt;device>]
   </programlisting>
   <para>
    Example:
   </para>
   <programlisting>
# /sbin/ip -6 tunnel show 
sit0: ipv6/ip remote any local any ttl 64 nopmtudisc 
sit1: ipv6/ip remote 195.226.187.50 local any ttl 64
   </programlisting>
   </sect2>
   <sect2>
    <title>
    Using &quot;route&quot;
   </title>
   <para>
    Usage:
   </para>
   <programlisting>
# /sbin/route -A inet6 
   </programlisting>
   <para>
    Example (output is filtered to display only tunnels through virtual interface sit0):
   </para>
   <programlisting>
# /sbin/route -A inet6 | grep "\Wsit0\W*$" 
::/96      ::               U   256  2  0  sit0 
2002::/16  ::               UA  256  0  0  sit0 
2000::/3   ::193.113.58.75  UG    1  0  0  sit0 
fe80::/10  ::               UA  256  0  0  sit0 
ff00::/8   ::               UA  256  0  0  sit0
   </programlisting>
   </sect2>
  </sect1>
  <sect1>
   <title>
   Setup of point-to-point tunnel
  </title>
  <para>
   There are 3 possibilities to add or remove point-to-point tunnels.
  </para>
   <sect2>
    <title>
    Add point-to-point tunnels
   </title>
    <sect3>
     <title>
     Using &quot;ip&quot; and &quot;route&quot;
    </title>
    <para>
     Common method at the moment for a small amount of tunnels
    </para>
    <para>
     Usage for creating a tunnel device (but it's not up afterward, also a TTL must be specified because the default value is 0).
    </para>
    <programlisting>
# /sbin/ip tunnel add &lt;device> mode sit ttl &lt;ttldefault> remote &lt;ipv4addressofforeigntunnel> local &lt;ipv4addresslocal>
    </programlisting>
    <para>
     Usage (generic example for three tunnels):
    </para>
    <programlisting>
# /sbin/ip tunnel add sit1 mode sit ttl &lt;ttldefault> remote &lt;ipv4addressofforeigntunnel1> local &lt;ipv4addresslocal>
# /sbin/ifconfig sit1 up
# /sbin/route -A inet6 add &lt;prefixtoroute1> dev sit1

# /sbin/ip tunnel add sit2 mode sit ttl &lt;ttldefault> &lt;ipv4addressofforeigntunnel2> local &lt;ipv4addresslocal>
# /sbin/ifconfig sit2 up
# /sbin/route -A inet6 add &lt;prefixtoroute2> dev sit2

# /sbin/ip tunnel add sit3 mode sit ttl &lt;ttldefault> &lt;ipv4addressofforeigntunnel3> local &lt;ipv4addresslocal>
# /sbin/ifconfig sit3 up
# /sbin/route -A inet6 add &lt;prefixtoroute3> dev sit3
    </programlisting>
    </sect3>
    <sect3>
     <title>
     Using &quot;ifconfig&quot; and &quot;route&quot; (deprecated)
    </title>
    <para>
     This not very recommended way to add a tunnel because it's a little bit strange. No problem if adding only one, but if you setup more than one, you cannot easy shutdown the first ones and leave the others running.
    </para>
    <para>
     Usage (generic example for three tunnels):
    </para>
    <programlisting>
# /sbin/ifconfig sit0 up

# /sbin/ifconfig sit0 tunnel &lt;ipv4addressofforeigntunnel1>
# /sbin/ifconfig sit1 up
# /sbin/route -A inet6 add &lt;prefixtoroute1> dev sit1

# /sbin/ifconfig sit0 tunnel &lt;ipv4addressofforeigntunnel2>
# /sbin/ifconfig sit2 up
# /sbin/route -A inet6 add &lt;prefixtoroute2> dev sit2

# /sbin/ifconfig sit0 tunnel &lt;ipv4addressofforeigntunnel3>
# /sbin/ifconfig sit3 up
# /sbin/route -A inet6 add &lt;prefixtoroute3> dev sit3
    </programlisting>
    <para>
     Important: DON'T USE THIS, because this setup implicit enable &quot;automatic tunneling&quot; from anywhere in the Internet, this is a risk, and it should not be advocated.
    </para>
    </sect3>
    <sect3>
     <title>
     Using &quot;route&quot; only
    </title>
    <para>
     It's also possible to setup tunnels in Non Broadcast Multiple Access (NBMA) style, it's a easy way to add many tunnels at once. But none of the tunnel can be numbered (which is a not required feature).
    </para>
    <para>
     Usage (generic example for three tunnels):
    </para>
    <programlisting>
# /sbin/ifconfig sit0 up

# /sbin/route -A inet6 add &lt;prefixtoroute1> gw ::&lt;ipv4addressofforeigntunnel1> dev sit0
# /sbin/route -A inet6 add &lt;prefixtoroute2> gw ::&lt;ipv4addressofforeigntunnel2> dev sit0
# /sbin/route -A inet6 add &lt;prefixtoroute3> gw ::&lt;ipv4addressofforeigntunnel3> dev sit0
    </programlisting>
    <para>
     Important: DON'T USE THIS, because this setup implicit enable &quot;automatic tunneling&quot; from anywhere in the Internet, this is a risk, and it should not be advocated.
    </para>
    </sect3>
   </sect2>
   <sect2>
    <title>
    Removing point-to-point tunnels
   </title>
   <para>
    Manually not so often needed, but used by scripts for clean shutdown or restart of IPv6 configuration.
   </para>
    <sect3>
     <title>
     Using &quot;ip&quot; and &quot;route&quot;
    </title>
    <para>
     Usage for removing a tunnel device:
    </para>
    <programlisting>
# /sbin/ip tunnel del &lt;device>
    </programlisting>
    <para>
     Usage (generic example for three tunnels):
    </para>
    <programlisting>
# /sbin/route -A inet6 del &lt;prefixtoroute1> dev sit1
# /sbin/ifconfig sit1 down
# /sbin/ip tunnel del sit1

# /sbin/route -A inet6 del &lt;prefixtoroute2> dev sit2
# /sbin/ifconfig sit2 down
# /sbin/ip tunnel del sit2

# /sbin/route -A inet6 del &lt;prefixtoroute3> dev sit3
# /sbin/ifconfig sit3 down
# /sbin/ip tunnel del sit3
    </programlisting>
    </sect3>
    <sect3>
     <title>
     Using &quot;ifconfig&quot; and &quot;route&quot; (deprecated because not very funny)
    </title>
    <para>
     Not only the creation is strange, the shutdown also...you have to remove the tunnels in backorder, means the latest created must be removed first.
    </para>
    <para>
     Usage (generic example for three tunnels):
    </para>
    <programlisting>
# /sbin/route -A inet6 del &lt;prefixtoroute3> dev sit3
# /sbin/ifconfig sit3 down

# /sbin/route -A inet6 del &lt;prefixtoroute2> dev sit2
# /sbin/ifconfig sit2 down

# /sbin/route -A inet6 add &lt;prefixtoroute1> dev sit1
# /sbin/ifconfig sit1 down

# /sbin/ifconfig sit0 down

    </programlisting>
    </sect3>
    <sect3>
     <title>
     Using &quot;route&quot;
    </title>
    <para>
     This is like removing normal IPv6 routes
    </para>
    <para>
     Usage (generic example for three tunnels):
    </para>
    <programlisting>
# /sbin/route -A inet6 del &lt;prefixtoroute1> gw ::&lt;ipv4addressofforeigntunnel1> dev sit0
# /sbin/route -A inet6 del &lt;prefixtoroute2> gw ::&lt;ipv4addressofforeigntunnel2> dev sit0
# /sbin/route -A inet6 del &lt;prefixtoroute3> gw ::&lt;ipv4addressofforeigntunnel3> dev sit0

# /sbin/ifconfig sit0 down
    </programlisting>
    </sect3>
   </sect2>
   <sect2>
    <title>
    Numbered point-to-point tunnels
   </title>
   <para>
    Sometimes it's needed to configure a point-to-point tunnel with IPv6 addresses like in IPv4 today. This is only possible with the first (ifconfig+route - deprecated) and third (ip+route) tunnel setup. In such cases, you can add the IPv6 address to the tunnel interface like shown on interface configuration. 
   </para>
   </sect2>
  </sect1>
  <sect1>
   <title>
   Setup of 6to4 tunnels
  </title>
   <sect2>
    <title>
    Add a 6to4 tunnel
   </title>
   <para>
    First, you have to calculate your 6to4 prefix using your local assigned global routable IPv4 address (if your host has no global routable IPv4 address, in special cases NAT on border gateways is possible):
   </para>
   <para>
    Assuming your IPv4 address is 
   </para>
   <programlisting>
1.2.3.4
   </programlisting>
   <para>
    the generated 6to4 prefix will be
   </para>
   <programlisting>
2002:0102:0304::
   </programlisting>
   <para>
    Local 6to4 gateways should always assigned the manual suffix &ldquo;::1&rdquo;, therefore your local 6to4 address will be
   </para>
   <programlisting>
2002:0102:0304::1
   </programlisting>
   <para>
    There are two ways possible to setup 6to4 tunneling now.
   </para>
    <sect3>
     <title>
     Using &quot;ip&quot; and a dedicated tunnel device
    </title>
    <para>
     This is now the recommended way.
    </para>
    <para>
     Create a new tunnel device
    </para>
    <programlisting>
# /sbin/ip tunnel add tun6to4 mode sit remote any local &lt;localipv4address> 
    </programlisting>
    <para>
     Bring interface up
    </para>
    <programlisting>
# /sbin/ip link set dev tun6to4 up 
    </programlisting>
    <para>
     Add local 6to4 address to interface
    </para>
    <programlisting>
# /sbin/ip -6 addr add &lt;local6to4address>/16 dev tun6to4 
    </programlisting>
    <para>
     Add (default) route to the global IPv6 network using the all-6to4-routers IPv4 anycast address
    </para>
    <programlisting>
# /sbin/ip -6 route add 2000::/3 via ::192.88.99.1 dev tun6to4 metric 1
    </programlisting>
    </sect3>
    <sect3>
     <title>
     Using &quot;ifconfig&quot; and &quot;route&quot; and generic tunnel device sit0 (deprecated)
    </title>
    <para>
     This is now deprecated because using the generic tunnel device sit0 doesn't let specify filtering per device.
    </para>
    <para>
     Bring generic tunnel interface sit0 up
    </para>
    <programlisting>
# /sbin/ifconfig sit0 up 
    </programlisting>
    <para>
     Add local 6to4 address to interface
    </para>
    <programlisting>
# /sbin/ifconfig sit0 add &lt;local6to4address>/16
    </programlisting>
    <para>
     Add (default) route to the global IPv6 network using the all-6to4-relays IPv4 anycast address
    </para>
    <programlisting>
# /sbin/route -A inet6 add 2000::/3 gw ::192.88.99.1 dev sit0
    </programlisting>
    </sect3>
   </sect2>
   <sect2>
    <title>
    Remove a 6to4 tunnel
   </title>
    <sect3>
     <title>
     Using &quot;ip&quot; and a dedicated tunnel device
    </title>
    <para>
     Remove all routes through this dedicated tunnel device
    </para>
    <programlisting>
# /sbin/ip -6 route flush dev tun6to4
    </programlisting>
    <para>
     Shut down interface
    </para>
    <programlisting>
# /sbin/ip link set dev tun6to4 down
    </programlisting>
    <para>
     Remove created tunnel device
    </para>
    <programlisting>
# /sbin/ip tunnel del tun6to4 
    </programlisting>
    </sect3>
    <sect3>
     <title>
     Using &quot;ifconfig&quot; and &ldquo;route&rdquo; and generic tunnel device sit0 (deprecated)
    </title>
    <para>
     Remove (default) route through the 6to4 tunnel interface
    </para>
    <programlisting>
# /sbin/route -A inet6 del 2000::/3 gw ::192.88.99.1 dev sit0
    </programlisting>
    <para>
     Remove local 6to4 address to interface
    </para>
    <programlisting>
# /sbin/ifconfig sit0 del &lt;local6to4address>/16
    </programlisting>
    <para>
     Shut down generic tunnel device (take care about this, perhaps it's still in use...)
    </para>
    <programlisting>
# /sbin/ifconfig sit0 down 
    </programlisting>
    </sect3>
   </sect2>
  </sect1>
 </chapter>
 <chapter id="chapter-configuring-ipv4-in-ipv6-tunnels">
  <title>
  Configuring IPv4-in-IPv6 tunnels
 </title>
 <para>
  This will be filled in the future. At the moment, such tunnels are more used in test environments.
 </para>
 <para>
  More information in the meantime: <ulink url="http://rfc.net/rfc2473.html">RFC 2473 / Generic Packet Tunneling in IPv6 Specification</ulink>
 </para>
 </chapter>
 <chapter id="chapter-kernel-settings">
  <title>
  Kernel settings
 </title>
 <para>
  To be filled...
 </para>
  <sect1>
   <title>
   /proc filesystem
  </title>
  <para>
   To be filled with following content next: switches forwarding and autoconf behavior, acceptance of router advertisements and more.
  </para>
   <sect2>
    <title>
    Entries in /proc/net/
   </title>
   <para>
    To be filled...
   </para>
   </sect2>
   <sect2>
    <title>
    Entries in /proc/sys/net/
   </title>
   <para>
    To be filled...
   </para>
   </sect2>
  </sect1>
  <sect1>
   <title>
   Netlink
  </title>
  <para>
   To be filled...
  </para>
  </sect1>
 </chapter>
 <chapter>
  <title>
  Network debugging
 </title>
  <sect1>
   <title>
   Server socket binding
  </title>
   <sect2>
    <title>
    Using &ldquo;netstat&rdquo; for server socket binding check
   </title>
   <para>
    It's always interesting which server sockets are currently active on a node. Using &ldquo;netstat&rdquo; is a short way to get such information: 
   </para>
   <para>
    Used options: -nlptu
   </para>
   <para>
    Example:
   </para>
   <programlisting>
# netstat -nlptu
Active Internet connections (only servers)
Proto Recv-Q Send-Q Local Address           Foreign Address         State       PID/Program name
tcp        0      0 0.0.0.0:32768           0.0.0.0:*               LISTEN      1258/rpc.statd
tcp        0      0 0.0.0.0:32769           0.0.0.0:*               LISTEN      1502/rpc.mountd
tcp        0      0 0.0.0.0:515             0.0.0.0:*               LISTEN      22433/lpd Waiting
tcp        0      0 1.2.3.1:139             0.0.0.0:*               LISTEN      1746/smbd
tcp        0      0 0.0.0.0:111             0.0.0.0:*               LISTEN      1230/portmap
tcp        0      0 0.0.0.0:6000            0.0.0.0:*               LISTEN      3551/X
tcp        0      0 1.2.3.1:8081            0.0.0.0:*               LISTEN      18735/junkbuster
tcp        0      0 1.2.3.1:3128            0.0.0.0:*               LISTEN      18822/(squid)
tcp        0      0 127.0.0.1:953           0.0.0.0:*               LISTEN      30734/named
tcp        0      0 ::ffff:1.2.3.1:993      :::*                    LISTEN      6742/xinetd-ipv6
tcp        0      0 :::13                   :::*                    LISTEN      6742/xinetd-ipv6
tcp        0      0 ::ffff:1.2.3.1:143      :::*                    LISTEN      6742/xinetd-ipv6
tcp        0      0 :::53                   :::*                    LISTEN      30734/named
tcp        0      0 :::22                   :::*                    LISTEN      1410/sshd
tcp        0      0 :::6010                 :::*                    LISTEN      13237/sshd
udp        0      0 0.0.0.0:32768           0.0.0.0:*                           1258/rpc.statd
udp        0      0 0.0.0.0:2049            0.0.0.0:*                           -
udp        0      0 0.0.0.0:32770           0.0.0.0:*                           1502/rpc.mountd
udp        0      0 0.0.0.0:32771           0.0.0.0:*                           -
udp        0      0 1.2.3.1:137             0.0.0.0:*                           1751/nmbd
udp        0      0 0.0.0.0:137             0.0.0.0:*                           1751/nmbd
udp        0      0 1.2.3.1:138             0.0.0.0:*                           1751/nmbd
udp        0      0 0.0.0.0:138             0.0.0.0:*                           1751/nmbd
udp        0      0 0.0.0.0:33044           0.0.0.0:*                           30734/named
udp        0      0 1.2.3.1:53              0.0.0.0:*                           30734/named
udp        0      0 127.0.0.1:53            0.0.0.0:*                           30734/named
udp        0      0 0.0.0.0:67              0.0.0.0:*                           1530/dhcpd
udp        0      0 0.0.0.0:67              0.0.0.0:*                           1530/dhcpd
udp        0      0 0.0.0.0:32858           0.0.0.0:*                           18822/(squid)
udp        0      0 0.0.0.0:4827            0.0.0.0:*                           18822/(squid)
udp        0      0 0.0.0.0:111             0.0.0.0:*                           1230/portmap
udp        0      0 :::53                   :::*                                30734/named
   </programlisting>
   </sect2>
  </sect1>
  <sect1>
   <title>
   Examples for tcpdump packet dumps
  </title>
  <para>
   Here some examples of captured packets are shown, perhaps useful for your own debugging...
  </para>
  <para>
   ...more coming next...
  </para>
   <sect2>
    <title>
    Router discovery
   </title>
    <sect3>
     <title>
     Router advertisement
    </title>
    <programlisting>
15:43:49.484751 fe80::212:34ff:fe12:3450 > ff02::1: icmp6: router advertisement(chlim=64, router_ltime=30, reachable_time=0, retrans_time=0)(prefix info: AR valid_ltime=30, preffered_ltime=20, prefix=2002:0102:0304:1::/64)(prefix info: LAR valid_ltime=2592000, preffered_ltime=604800, prefix=3ffe:ffff:0:1::/64)(src lladdr: 0:12:34:12:34:50) (len 88, hlim 255)
    </programlisting>
    <para>
     Router with link-local address &ldquo;fe80::212:34ff:fe12:3450&rdquo; send an advertisement to the all-node-on-link multicast address &ldquo;ff02::1&rdquo; containing two prefixes &ldquo;2002:0102:0304:1::/64&rdquo; (lifetime 30 s) and &ldquo;3ffe:ffff:0:1::/64&rdquo; (lifetime 2592000 s) including its own layer 2 MAC address &ldquo;0:12:34:12:34:50&rdquo;
    </para>
    </sect3>
    <sect3>
     <title>
     Router solicitation
    </title>
    <programlisting>
15:44:21.152646 fe80::212:34ff:fe12:3456 > ff02::2: icmp6: router solicitation (src lladdr: 0:12:34:12:34:56) (len 16, hlim 255)
    </programlisting>
    <para>
     Node with link-local address &ldquo;fe80::212:34ff:fe12:3456&rdquo; and layer 2 MAC address &ldquo;0:12:34:12:34:56&rdquo; is looking for a router on-link, therefore sending this solicitation to the all-router-on-link multicast address &ldquo;ff02::2&rdquo;.
    </para>
    </sect3>
   </sect2>
   <sect2>
    <title>
    Neighbor discovery
   </title>
    <sect3>
     <title>
     Neighbor discovery solicitation for duplicate address detection
    </title>
    <para>
     Following packets are sent by a node with layer 2 MAC address &ldquo;0:12:34:12:34:56&rdquo; during autoconfiguration to check whether a potential address is already used by another node on the link sending this to the solicited-node link-local multicast address
    </para>
    <itemizedlist>
     <listitem>
     <para>
     Node wants to configure its link-local address &ldquo;fe80::212:34ff:fe12:3456&rdquo;, checks for duplicate now
     </para>
    </listitem>
    </itemizedlist>
    <programlisting>
15:44:17.712338 :: > ff02::1:ff12:3456: icmp6: neighbor sol: who has fe80::212:34ff:fe12:3456(src lladdr: 0:12:34:12:34:56) (len 32, hlim 255)
    </programlisting>
    <itemizedlist>
     <listitem>
     <para>
     Node wants to configure its global address &ldquo;2002:0102:0304:1:212:34ff:fe12:3456&rdquo; (after receiving advertisement shown above), checks for duplicate now
     </para>
    </listitem>
    </itemizedlist>
    <programlisting>
15:44:21.905596 :: > ff02::1:ff12:3456: icmp6: neighbor sol: who has 2002:0102:0304:1:212:34ff:fe12:3456(src lladdr: 0:12:34:12:34:56) (len 32, hlim 255)
    </programlisting>
    <itemizedlist>
     <listitem>
     <para>
     Node wants to configure its global address &ldquo;3ffe:ffff:0:1:212:34ff:fe12:3456&rdquo; (after receiving advertisement shown above), checks for duplicate now
     </para>
    </listitem>
    </itemizedlist>
    <programlisting>
15:44:22.304028 :: > ff02::1:ff12:3456: icmp6: neighbor sol: who has 3ffe:ffff:0:1:212:34ff:fe12:3456(src lladdr: 0:12:34:12:34:56) (len 32, hlim 255)
    </programlisting>
    </sect3>
    <sect3>
     <title>
     Neighbor discovery solicitation for looking for host or gateway
    </title>
    <itemizedlist>
     <listitem>
     <para>
     Note wants to send packages to &ldquo;3ffe:ffff:0:1::10&rdquo; but has no layer 2 MAC address to send packet, so send solicitation now
     </para>
    </listitem>
    </itemizedlist>
    <programlisting>
13:07:47.664538 2002:0102:0304:1:2e0:18ff:fe90:9205 > ff02::1:ff00:10: icmp6: neighbor sol: who has 3ffe:ffff:0:1::10(src lladdr: 0:e0:18:90:92:5) (len 32, hlim 255)
    </programlisting>
    <itemizedlist>
     <listitem>
     <para>
     Node looks for &ldquo;fe80::10&rdquo; now
     </para>
    </listitem>
    </itemizedlist>
    <programlisting>
13:11:20.870070 fe80::2e0:18ff:fe90:9205 > ff02::1:ff00:10: icmp6: neighbor sol: who has fe80::10(src lladdr: 0:e0:18:90:92:5) (len 32, hlim 255)
    </programlisting>
    </sect3>
   </sect2>
  </sect1>
 </chapter>
 <chapter id="chapter-support-persistent-configuration">
  <title>
  Support for persistent IPv6 configuration in Linux distributions
 </title>
 <para>
  Some Linux distribution contain already support of a persistent IPv6 configuration using existing or new configuration and script files and some hook in the IPv4 script files.
 </para>
  <sect1>
   <title>
   Red Hat Linux and &ldquo;clones&rdquo;
  </title>
  <para>
   Since starting writing the <ulink url="http://www.bieringer.de/linux/IPv6/">IPv6 & Linux - HowTo</ulink> it was my intention to enable a persistent IPv6 configuration which catch most of the wished cases like host-only, router-only, dual-homed-host, router with second stub network, normal tunnels, 6to4 tunnels, and so on. Nowadays there exists a set of configuration and script files which do the job very well (never heard about real problems, but I don't know how many use the set. Because this configuration and scrips files are extended from time to time, they got their own HOWTO page: <ulink url="http://www.bieringer.de/linux/IPv6/IPv6-HOWTO/scripts/current/">IPv6-HOWTO/scripts/current</ulink>. Because I began my IPv6 experience using a Red Hat Linux 5.0 clone, my IPv6 development systems are mostly Red Hat Linux based now, it's kind a logic that the scripts are developed for this kind of distribution (so called <emphasis>historic issue</emphasis>). Also it was very easy to extend some configuration files, create new ones and create some simple hook for calling IPv6 setup during IPv4 setup.
  </para>
  <para>
   Fortunately, in Red Hat Linux since 7.1 a snapshot of my IPv6 scripts is included, this was and is still further on assisted by Pekka Savola.
  </para>
  <para>
   Mandrake since version 8.0 also includes an IPv6-enabled initscript package, but a minor bug still prevents usage (&ldquo;ifconfig&rdquo; misses &ldquo;inet6&rdquo; before &ldquo;add&rdquo;).
  </para>
   <sect2>
    <title>
    Test for IPv6 support
   </title>
   <para>
    You can test, whether your Linux distribution contain support for persistent IPv6 configuration using my set. Following script library should exist:
   </para>
   <programlisting>
/etc/sysconfig/network-scripts/network-functions-ipv6
   </programlisting>
   <para>
    Auto-magically test:
   </para>
   <programlisting>
# test -f /etc/sysconfig/network-scripts/network-functions-ipv6 && echo "Main IPv6 script libary exists"
   </programlisting>
   <para>
    The version of the library is important if you miss some features. You can get it executing following (or easier look at the top of the file):
   </para>
   <programlisting>
# source /etc/sysconfig/network-scripts/network-functions-ipv6 && getversion_ipv6_functions 
20011124
   </programlisting>
   <para>
    In shown example, the used version is 20011124. Check this against latest information on <ulink url="http://www.bieringer.de/linux/IPv6/IPv6-HOWTO/scripts/current/">IPv6-HOWTO/scripts/current</ulink> to see what has been changed. There is also a change-log available in the distributed tar-ball.
   </para>
   </sect2>
  </sect1>
  <sect1>
   <title>
   SuSE Linux
  </title>
  <para>
   In newer versions there is a really rudimentary support available, see /etc/rc.config for details.
  </para>
  <para>
   Because of the really different configuration and script file structure it is hard (or impossible) to use the set for Red Hat Linux and clones with this distribution.
  </para>
   <sect2>
    <title>
    Further information
   </title>
   <itemizedlist>
    <listitem>
    <para>
    <ulink url="http://www.feyrer.de/IPv6/SuSE73-IPv6+6to4-setup.html">How to setup 6to4 IPv6 with SuSE 7.3</ulink>
    </para>
   </listitem>
   </itemizedlist>
   </sect2>
  </sect1>
  <sect1>
   <title>
   Debian Linux
  </title>
  <para>
   I still don't have any information weather a persistent IPv6 configuration can stored somewhere.
  </para>
   <sect2>
    <title>
    Further information
   </title>
   <itemizedlist>
    <listitem>
    <para>
    <ulink url="http://people.debian.org/~csmall/ipv6/">IPv6 on Debian Linux</ulink>
    </para>
   </listitem>
   </itemizedlist>
   </sect2>
  </sect1>
 </chapter>
 <chapter id="chapter-autoconfiguration">
  <title>
  Auto-configuration and mobility
 </title>
  <sect1>
   <title>
   Stateless auto-configuration
  </title>
  <para>
   Is supported and seen on the assigned link-local address after an IPv6-enabled interface is up.
  </para>
  </sect1>
  <sect1>
   <title>
   Stateful auto-configuration using Router Advertisement Daemon (radvd)
  </title>
  <para>
   to be filled. See <link linkend="hints-daemons-radvd">radvd daemon autoconfiguration</link> below.
  </para>
  </sect1>
  <sect1>
   <title>
   Dynamic Host Configuration Protocol v6 (DHCPv6)
  </title>
  <para>
   to be filled.
  </para>
  </sect1>
  <sect1>
   <title>
   Mobility
  </title>
  <para>
   to be filled.
  </para>
  <para>
   For the moment, see <ulink url="http://www.mipl.mediapoli.com/">Mobile IPv6 for Linux(MIPL) homepage</ulink> for more details
  </para>
  </sect1>
 </chapter>
 <chapter id="chapter-firewalling-security">
  <title>
  Firewalling and security issues
 </title>
 <para>
  IPv6 firewalling is important, especially if using IPv6 on internal networks with global IPv6 addresses. Because unlike at IPv4 networks where in common internal hosts are protected automatically using private IPv4 addresses like <ulink url="http://rfc.net/rfc1918.html">RFC 1918 / Address Allocation for Private Internets</ulink> or <ulink url="http://www.glossary-tech.com/apipa.htm">APIPA / Automatic Private IP Addressing</ulink>, in IPv6 normally global addresses are used and someone with IPv6 connectivity can reach all internal IPv6 enabled nodes.
 </para>
  <sect1>
   <title>
   Firewalling
  </title>
   <sect2 id="firewalling-netfilter6">
    <title>
    Firewalling using netfilter6 
   </title>
   <para>
    Native IPv6 firewalling is only supported in kernel versions 2.4+. In older 2.2- you can only filter IPv6-in-IPv4 by protocol 41. 
   </para>
   <para>
    Attention: no warranty that described rules or examples are really protect your system! 
   </para>
    <sect3>
     <title>
     More information
    </title>
    <itemizedlist>
     <listitem>
     <para>
     <ulink url="http://www.netfilter.org/">Netfilter project</ulink>
     </para>
    </listitem>
     <listitem>
     <para>
     <ulink url="http://lists.samba.org/pipermail/netfilter/">maillist archive of netfilter users</ulink>
     </para>
    </listitem>
     <listitem>
     <para>
     <ulink url="http://lists.samba.org/pipermail/netfilter-devel/">maillist archive of netfilter developers</ulink>
     </para>
    </listitem>
     <listitem>
     <para>
     <ulink url="http://www.bieringer.de/linux/IPv6/status/IPv6+Linux-status-kernel.html#netfilter6 ">Unofficial status informations</ulink>
     </para>
    </listitem>
    </itemizedlist>
    </sect3>
   </sect2>
   <sect2>
    <title>
    Preparation
   </title>
    <sect3>
     <title>
     Get sources
    </title>
    <para>
     Get the latest kernel source: <ulink url="http://www.kernel.org/">http://www.kernel.org/</ulink>
    </para>
    <para>
     Get the latest iptables package: 
    </para>
    <itemizedlist>
     <listitem>
     <para>
     Source tarball (for kernel patches): <ulink url="http://www.netfilter.org/">http://www.netfilter.org/</ulink>
     </para>
    </listitem>
     <listitem>
     <para>
     Source RPM for rebuild of binary (for RedHat systems): <ulink url="ftp://ftp.redhat.com/redhat/linux/rawhide/SRPMS/SRPMS/">ftp://ftp.redhat.com/redhat/linux/rawhide/SRPMS/SRPMS/</ulink> or perhaps also at <ulink url="http://www.netcore.fi/pekkas/linux/ipv6/ ">http://www.netcore.fi/pekkas/linux/ipv6/ </ulink>
     </para>
    </listitem>
    </itemizedlist>
    </sect3>
    <sect3>
     <title>
     Extract sources
    </title>
    <para>
     Change to source directory: 
    </para>
    <programlisting>
# cd /path/to/src 
    </programlisting>
    <para>
     Unpack and rename kernel sources 
    </para>
    <programlisting>
# tar z|jxf kernel-version.tar.gz|bz2 
# mv linux linux-version-iptables-version+IPv6 
    </programlisting>
    <para>
     Unpack iptables sources 
    </para>
    <programlisting>
# tar z|jxf iptables-version.tar.gz|bz2 
    </programlisting>
    </sect3>
    <sect3>
     <title>
     Apply latest iptables/IPv6-related patches to kernel source
    </title>
    <para>
     Change to iptables directory 
    </para>
    <programlisting>
# cd iptables-version 
    </programlisting>
    <para>
     Apply pending patches 
    </para>
    <programlisting>
# make pending-patches KERNEL_DIR=/path/to/src/linux-version-iptables-version/ 
    </programlisting>
    <para>
     Apply additional IPv6 related patches (still not in the vanilla kernel included) 
    </para>
    <programlisting>
# make patch-o-matic KERNEL_DIR=/path/to/src/linux-version-iptables-version/ 
    </programlisting>
    <para>
     Say yes at following options (iptables-1.2.2) 
    </para>
    <itemizedlist>
     <listitem>
     <para>
     ah-esp.patch 
     </para>
    </listitem>
     <listitem>
     <para>
     masq-dynaddr.patch (only needed for systems with dynamic IP assigned WAN connections like PPP or PPPoE) 
     </para>
    </listitem>
     <listitem>
     <para>
     ipv6-agr.patch.ipv6 
     </para>
    </listitem>
     <listitem>
     <para>
     ipv6-ports.patch.ipv6 
     </para>
    </listitem>
     <listitem>
     <para>
     LOG.patch.ipv6 
     </para>
    </listitem>
     <listitem>
     <para>
     REJECT.patch.ipv6 
     </para>
    </listitem>
    </itemizedlist>
    <para>
     Check IPv6 extensions 
    </para>
    <programlisting>
# make print-extensions 
Extensions found: IPv6:owner IPv6:limit IPv6:mac IPv6:multiport
    </programlisting>
    </sect3>
    <sect3>
     <title>
     Configure, build and install new kernel
    </title>
    <para>
     Change to kernel sources 
    </para>
    <programlisting>
# cd /path/to/src/linux-version-iptables-version/ 
    </programlisting>
    <para>
     Edit Makefile 
    </para>
    <programlisting>
- EXTRAVERSION = 
+ EXTRAVERSION = -iptables-version+IPv6-try 
    </programlisting>
    <para>
     Run configure, enable IPv6 related 
    </para>
    <programlisting>
            Code maturity level options 
                  Prompt for development and/or incomplete code/drivers : yes 
            Networking options 
                  Network packet filtering: yes 
                  The IPv6 protocol: module 
                       IPv6: Netfilter Configuration 
                             IP6 tables support: module 
                             All new options like following: 
                                   limit match support: module 
                                   MAC address match support: module 
                                   Multiple port match support: module 
                                   Owner match support: module 
                                   netfilter MARK match support: module 
                                   Aggregated address check: module 
                                   Packet filtering: module 
                                        REJECT target support: module 
                                        LOG target support: module 
                                   Packet mangling: module 
                                   MARK target support: module 
    </programlisting>
    <para>
     Configure other related to your system, too 
    </para>
    <para>
     Compilation and installing: see the kernel section here and other HowTos 
    </para>
    </sect3>
    <sect3>
     <title>
     Rebuild and install binaries of iptables
    </title>
    <para>
     Make sure, that upper kernel source tree is also available at /usr/src/linux/ 
    </para>
    <para>
     Rename older directory 
    </para>
    <programlisting>
# mv /usr/src/linux /usr/src/linux.old 
    </programlisting>
    <para>
     Create a new softlink 
    </para>
    <programlisting>
# ln /path/to/src/linux-version-iptables-version /usr/src/linux 
    </programlisting>
    <para>
     Rebuild SRPMS 
    </para>
    <programlisting>
# rpm --rebuild /path/to/SRPMS/iptables-version-release.src.rpm 
    </programlisting>
    <para>
     Install new iptables packages (iptables + iptables-ipv6) 
    </para>
    <itemizedlist>
     <listitem>
     <para>
     On RH 7.1 systems, normally, already an older version is installed, therefore use &quot;freshen&quot; 
     </para>
    </listitem>
    </itemizedlist>
    <programlisting>
# rpm -Fhv /path/to/RPMS/cpu/iptables*-version-release.cpu.rpm 
    </programlisting>
    <itemizedlist>
     <listitem>
     <para>
     If not already installed, use &quot;install&quot; 
     </para>
    </listitem>
    </itemizedlist>
    <programlisting>
# rpm -ihv /path/to/RPMS/cpu/iptables*-version-release.cpu.rpm 
    </programlisting>
    <itemizedlist>
     <listitem>
     <para>
     On RH 6.2 systems, normally, no kernel 2.4.x is installed, therefore the requirements don't fit. Use &quot;--nodeps&quot; to install it 
     </para>
    </listitem>
    </itemizedlist>
    <programlisting>
# rpm -ihv --nodep /path/to/RPMS/cpu/iptables*-version-release.cpu.rpm 
    </programlisting>
    <para>
     Perhaps it's necessary to create a softlink for iptables libaries where iptables looks for them 
    </para>
    <programlisting>
# ln -s /lib/iptables/ /usr/lib/iptables 
    </programlisting>
    </sect3>
   </sect2>
   <sect2>
    <title>
    Usage
   </title>
    <sect3>
     <title>
     Check for support
    </title>
    <para>
     Load module, if so compiled 
    </para>
    <programlisting>
# modprobe ip6_tables 
    </programlisting>
    <para>
     Check for capability 
    </para>
    <programlisting>
# [ ! -f /proc/net/ip6_tables_names ] && echo "Current kernel doesn't support 'ip6tables' firewalling (IPv6)!" 
    </programlisting>
    </sect3>
    <sect3>
     <title>
     Learn how to use ip6tables
    </title>
    <para>
     List all IPv6 netfilter entries 
    </para>
    <itemizedlist>
     <listitem>
     <para>
     Short 
     </para>
    </listitem>
    </itemizedlist>
    <programlisting>
# ip6tables -L 
    </programlisting>
    <itemizedlist>
     <listitem>
     <para>
     Extended 
     </para>
    </listitem>
    </itemizedlist>
    <programlisting>
# ip6tables -n -v --line-numbers -L 
    </programlisting>
    <para>
     List specified filter 
    </para>
    <programlisting>
# ip6tables -n -v --line-numbers -L INPUT 
    </programlisting>
    <para>
     Insert a log rule at the input filter with options 
    </para>
    <programlisting>
# ip6tables --table filter --append INPUT  -j LOG --log-prefix "INPUT:" --log-level 7 
    </programlisting>
    <para>
     Insert a drop rule at the input filter 
    </para>
    <programlisting>
# ip6tables --table filter --append INPUT  -j DROP 
    </programlisting>
    <para>
     Delete a rule by number 
    </para>
    <programlisting>
# ip6tables --table filter --delete INPUT 1 
    </programlisting>
    <para>
     Allow ICMPv6, at the moment, with unpatched kernel 2.4.5 and iptables-1.2.2 no type can be specified 
    </para>
    <itemizedlist>
     <listitem>
     <para>
     Accept incoming ICMPv6 through tunnels 
     </para>
    </listitem>
    </itemizedlist>
    <programlisting>
# ip6tables -A INPUT -i sit+ -p icmpv6 -j ACCEPT 
    </programlisting>
    <itemizedlist>
     <listitem>
     <para>
     Allow outgoing ICMPv6 through tunnels 
     </para>
    </listitem>
    </itemizedlist>
    <programlisting>
# ip6tables -A OUTPUT -o sit+ -p icmpv6 -j ACCEPT 
    </programlisting>
    <para>
     Allow incoming SSH, here an example is shown for a ruleset which allows incoming SSH connection from a specified IPv6 address 
    </para>
    <itemizedlist>
     <listitem>
     <para>
     Allow incoming SSH from 3ffe:400:100::1/128 
     </para>
    </listitem>
    </itemizedlist>
    <programlisting>
# ip6tables -A INPUT -i sit+ -p tcp -s 3ffe:400:100::1/128 --sport 512:65535 --dport 22 -j ACCEPT 
    </programlisting>
    <itemizedlist>
     <listitem>
     <para>
     Allow response packets (at the moment IPv6 connection tracking isn't in mainstream netfilter6 implemented) 
     </para>
    </listitem>
    </itemizedlist>
    <programlisting>
# ip6tables -A OUTPUT -o sit+ -p tcp -d 3ffe:400:100::1/128 --dport 512:65535 --sport 22 ! --syn j ACCEPT 
    </programlisting>
    <para>
     Enable tunneled IPv6-in-IPv4, to accept tunneled IPv6-in-IPv4 packets, you have to insert rules in your IPv4 firewall setup relating to such packets, for example 
    </para>
    <itemizedlist>
     <listitem>
     <para>
     Accept incoming IPv6-in-IPv4 on interface ppp0 
     </para>
    </listitem>
    </itemizedlist>
    <programlisting>
# iptables -A INPUT -i ppp0 -p ipv6 -j ACCEPT 
    </programlisting>
    <itemizedlist>
     <listitem>
     <para>
     Allow outgoing IPv6-in-IPv4 to interface ppp0 
     </para>
    </listitem>
    </itemizedlist>
    <programlisting>
# iptables -A OUTPUT -o ppp0 -p ipv6 -j ACCEPT 
    </programlisting>
    <para>
     If you have only a static tunnel, you can specify the IPv4 addresses, too, like 
    </para>
    <itemizedlist>
     <listitem>
     <para>
     Accept incoming IPv6-in-IPv4 on interface ppp0 from tunnel endpoint 1.2.3.4 
     </para>
    </listitem>
    </itemizedlist>
    <programlisting>
# iptables -A INPUT -i ppp0 -p ipv6 -s 1.2.3.4 -j ACCEPT 
    </programlisting>
    <itemizedlist>
     <listitem>
     <para>
     Allow outgoing IPv6-in-IPv4 to interface ppp0 to tunnel endpoint 1.2.3.4 
     </para>
    </listitem>
    </itemizedlist>
    <programlisting>
# iptables -A OUTPUT -o ppp0 -p ipv6 -d 1.2.3.4 -j ACCEPT 
    </programlisting>
    <para>
     Protect against incoming TCP connection requests (VERY RECOMMENDED!), for security issues you should really insert a rule which blocks incoming TCP connection requests. Adapt &quot;-i&quot; option, if other interface names are in use! 
    </para>
    <itemizedlist>
     <listitem>
     <para>
     Block incoming TCP connection requests to this host 
     </para>
    </listitem>
    </itemizedlist>
    <programlisting>
# ip6tables -I INPUT -i sit+ -p tcp --syn -j DROP 
    </programlisting>
    <itemizedlist>
     <listitem>
     <para>
     Block incoming TCP connection requests to hosts behind this router 
     </para>
    </listitem>
    </itemizedlist>
    <programlisting>
# ip6tables -I FORWARD -i sit+ -p tcp --syn -j DROP 
    </programlisting>
    <para>
     Perhaps the rules have to be placed below others, but that is work you have to think about it. Best way is to create a script and execute rules in a specified way. 
    </para>
    <para>
     Protect against incoming UDP connection requests (ALSO RECOMMENDED!), like mentioned on my firewall information it's possible to control the ports on outgoing UDP/TCP sessions. So if all of your local IPv6 systems are use local ports e.g. from 32768 to 60999 you are able to filter UDP connections also (until connection tracking works) like: 
    </para>
    <itemizedlist>
     <listitem>
     <para>
     Block incoming UDP packets which cannot be responses of outgoing requests of this host 
     </para>
    </listitem>
    </itemizedlist>
    <programlisting>
# ip6tables -I INPUT -i sit+ -p udp ! --dport 32768:60999 -j DROP 
    </programlisting>
    <itemizedlist>
     <listitem>
     <para>
     Block incoming UDP packets which cannot be responses of forwarded requests of hosts behind this router 
     </para>
    </listitem>
    </itemizedlist>
    <programlisting>
ip6tables -I FORWARD -i sit+ -p udp ! --dport 32768:60999 -j DROP 
    </programlisting>
    </sect3>
    <sect3>
     <title>
     Demonstration example
    </title>
    <para>
     Following lines show a more sophisticated setup as an example. Happy netfilter6 ruleset creation.... 
    </para>
    <programlisting>
# ip6tables -n -v -L 
Chain INPUT (policy DROP 0 packets, 0 bytes) 
 pkts bytes target     prot opt in     out     source               destination 
    0     0 extIN      all      sit+   *       ::/0                 ::/0 
    4   384 intIN      all      eth0   *       ::/0                 ::/0 
    0     0 ACCEPT     all      *      *       ::1/128              ::1/128 
    0     0 ACCEPT     all      lo     *       ::/0                 ::/0 
    0     0 LOG        all      *      *       ::/0                 ::/0               LOG flags 0 level 7 prefix `INPUT-default:' 
    0     0 DROP       all      *      *       ::/0                 ::/0 
 
Chain FORWARD (policy DROP 0 packets, 0 bytes) 
 pkts bytes target     prot opt in     out     source               destination 
    0     0 int2ext    all      eth0   sit+    ::/0                 ::/0 
    0     0 ext2int    all      sit+   eth0    ::/0                 ::/0 
    0     0 LOG        all      *      *       ::/0                 ::/0               LOG flags 0 level 7 prefix `FORWARD-default:' 
    0     0 DROP       all      *      *       ::/0                 ::/0 
 
Chain OUTPUT (policy DROP 0 packets, 0 bytes) 
 pkts bytes target     prot opt in     out     source               destination 
    0     0 extOUT     all      *      sit+    ::/0                 ::/0 
    4   384 intOUT     all      *      eth0    ::/0                 ::/0 
    0     0 ACCEPT     all      *      *       ::1/128              ::1/128 
    0     0 ACCEPT     all      *      lo      ::/0                 ::/0 
    0     0 LOG        all      *      *       ::/0                 ::/0               LOG flags 0 level 7 prefix `OUTPUT-default:' 
    0     0 DROP       all      *      *       ::/0                 ::/0 
 
Chain ext2int (1 references) 
 pkts bytes target     prot opt in     out     source               destination 
    0     0 ACCEPT     icmpv6    *      *       ::/0                 ::/0 
    0     0 ACCEPT     tcp      *      *       ::/0                 ::/0               tcp spts:1:65535 dpts:1024:65535 flags:!0x16/0x02 
    0     0 LOG        all      *      *       ::/0                 ::/0               LOG flags 0 level 7 prefix `ext2int-default:' 
    0     0 DROP       tcp      *      *       ::/0                 ::/0 
    0     0 DROP       udp      *      *       ::/0                 ::/0 
    0     0 DROP       all      *      *       ::/0                 ::/0 
 
Chain extIN (1 references) 
 pkts bytes target     prot opt in     out     source               destination 
    0     0 ACCEPT     tcp      *      *       3ffe:400:100::1/128  ::/0               tcp spts:512:65535 dpt:22 
    0     0 ACCEPT     tcp      *      *       3ffe:400:100::2/128  ::/0               tcp spts:512:65535 dpt:22 
    0     0 ACCEPT     icmpv6    *      *       ::/0                 ::/0 
    0     0 ACCEPT     tcp      *      *       ::/0                 ::/0               tcp spts:1:65535 dpts:1024:65535 flags:!0x16/0x02 
    0     0 ACCEPT     udp      *      *       ::/0                 ::/0               udp spts:1:65535 dpts:1024:65535 
    0     0 LOG        all      *      *       ::/0                 ::/0               limit: avg 5/min burst 5 LOG flags 0 level 7 prefix `extIN-default:' 
    0     0 DROP       all      *      *       ::/0                 ::/0 
 
Chain extOUT (1 references) 
 pkts bytes target     prot opt in     out     source               destination 
    0     0 ACCEPT     tcp      *      *       ::/0                 3ffe:400:100::1/128tcp spt:22 dpts:512:65535 flags:!0x16/0x02 
    0     0 ACCEPT     tcp      *      *       ::/0                 3ffe:400:100::2/128tcp spt:22 dpts:512:65535 flags:!0x16/0x02 
    0     0 ACCEPT     icmpv6    *      *       ::/0                 ::/0 
    0     0 ACCEPT     tcp      *      *       ::/0                 ::/0               tcp spts:1024:65535 dpts:1:65535 
    0     0 ACCEPT     udp      *      *       ::/0                 ::/0               udp spts:1024:65535 dpts:1:65535 
    0     0 LOG        all      *      *       ::/0                 ::/0               LOG flags 0 level 7 prefix `extOUT-default:' 
    0     0 DROP       all      *      *       ::/0                 ::/0 
 
Chain int2ext (1 references) 
 pkts bytes target     prot opt in     out     source               destination 
    0     0 ACCEPT     icmpv6    *      *       ::/0                 ::/0 
    0     0 ACCEPT     tcp      *      *       ::/0                 ::/0               tcp spts:1024:65535 dpts:1:65535 
    0     0 LOG        all      *      *       ::/0                 ::/0               LOG flags 0 level 7 prefix `int2ext:' 
    0     0 DROP       all      *      *       ::/0                 ::/0 
    0     0 LOG        all      *      *       ::/0                 ::/0               LOG flags 0 level 7 prefix `int2ext-default:' 
    0     0 DROP       tcp      *      *       ::/0                 ::/0 
    0     0 DROP       udp      *      *       ::/0                 ::/0 
    0     0 DROP       all      *      *       ::/0                 ::/0 
 
Chain intIN (1 references) 
 pkts bytes target     prot opt in     out     source               destination 
    0     0 ACCEPT     all      *      *       ::/0                 fe80::/ffc0:: 
    4   384 ACCEPT     all      *      *       ::/0                 ff02::/16 
 
Chain intOUT (1 references) 
 pkts bytes target     prot opt in     out     source               destination 
    0     0 ACCEPT     all      *      *       ::/0                 fe80::/ffc0:: 
    4   384 ACCEPT     all      *      *       ::/0                 ff02::/16 
    0     0 LOG        all      *      *       ::/0                 ::/0               LOG flags 0 level 7 prefix `intOUT-default:' 
    0     0 DROP       all      *      *       ::/0                 ::/0 
    </programlisting>
    </sect3>
   </sect2>
  </sect1>
  <sect1>
   <title>
   Security
  </title>
   <sect2>
    <title>
    Node security
   </title>
   <para>
    It's very recommend to apply all available patches and disable all not necessary services.
   </para>
   <para>
    More to be filled...
   </para>
   </sect2>
   <sect2>
    <title>
    Access limitations
   </title>
   <para>
    Many services uses the tcp_wrapper library for access control. Below is described the <link linkend="hints-daemons-tcpwrapper">use of tcp_wrapper</link>.
   </para>
   <para>
    More to be filled...
   </para>
   </sect2>
  </sect1>
 </chapter>
 <chapter id="chapter-encryption-authentication">
  <title>
  Encryption and Authentication
 </title>
 <para>
  Unlike in IPv4 encryption and authentication is a mandatory feature of IPv6. This features are normally implemented using IPsec (which can be also used by IPv4).
 </para>
 <para>
  But because of the independence of encryption and authentication from the key exchange protocol there exists currently some interoperability problems regarding this issue.
 </para>
  <sect1>
   <title>
   Support in kernel
  </title>
   <sect2>
    <title>
    Support in vanilla Linux kernel
   </title>
   <para>
    Currently missing in 2.4, perhaps in 2.5 (see below). There is an issue about keeping the Linux kernel source free of export/import-control-laws regarding encryption code. This is also one case why <ulink url="http://www.freeswan.org/">FreeS/WAN project</ulink> (IPv4 only IPsec) isn't still contained in vanilla source.
   </para>
   </sect2>
   <sect2>
    <title>
    Support in USAGI kernel
   </title>
   <para>
    The USAGI project has taken over in July 2001 the IPv6 enabled FreeS/WAN code from the <ulink url="http://www.ipv6.iabg.de/downloadframe/">IABG / IPv6 Project</ulink> and included in their kernel extensions, but still work in progress, means that not all IABG features are already working in USAGI extension.
   </para>
   </sect2>
  </sect1>
  <sect1>
   <title>
   Usage
  </title>
  <para>
   to be filled, mostly like FreeS/WAN for IPv4. For the meantime look for documentation at <ulink url="http://www.freeswan.org/doc.html">FreeS/WAN / Online documentation</ulink>.
  </para>
  </sect1>
 </chapter>
 <chapter id="chapter-qos">
  <title>
  Quality of Service (QoS)
 </title>
 <para>
  IPv6 supports QoS with use of Flow Labels and Traffic Classes. This can be controlled using &ldquo;tc&rdquo; (contained in package &ldquo;iproute&rdquo;).
 </para>
 <para>
  more to be filled...
 </para>
 </chapter>
 <chapter id="chapter-hints-daemons">
  <title>
  Hints for IPv6-enabled daemons
 </title>
 <para>
  Here some hints are shown for IPv6-enabled daemons.
 </para>
  <sect1 id="hints-daemons-bind">
   <title>
   Berkeley Internet Name Daemon BIND (named)
  </title>
  <para>
   IPv6 is supported since version 9. Always use newest available version. At least version 9.1.3 must be used, older versions can contain remote exploitable security holes.
  </para>
   <sect2>
    <title>
    Listening on IPv6 addresses
   </title>
   <para>
    Note: unlike in IPv4 current versions doesn't allow to bind a server socket to dedicated IPv6 addresses, so only <emphasis>any</emphasis> or <emphasis>none</emphasis> are valid. Because this can be a security issue, check the Access Control List (ACL) section below, too!
   </para>
    <sect3>
     <title>
     Enable BIND named for listening on IPv6 address
    </title>
    <para>
     To enable IPv6 for listening, following options are requested to change
    </para>
    <programlisting>
options {
        # sure other options here, too
        listen-on-v6 { any; };
};
    </programlisting>
    <para>
     This should result after restart in e.g.
    </para>
    <programlisting>
# netstat -lnptu |grep "named\W*$" 
tcp 0 0 :::53          :::*      LISTEN 12345/named<emphasis> <- incoming named/TCP requests</emphasis>
udp 0 0 1.2.3.4:53     0.0.0.0:*        12345/named<emphasis> <- incoming named/UDP requests to IPv4 1.2.3.4</emphasis>
udp 0 0 127.0.0.1:53   0.0.0.0:*        12345/named<emphasis> <- incoming named/UDP requests to IPv4 localhost</emphasis>
udp 0 0 0.0.0.0:32868  0.0.0.0:*        12345/named<emphasis> <- dynamic choosen port for queries to outside</emphasis>
udp 0 0 :::53          :::*             12345/named<emphasis> <- incoming named/UDP request to any IPv6</emphasis>
    </programlisting>
    <para>
     And a simple test looks like
    </para>
    <programlisting>
# dig localhost @::1
    </programlisting>
    <para>
     and should show you a result.
    </para>
    </sect3>
    <sect3>
     <title>
     Disable BIND named for listening on IPv6 address
    </title>
    <para>
     To disable IPv6 for listening, following options are requested to change
    </para>
    <programlisting>
options {
        # sure other options here, too
        listen-on-v6 { none; };
};
    </programlisting>
    </sect3>
   </sect2>
   <sect2>
    <title>
    IPv6 enabled Access Control Lists (ACL)
   </title>
   <para>
    IPv6 enabled ACLs are possible and should be used whenever it's possible. An example looks like following:
   </para>
   <programlisting>
acl internal-net { 
        127.0.0.1; 
        1.2.3.0/24;  
        3ffe:ffff:100::/56; 
        ::1/128; 
        ::ffff:1.2.3.4/128; 
};
acl ns-internal-net { 
        1.2.3.4;  
        1.2.3.5;  
        3ffe:ffff:100::4/128; 
        3ffe:ffff:100::5/128; 
};
   </programlisting>
   <para>
    This ACLs can be used e.g. for queries of clients and transfer zones to secondary name-servers. This prevents also your caching name-server to be used from outside using IPv6.
   </para>
   <programlisting>
options {
        # sure other options here, too
        listen-on-v6 { none; };
        allow-query { internal-net; }; 
        allow-transfer { ns-internal-net; }; 
};
   </programlisting>
   <para>
    It's also possible to set the <emphasis>allow-query </emphasis>and <emphasis>allow-transfer</emphasis> option for most of single zone definitions, too.
   </para>
   </sect2>
   <sect2>
    <title>
    Sending queries with dedicated IPv6 address
   </title>
   <para>
    This option is not required, but perhaps needed:
   </para>
   <programlisting>
query-source-v6 address &lt;ipv6address|*> port &lt;port|*>;
   </programlisting>
   </sect2>
   <sect2>
    <title>
    Per zone defined dedicated IPv6 addresses
   </title>
   <para>
    It's also possible to define per zone some IPv6 addresses.
   </para>
    <sect3>
     <title>
     Transfer source address 
    </title>
    <para>
     Transfer source address is used for outgoing zone transfers:
    </para>
    <programlisting>
transfer-source-v6 &lt;ipv6addr|*> [port port];
    </programlisting>
    </sect3>
    <sect3>
     <title>
     Notify source address 
    </title>
    <para>
     Notify source address is used for outgoing notify messages:
    </para>
    <programlisting>
notify-source-v6 &lt;ipv6addr|*> [port port];
    </programlisting>
    </sect3>
   </sect2>
   <sect2>
    <title>
    Serving IPv6 related DNS data
   </title>
   <para>
    For IPv6 new types and root zones for reverse lookups are defined:
   </para>
   <itemizedlist>
    <listitem>
    <para>
    AAAA and reverse IP6.INT: specified in <ulink url="http://rfc.net/rfc1886.html">RFC 1886 / DNS Extensions to support IP version 6</ulink>, usable since BIND version 4.9.6
    </para>
   </listitem>
    <listitem>
    <para>
    A6, DNAME and reverse IP6.ARPA: specified in <ulink url="http://rfc.net/rfc2874.html">RFC 2874 / DNS Extensions to Support IPv6 Address Aggregation and Renumbering</ulink>, usable since BIND 9
    </para>
   </listitem>
   </itemizedlist>
   <para>
    Perhaps filled later more content, for the meantime take a look at given RFCs and
   </para>
   <itemizedlist>
    <listitem>
    <para>
    AAAA and reverse IP6.INT: <ulink url="http://www.isi.edu/~bmanning/v6DNS.html">IPv6 DNS Setup Information</ulink>
    </para>
   </listitem>
    <listitem>
    <para>
    A6, DNAME and reverse IP6.ARPA: take a look into chapter 4 and 6 of the BIND 9 Administrator Reference Manual (ARM) distributed which the bind-package or get this here: <ulink url="http://www.nominum.com/resources/documentation/Bv9ARM.pdf">BIND version 9 ARM (PDF)</ulink>
    </para>
   </listitem>
   </itemizedlist>
   <para>
    Because IP6.INT is deprecated (but still in use), a DNS server which will support IPv6 information has to serve both reverse zones.
   </para>
   </sect2>
   <sect2>
    <title>
    Checking IPv6-enabled connect
   </title>
   <para>
    To check, whether BIND is listening on an IPv6 socket and serving data see following examples.
   </para>
    <sect3>
     <title>
     IPv6 connect, but denied by ACL
    </title>
    <para>
     Specifying a dedicated server for the query, an IPv6 connect can be forced:
    </para>
    <programlisting>
$ host -t aaaa www.6bone.net 3ffe:ffff:200:f101::1 
Using domain server: 
Name: 3ffe:ffff:200:f101::1 
Address: 3ffe:ffff:200:f101::1#53 
Aliases:

Host www.6bone.net. not found: 5(REFUSED)
    </programlisting>
    <para>
     Related log entry looks like following:
    </para>
    <programlisting>
Jan 3 12:43:32 gate named[12347]: client 3ffe:ffff:200:f101:212:34ff:fe12:3456#32770: query denied
    </programlisting>
    <para>
     If you see such entries in the log, check whether requests from this client should be allowed and perhaps review your ACL configuration.
    </para>
    </sect3>
    <sect3>
     <title>
     Successful IPv6 connect
    </title>
    <para>
     A successful IPv6 connect looks like following:
    </para>
    <programlisting>
$ host -t aaaa www.6bone.net 3ffe:ffff:200:f101::1 
Using domain server: 
Name: 3ffe:ffff:200:f101::1 
Address: 3ffe:ffff:200:f101::1#53 
Aliases:

www.6bone.net. is an alias for 6bone.net. 
6bone.net. has AAAA address 3ffe:b00:c18:1::10
    </programlisting>
    </sect3>
   </sect2>
  </sect1>
  <sect1 id="hints-daemons-xinetd">
   <title>
   Internet super daemon (xinetd)
  </title>
  <para>
   IPv6 is supported since version around 1.8.9. Always use newest available version. At least version 2.3.3 must be used, older versions can contain remote exploitable security holes.
  </para>
  <para>
   Some Linux distribution contain an extra package for the IPv6 enabled xinetd, some others start the IPv6-enabled xinetd if following variable is set: NETWORKING_IPV6=&quot;yes&quot;, mostly done by /etc/sysconfig/network (only valid for Red Hat like distributions).
  </para>
  <para>
   If you enable a built-in service like e.g. daytime by modifying the configuration file in /etc/xinetd.d/daytime like
  </para>
  <programlisting>
# diff -u /etc/xinetd.d/daytime.orig /etc/xinetd.d/daytime 
--- /etc/xinetd.d/daytime.orig Sun Dec 16 19:00:14 2001 
+++ /etc/xinetd.d/daytime Sun Dec 16 19:00:22 2001 
@@ -10,5 +10,5 @@ 
        protocol = tcp 
        user = root 
        wait = no 
-       disable = yes 
+       disable = no 
 }
  </programlisting>
  <para>
   After restarting the xinetd you should get a positive result like:
  </para>
  <programlisting>
# netstat -lnptu -A inet6 |grep "xinetd*" 
tcp 0 0 ::ffff:192.168.1.1:993  :::*  LISTEN  12345/xinetd-ipv6 
tcp 0 0 :::13                   :::*  LISTEN  12345/xinetd-ipv6<emphasis> <- service daytime/tcp</emphasis>
tcp 0 0 ::ffff:192.168.1.1:143  :::*  LISTEN  12345/xinetd-ipv6
  </programlisting>
  <para>
   Shown example also displays an IMAP and IMAP-SSL IPv4-only listening xinetd.
  </para>
  <para>
   Note: An IPv4-only xinetd won't start on an IPv6-enabled node and also the IPv6-enabled won't start on an IPv4-only node (will be hopefully fixed in the future).
  </para>
  </sect1>
  <sect1 id="hints-daemons-apache2">
   <title>
   Webserver Apache2 (httpd2)
  </title>
  <para>
   Apache web server supports IPv6 native by maintainers since 2.0.14. Available patches for the older 1.3.x series are not current and shouldn't be used in public environment, but available at <ulink url="ftp://ftp.kame.net/pub/kame/misc/">KAME / Misc</ulink>.
  </para>
   <sect2>
    <title>
    Listening on IPv6 addresses
   </title>
   <para>
    Note: virtual hosts on IPv6 addresses are broken in versions until 2.0.28 (a patch is available for 2.0.28).
   </para>
    <sect3>
     <title>
     Virtual host listen on an IPv6 address only
    </title>
    <programlisting>
Listen [3ffe:ffff:100::1]:80
&lt;VirtualHost [3ffe:ffff:100::1]:80>
        ServerName ipv6only.yourdomain.yourtopleveldomain
        # ...sure more config lines
&lt;/VirtualHost>
    </programlisting>
    </sect3>
    <sect3>
     <title>
     Virtual host listen on an IPv6 and on an IPv4 address
    </title>
    <programlisting>
Listen [3ffe:ffff:100::2]:80 
Listen 1.2.3.4:80
&lt;VirtualHost [3ffe:ffff:100::2]:80 1.2.3.4:80>
        ServerName ipv6andipv4.yourdomain.yourtopleveldomain
        # ...sure more config lines
&lt;/VirtualHost>
    </programlisting>
    <para>
     This should result after restart in e.g.
    </para>
    <programlisting>
# netstat -lnptu |grep "httpd2\W*$" 
tcp 0 0 1.2.3.4:80          0.0.0.0:* LISTEN 12345/httpd2 
tcp 0 0 3ffe:ffff:100::1:80 :::*      LISTEN 12345/httpd2 
tcp 0 0 3ffe:ffff:100::2:80 :::*      LISTEN 12345/httpd2
    </programlisting>
    <para>
     For simple tests use the telnet example already shown.
    </para>
    </sect3>
   </sect2>
  </sect1>
  <sect1 id="hints-daemons-radvd">
   <title>
   Router Advertisement Daemon (radvd)
  </title>
  <para>
   The router advertisement daemon is very useful on a LAN, if clients should be auto-configured. The daemon itself should run a Linux router (not necessary the default IPv4 gateway). 
  </para>
  <para>
   You can specify some information and flags which should be contained in the advertisement. Common used are
  </para>
  <itemizedlist>
   <listitem>
   <para>
   Prefix (needed)
   </para>
  </listitem>
   <listitem>
   <para>
   Lifetime of the prefix
   </para>
  </listitem>
   <listitem>
   <para>
   Frequency of sending advertisements (optional)
   </para>
  </listitem>
  </itemizedlist>
  <para>
   After a proper configuration, the daemon sends advertisements through specified interfaces and clients are hopefully receive them and auto-magically configure addresses with received prefix and the default route.
  </para>
   <sect2>
    <title>
    Configuring radvd
   </title>
    <sect3>
     <title>
     Simple configuration
    </title>
    <para>
     Radvd's config file is normally /etc/radvd.conf. An simple example looks like following:
    </para>
    <programlisting>
interface eth0 { 
        AdvSendAdvert on;
        MinRtrAdvInterval 3; 
        MaxRtrAdvInterval 10;
        prefix 3ffe:ffff:0100:f101::/64 { 
                AdvOnLink on; 
                AdvAutonomous on; 
                AdvRouterAddr on; 
        };
};
    </programlisting>
    <para>
     This results on client side in
    </para>
    <programlisting>
# ip -6 addr show eth0 
3: eth0: &lt;BROADCAST,MULTICAST,UP> mtu 1500 qdisc pfifo_fast qlen 100 
    inet6 3ffe:ffff:100:f101:2e0:12ff:fe34:1234/64 scope global dynamic 
       valid_lft 2591992sec preferred_lft 604792sec 
    inet6 fe80::2e0:12ff:fe34:1234/10 scope link
    </programlisting>
    <para>
     Because no lifetime was defined, a very high value was used.
    </para>
    </sect3>
    <sect3>
     <title>
     Special 6to4 configuration
    </title>
    <para>
     Version since 0.6.2pl3 support the automatic (re)-generation of the prefix depending on an IPv4 address of a specified interface. This can be used to distribute advertisements in a LAN after the 6to4 tunneling has changed. Mostly used behind a dynamic dial-on-demand Linux router. Because of the sure shorter lifetime of such prefix (after each dial-up, another prefix is valid), the lifetime configured to minimal values:
    </para>
    <programlisting>
interface eth0 { 
        AdvSendAdvert on;
        MinRtrAdvInterval 3; 
        MaxRtrAdvInterval 10;
        prefix 0:0:0:f101::/64 { 
                AdvOnLink off; 
                AdvAutonomous on; 
                AdvRouterAddr on; 
                Base6to4Interface ppp0;
                AdvPreferredLifetime 20; 
                AdvValidLifetime 30;
        };
};
    </programlisting>
    <para>
     This results on client side in (assuming, ppp0 has currently 1.2.3.4 as local IPv4 address):
    </para>
    <programlisting>
# ip -6 addr show eth0 
3: eth0: &lt;BROADCAST,MULTICAST,UP> mtu 1500 qdisc pfifo_fast qlen 100 
   inet6 2002:0102:0304:f101:2e0:12ff:fe34:1234/64 scope global dynamic 
      valid_lft 22sec preferred_lft 12sec
   inet6 fe80::2e0:12ff:fe34:1234/10 scope link
    </programlisting>
    <para>
     Because a small lifetime was defined, such prefix will be thrown away quickly, if no related advertisement was received.
    </para>
    </sect3>
   </sect2>
   <sect2>
    <title>
    Debugging
   </title>
   <para>
    A program called &ldquo;radvdump&rdquo; can help you looking into sent or received advertisements. Simple to use:
   </para>
   <programlisting>
# radvdump 
Router advertisement from fe80::280:c8ff:feb9:cef9 (hoplimit 255) 
        AdvCurHopLimit: 64 
        AdvManagedFlag: off 
        AdvOtherConfigFlag: off 
        AdvHomeAgentFlag: off 
        AdvReachableTime: 0 
        AdvRetransTimer: 0 
        Prefix 2002:0102:0304:f101::/64 
                AdvValidLifetime: 30 
                AdvPreferredLifetime: 20 
                AdvOnLink: off 
                AdvAutonomous: on 
                AdvRouterAddr: on 
        Prefix 3ffe:ffff:100:f101::/64 
                AdvValidLifetime: 2592000 
                AdvPreferredLifetime: 604800 
                AdvOnLink: on 
                AdvAutonomous: on 
                AdvRouterAddr: on 
        AdvSourceLLAddress: 00 80 12 34 56 78
   </programlisting>
   <para>
    Output shows you each advertisement package in readable format. You should see your configured values here again, if not, perhaps it's not your radvd which sends the advertisement...look for another router on the link (and take the LLAddress, which is the MAC address for tracing).
   </para>
   </sect2>
  </sect1>
  <sect1 id="hints-daemons-tcpwrapper">
   <title>
   tcp_wrapper
  </title>
  <para>
   tcp_wrapper is a library which can help you to protect service against misuse.
  </para>
   <sect2>
    <title>
    Filtering capabilities
   </title>
   <para>
    You can use tcp_wrapper for
   </para>
   <itemizedlist>
    <listitem>
    <para>
    Filtering against source addresses (IPv4 or IPv6)
    </para>
   </listitem>
    <listitem>
    <para>
    Filtering against users (requires a running ident daemon on the client)
    </para>
   </listitem>
   </itemizedlist>
   </sect2>
   <sect2>
    <title>
    Which program uses tcp_wrapper
   </title>
   <para>
    Following are known:
   </para>
   <itemizedlist>
    <listitem>
    <para>
    Each service which is called by xinetd (if xinetd is compiled using tcp_wrapper library)
    </para>
   </listitem>
    <listitem>
    <para>
    sshd (if compiled using tcp_wrapper)
    </para>
   </listitem>
   </itemizedlist>
   </sect2>
   <sect2>
    <title>
    Usage
   </title>
   <para>
    tcp_wrapper is controlled by two files name /etc/hosts.allow and /etc/hosts.deny. For more information see
   </para>
   <programlisting>
$ man hosts.all
   </programlisting>
    <sect3>
     <title>
     Example for /etc/hosts.allow
    </title>
    <para>
     In this file, each service which should be positive filtered (means connects are accepted) need a line.
    </para>
    <programlisting>
sshd:           1.2.3. [3ffe:ffff:100:200::]/64
daytime-stream: 1.2.3. [3ffe:ffff:100:200::]/64
    </programlisting>
    </sect3>
    <sect3>
     <title>
     Example for /etc/hosts.deny
    </title>
    <para>
     This file contains all negative filter entries and should normally deny the rest using
    </para>
    <programlisting>
ALL: ALL
    </programlisting>
    <para>
     If this node is a more sensible one you can replace the standard line above with this one, but this can cause a DoS attack (load of mailer and spool directory), if too many connects were made in short time. Perhaps a logwatch is better for such issues.
    </para>
    <programlisting>
ALL: ALL: spawn (echo "Attempt from %h %a to %d at `date`" | tee -a /var/log/tcp.deny.log | mail root@localhost)
    </programlisting>
    </sect3>
   </sect2>
   <sect2>
    <title>
    Logging
   </title>
   <para>
    Depending on the entry in the syslog daemon configuration file /etc/syslog.conf the tcp_wrapper logs normally into /var/log/secure.
   </para>
    <sect3>
     <title>
     Refused connection
    </title>
    <para>
     A refused connection via IPv4 to an xinetd covered daytime service produces a line like following example
    </para>
    <programlisting>
Jan 2 20:40:44 gate xinetd-ipv6[12346]: FAIL: daytime-stream libwrap from=::ffff:1.2.3.4
Jan 2 20:32:06 gate xinetd-ipv6[12346]: FAIL: daytime-stream libwrap from=3ffe:ffff:100:200::212:34ff:fe12:3456
    </programlisting>
    <para>
     A refused connection via IPv4 to an dual-listen sshd produces a line like following example
    </para>
    <programlisting>
Jan 2 20:24:17 gate sshd[12345]: refused connect from ::ffff:1.2.3.4 (::ffff:1.2.3.4)
Jan 2 20:39:33 gate sshd[12345]: refused connect from 3ffe:ffff:100:200::212:34ff:fe12:3456 (3ffe:ffff:100:200::212:34ff:fe12:3456)
    </programlisting>
    </sect3>
    <sect3>
     <title>
     Permitted connection
    </title>
    <para>
     A permitted connection via IPv4 to an xinetd covered daytime service produces a line like following example
    </para>
    <programlisting>
Jan 2 20:37:50 gate xinetd-ipv6[12346]: START: daytime-stream pid=0 from=::ffff:1.2.3.4 
Jan 2 20:37:56 gate xinetd-ipv6[12346]: START: daytime-stream pid=0 from=3ffe:ffff:100:200::212:34ff:fe12:3456
    </programlisting>
    <para>
     A permitted connection via IPv4 to an dual-listen sshd produces a line like following example
    </para>
    <programlisting>
Jan 2 20:43:10 gate sshd[21975]: Accepted password for user from ::ffff:1.2.3.4 port 33381 ssh2
Jan 2 20:42:19 gate sshd[12345]: Accepted password for user from 3ffe:ffff:100:200::212:34ff:fe12:3456 port 33380 ssh2
    </programlisting>
    </sect3>
   </sect2>
  </sect1>
 </chapter>
 <chapter>
  <title>
  Programming (using API)
 </title>
 <para>
  I have no experience in IPv6 programming, perhaps this chapter will be filled by others or moved away to another HOWTO.
 </para>
 </chapter>
 <chapter>
  <title>
  Interoperability
 </title>
 <para>
  There are some projects around the world which checks the interoperability of different operating systems regarding the implementation of IPv6 features. Here some URLs:
 </para>
 <itemizedlist>
  <listitem>
  <para>
  <ulink url="http://www.tahi.org/">TAHI Project</ulink>
  </para>
 </listitem>
 </itemizedlist>
 <para>
  More coming next...
 </para>
 </chapter>
 <chapter id="chapter-information">
  <title>
  Further information and URLs
 </title>
 <para>
  to be filled. See also <ulink url="http://www.bieringer.de/linux/IPv6/IPv6-HOWTO/IPv6-HOWTO-1.html#ListOfLinks">IPv6 & Linux HowTo / List Of Links</ulink>.
 </para>
  <sect1>
   <title>
   Paper printed books
  </title>
  <para>
   See following URL for more: <ulink url="http://www.switch.ch/lan/ipv6/references.html">SWITCH IPv6 Pilot / References</ulink>
  </para>
  </sect1>
  <sect1>
   <title>
   On-line information
  </title>
  <para>
   To be filled
  </para>
  <itemizedlist>
   <listitem>
   <para>
   <ulink url="http://www.ietf.org/ids.by.wg/ipv6.html">Current IEFT drafts of IP Version 6 Working Group (ipv6)</ulink>
   </para>
  </listitem>
   <listitem>
   <para>
   IPv6 protocol header <ulink url="http://www.networksorcery.com/enp/protocol/ipv6.htm">Network Sorcery / IPv6, Internet Protocol version 6</ulink>
   </para>
  </listitem>
  </itemizedlist>
  <para>
   See following URL for more: <ulink url="http://www.switch.ch/lan/ipv6/references.html">SWITCH IPv6 Pilot / References</ulink>
  </para>
  </sect1>
  <sect1>
   <title>
   On-line test tools
  </title>
  <itemizedlist>
   <listitem>
   <para>
   finger, nslookup, ping, traceroute, whois: <ulink url="http://www.cs-ipv6.lancs.ac.uk/ipv6/testing/">tUK IPv6 Resource Centre / The test page</ulink>
   </para>
  </listitem>
   <listitem>
   <para>
   ping, traceroute, tracepath, 6bone registry, DNS: <ulink url="http://www.join.uni-muenster.de/lab/testtools.html">JOIN / Testtools</ulink> (German language only, but should be no problem for non German speakers)
   </para>
  </listitem>
  </itemizedlist>
  </sect1>
 </chapter>
 <chapter>
  <title>
  The End / Revision history
 </title>
 <para>
  Thanks for reading. Hope it helps!
 </para>
  <sect1 id="revision-history">
   <title>
   Revision history
  </title>
   <sect2>
    <title>
    Releases 0.x
   </title>
   <variablelist>
    <varlistentry>
    <term>
    0.14
</term><listitem><para>2002-01-14/PB: Minor review at all, new chapter &ldquo;debugging&rdquo;, review &ldquo;addresses&rdquo;, spell checking, grammar checking (from beginning to 3.4.1) by Martin Krafft, add tcpdump examples, copy firewalling/netfilter6 from IPv6+Linux-HowTo, minor enhancements
    </para>
   </listitem>
   </varlistentry>
    <varlistentry>
    <term>
    0.13
</term><listitem><para>2002-01-05/PB: Add example BIND9/host, move revision history to end of document, minor extensions
    </para>
   </listitem>
   </varlistentry>
    <varlistentry>
    <term>
    0.12
</term><listitem><para>2002-01-03/PB: Merge review of David Ranch
    </para>
   </listitem>
   </varlistentry>
    <varlistentry>
    <term>
    0.11
</term><listitem><para>2002-01-02/PB: Spell checking and merge review of Pekka Savola
    </para>
   </listitem>
   </varlistentry>
    <varlistentry>
    <term>
    0.10
</term><listitem><para>2002-01-02/PB: First public release of chapter 1
    </para>
   </listitem>
   </varlistentry>
   </variablelist>
   </sect2>
  </sect1>
 </chapter>


</book>
