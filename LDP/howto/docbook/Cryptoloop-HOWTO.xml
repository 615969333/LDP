<?xml version="1.0" encoding="ISO-8859-1"?>

<!DOCTYPE article PUBLIC "-//OASIS//DTD DocBook XML V4.2//EN" "http://www.oasis-open.org/docbook/xml/4.2/docbookx.dtd" []>

<article class="whitepaper" id="Cryptoloop-HOWTO">

<articleinfo>

    <title>Cryptoloop HOWTO</title>

    <author>
        <firstname>Ralf</firstname>
        <surname>H&ouml;lzer</surname>
	<affiliation>
            <address><email>ralf@well.com</email></address>
        </affiliation>
    </author>

    <pubdate>2004-01-15</pubdate>

    <revhistory>
        <revision>
	    <revnumber>1.0</revnumber>
	    <date>2004-01-17</date>
	    <authorinitials>rh</authorinitials>
	    <revremark>Initial release, reviewed by TM at LDP.</revremark>
	</revision>

        <revision>
            <revnumber>v0.9</revnumber>
            <date>2004-01-15</date>
            <authorinitials>rh</authorinitials>
            <revremark>Updated and converted to DocBook XML.</revremark>
        </revision>

    </revhistory>

    <abstract>
        <para>
        This document explains how to create encrypted file systems using the Cryptoloop functionality. Cryptoloop is part of the CryptoAPI in the 2.6 Linux kernel series.
        </para>
    </abstract>

</articleinfo>

<sect1 id="about">
    <title>About this document</title>

        <para>
  This HOWTO describes how to use the Cryptoloop loop device encryption in the 2.6 Linux kernel series. Cryptoloop
  makes it possible to create encrypted file systems within a partition or another file in the file system. These encrypted files
  can the be moved to a CD, DVD, USB memory stick, etc. Cryptoloop makes
  use of the loop device. This device is a pseudo-device which serves as a <quote>loop</quote> through which each call to a the file system
  has to pass. This way, data can be processed in order to encrypt and decrypt it. Since kernel 2.6, the
  Crypto API has been integrated into the main kernel, and setting up an encrypted file system has become much easier. No
  additional kernel patches are required. An update of some userspace utilities is necessary. Unfortunately, the
  use of Cryptoloop is not very well-documented so far. This HOWTO is an attempt to make it easy everyone
  to create an encrypted file system using the standard Cryptoloop functionality.
        </para>

<!-- Legal Sections -->
<sect2 id="copyright">
<title>Copyright and License</title>

<para>
This document, <emphasis>Cryptoloop HOWTO</emphasis>,
is copyrighted &copy; 2004 by <emphasis>Ralf H&ouml;lzer</emphasis>.
Permission is granted to copy, distribute and/or modify this
document under the terms of the GNU Free Documentation
License, Version 1.1 or any later version published
by the Free Software Foundation; with no Invariant Sections,
with no Front-Cover Texts, and with no Back-Cover Texts.
A copy of the license is available at
<ulink url="http://www.gnu.org/copyleft/fdl.html">
http://www.gnu.org/copyleft/fdl.html</ulink>.
</para>
<para>
Linux is a registered trademark of Linus Torvalds.
</para>
</sect2>


<sect2 id="disclaimer">
<title>Disclaimer</title>
<para>
No liability for the contents of this document can be accepted.
Use the concepts, examples and information at your own risk.
There may be errors and inaccuracies, that could be damaging to
your system.  Proceed with caution, and although this is highly
unlikely, the author(s) do not take any responsibility.
</para>

<para>
All copyrights are held by their by their respective owners,
unless specifically noted otherwise.  Use of a term in this
document should not be regarded as affecting the validity of any
trademark or service mark.  Naming of particular products or
brands should not be seen as endorsements.
</para>
</sect2>

<sect2 id="credits">
<title>Credits / Contributors</title>

<para>
I'd like to thank the following people who helped me improve this HOWTO: 
</para>
<itemizedlist>
<listitem> 
<para>Dennis Kaledin</para>
</listitem>
<listitem> 
<para>Binh Nguyen</para>
</listitem>
<listitem> 
<para>David Lawyer</para>
</listitem>
<listitem> 
<para>Tabatha Marshall</para>
</listitem>
<listitem> 
<para>Kian Spongsveen</para>
</listitem>
</itemizedlist>
</sect2>

<!-- Feedback -->
<sect2 id="feedback">
<title>Feedback</title>
<para>
Feedback is most certainly welcome for this document. Send
your additions, comments and criticisms to the following
email address : <email>rholzer@cmu.edu</email>.
</para>
</sect2>

</sect1>


<sect1 id="cryptoloop-introduction">
    <title>Introduction</title>
    <para>
    There are currently a few alternatives to using Cryptoloop. Loop-AES (<ulink url="http://loop-aes.sourceforge.net">http://loop-aes.sourceforge.net</ulink>)
    is probably the most well-known. It provides very similar functionality to Cryptoloop, but requires kernel patches. Aes-loop
    is currently more mature than Cryptoloop and some argue it is also faster because it uses a highly optimized assembler implementation for
    AES. While this may be true, Cryptoloop is very fast. I have not noticed any significant speed differences between a Cryptoloop-encrypted
    partition and a non-encrypted partition. I do not know of any statistics about these performance differences. Unless I/O performance is
    extremely important to you, Cryptoloop should do just fine.
    </para>
    <para>
    The Cryptoloop functionality in the standard kernel provides a stable and clean implementation without the need for extra patches. Since it
    is still fairly new, it may not have gotten the necessary amount of review in terms of security. You have to decide for yourself what
    is suitable for you.
    </para>
    <para>
    There are other tools which allow you to create an encrypted file system. BestCrypt is a commercial product from Jetico. It allows you to
    create encrypted containers and has a large choice of ciphers. It also offers some nifty features such as hidden containers. It is available
    for Windows and Linux, which makes it suitable for interchanging encrypted containers between Windows and Linux. Currently there are no
    modules yet that work with a 2.6 kernel. Cryptoloop can also create containers that can be moved around, by creating the encrypted file system
    within a file as described below. I don't know of a way to access the Cryptoloop-encrypted files from other operating systems such as Windows. In
    this case, BestCrypt may be your only choice.
    </para>
    <para>
    There are other commercial disk encryption tools such as PGP disk, but to my knowledge there is no Linux support for them.
    </para>
</sect1>

<sect1 id="kernel-configuration">
    <title>Configuring the kernel</title>
    <para>
    In order to use Cryptoloop, you need to activate a few kernel options. You have the option to either compile these
    requirements as modules or compile them directly into the kernel. The following steps enable them as modules.
    If you are not familiar with building a 2.6 kernel, you should refer to the <ulink url="http://www.linuxdocs.org/HOWTOs/Kernel-HOWTO.html">Linux Kernel HOWTO</ulink>. The following
    instructions just give the minimal steps.
    </para>

<orderedlist>
      <listitem>
	<para>Go to the directory that holds your kernel source tree (usually <filename>/usr/src/linux/</filename>) and start the configuration:</para>
	<screen>make menuconfig</screen>
      </listitem>

      <listitem>
	<para>Enable general loop device support. Active <quote>Loopback device support</quote> under:</para>
	<screen>Device Drivers -> Block Devices -> Loopback device support</screen>
      </listitem>

      <listitem>
	<para>Enable Cryptoloop support in the same section. The option should show up as soon as you enable general loopback support.</para>
      </listitem>

      <listitem>
	<para>Enable the cryptographic API by going to <quote>Cryptographic options</quote> from the main menu. You can safely enable most algorithms here.  I would recommend that you enable the following:</para>

	<screen>
    -- Cryptographic API
     &lt;*&gt;   HMAC support  
     &lt; &gt;   Null algorithms
     &lt;*&gt;   MD4 digest algorithm
     &lt;*&gt;   MD5 digest algorithm
     &lt;*&gt;   SHA1 digest algorithm
     &lt;*&gt;   SHA256 digest algorithm
     &lt;*&gt;   SHA384 and SHA512 digest algorithms
     &lt;*&gt;   DES and Triple DES EDE cipher algorithms
     &lt;*&gt;   Blowfish cipher algorithm
     &lt;*&gt;   Twofish cipher algorithm
     &lt;*&gt;   Serpent cipher algorithm 
     &lt;*&gt;   AES cipher algorithms
     &lt;*&gt;   CAST5 (CAST-128) cipher algorithm
     &lt;*&gt;   CAST6 (CAST-256) cipher algorithm 
     &lt;*&gt;   Deflate compression algorithm
     &lt; &gt;   Testing module
        </screen>

	<para>
    If you decide to make them as modules, make sure you load the appropriate modules (cryptoloop, aes, etc.) at startup before you continue.</para>
      </listitem>

      <listitem>
	<para>Make your kernel and modules and install them. For example, if you are using lilo on a x86 machine, this can be done like this:</para>

	<screen>
     make
     make modules_install
     cp arch/i386/boot/bzImage /boot/kernel-2.6.1
     lilo
        </screen>
      </listitem>

      <listitem>
	<para>Load the required modules at startup. This is handled differently on the various distributions. For example, on Gentoo these modules can be added to <filename>/etc/modules.autoload/kernel-2.6</filename>. If you have compiled Cryptoloop as a module, it will have to be loaded first. It will automatically load the basic loop device module as well. You can manually load the module with:</para>

	<screen>modprobe cryptoloop</screen>
      </listitem>
    </orderedlist>
</sect1>


<sect1 id="userspace-tools">
    <title>Getting the user space tools</title>

    <para>
    The Cryptoloop driver requires updated userspace tools to actually create and mount the encrypted
    file system. These tools are included in the latest util-linux package. The minimum version you
    need is 2.12. The entire util-linux package can be obtained from <ulink url="http://www.kernel.org/pub/linux/utils/util-linux/">http://www.kernel.org/pub/linux/utils/util-linux/</ulink>.
    </para>
 
    <para> 
     This package provides the updated <command>losetup</command> and <command>mount</command> commands.
    </para>

</sect1>


<sect1 id="loopdevice-setup">
    <title>Setting up the loop device</title>

<para>Cryptoloop can be used either on a file or an entire file system. The following describes how to
set it up on a particular partition. This partition can be any partition you like; the following
example uses <filename>/dev/sda1</filename>. I have chosen to use AES as a cipher, but you can substitute any cipher
you like that has been enabled in the kernel. You can get a list of the algorithms supported by
your currently running kernel by looking into <filename>/proc/crypto</filename>. An excellent resource, discussing the
different cryptographic algorithms, are Bruce Schneier's books, Applied Cryptography and Practical
Cryptography.
</para>

    <orderedlist>
      <listitem>
	<para>It is recommended that you format your partition and fill it with random data before you create the encrypted file system on it. This will make it harder for an attacker to detect patterns in your encrypted partition.
</para>

	<para><emphasis>WARNING!</emphasis> </para>

	<para>Be careful what you type here for your partition. If you do make a mistake, you can easily overwrite the wrong partition with random garbage! </para>

	<para>Filling a partition with random data can be done as follows:</para>

<screen>dd if=/dev/urandom of=/dev/sda1 bs=1M
</screen>

<para>You may get an error message that the device is full. You can ignore it.</para>
      </listitem>

      <listitem>
	<para>Select a cipher and key size. A list of ciphers supported by your kernel can be obtained from <filename>/proc/crypto</filename>. I recommend that you use AES with a 256-bit key.</para>
      </listitem>

      <listitem>
	<para>Set up the loop device. This is done using the <command>losetup</command> command from the util-linux package. The following command creates an encrypted filesystem using the loop device 0 using the AES cipher with a 256-bit key on the device <filename>/dev/sda1</filename>:</para>

<screen>losetup -e aes-256 /dev/loop0 /dev/sda1
</screen>

	<para>The command prompts for a password. Select a strong password and try to remember it without having to stick a Post-It note to your monitor. There is one big downside to using Cryptoloop. Since the password is hashed to create the encryption key, it is not easy to change the password later on. The most straight-forward way of changing the password is to create a new encrypted partition or file and move all data into it. For this reason, make sure you select a strong password from the start.</para>
      </listitem>

      <listitem>
	<para>Create a file system. You can chose whatever file system you like. The following creates an ext3 file system using the loop device:</para>

<screen>mkfs.ext3 /dev/loop0
</screen>
      </listitem>

      <listitem>
	<para>Mount the encrypted file system. First you need to create a mount point, such as <filename>/mnt/crypto</filename>:</para>

<screen>mkdir /mnt/crypto</screen>

	<para>Then you need to mount the file system. At this stage you need to tell mount explicitly which loop device to use:</para>

<screen>mount -t ext3 /dev/loop0 /mnt/crypto
</screen>
      </listitem>

      <listitem>
	<para>You can now play with your encrypted file system until you are bored.</para>
      </listitem>

      <listitem>
	<para>Unmount the file system. After you are done playing, unmount the filesystem:</para>

<screen>umount /mnt/crypto</screen>
      </listitem>

      <listitem>
	<para>Detach the loop device. The loop device is still attached to your partition. Detach it with:</para>

<screen>losetup -d /dev/loop0</screen>
      </listitem>
    </orderedlist>
</sect1>


<sect1 id="mounting-filesystem">
    <title>Mounting the encrypted file system</title>

<para>
For all operations on the Cryptoloop device, it is important that the necessary modules are loaded. You
need to load at least the Cryptoloop module and the modules for each cipher with <command>modprobe</command>. If the features
are compiled directly into the kernel, this is not necessary.
</para>

<para>In order to mount the encrypted file system created above, you can use the standard mount command
from util-linux:
</para>

<screen>mount -t ext3 /dev/sda1 /mnt/crypto/ -oencryption=aes-256</screen>


<para>You will be prompted for the password and the file system will be mounted just as any other. Since the encryption option
implies that this is a Cryptoloop filesystem, it will automatically pick an available loopback device.
</para>

<para>When you are done, unmount it with:
</para>

<screen>umount /mnt/crypto</screen>

<para>You can add the following line to <filename>/etc/fstab</filename>:
</para>

<screen>/dev/sda1               /mnt/crypto     ext3            noauto,encryption=aes-256       0 0</screen>

<para>Now you can simply mount the device with:
</para>

<screen>mount /mnt/crypto</screen>

<para>That's it. Have fun.</para>

</sect1>


<sect1 id="filebased">
<title>Using a file instead of a partition</title>

<para>
It is just as easy to create an encrypted file system within a file on another file system. This is especially useful
if you want to back up this file by burning it to a DVD, etc. You can then easily move the file around to other
machines as well.
</para>

<para>To initially create a 100MB file containing random data use the following command:
</para>

<screen>dd if=/dev/urandom of=/mystuff.aes bs=1k count=100000</screen>

<para>
If you want to change the size of the file, change the <varname>count</varname> value accordingly. The above command creates 100000 blocks
of 1k in size, but you can change this to whatever you like. Just make sure it is not too small to hold the file system you
chose. You can choose any file name and path you want instead of <filename>/mystuff.aes</filename> as long as there's enough space on the partition.
</para>

<para>You can then create the encrypted file system within this file, similar to the way it is done above:
</para>

<screen>losetup -e aes-256 /dev/loop0 /mystuff.aes</screen>

<para>Now you can create the file system:</para>

<screen>
mkfs.ext3 /dev/loop0
</screen>

<para>
and mount it:
</para>

<screen>
mount -t ext3 /dev/loop0 /mnt/crypto
</screen>

<para>
Finally, unmount and detach the loop device:
</para>

<screen>
umount /mnt/crypto
losetup -d /dev/loop0
</screen>

<para>
You can then mount the file system later on as follows:
</para>

<screen>mount /mystuff.aes /mnt/crypto -oencryption=aes-256</screen>

<para>If you want to move the file or burn it to a CD or DVD, make sure you <command>unmount</command> it first.
</para>

</sect1>



</article>


