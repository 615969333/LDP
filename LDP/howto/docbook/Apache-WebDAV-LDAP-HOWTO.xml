<?xml version="1.0" encoding="ISO-8859-1"?>

<!DOCTYPE article PUBLIC "-//OASIS//DTD DocBook XML V4.1.2//EN"
     "http://docbook.org/xml/4.1.2/docbookx.dtd" []>

<article>

<articleinfo>

   <title>Apache based WebDAV Server with LDAP and SSL </title>

   <author>
      <firstname>Saqib</firstname>
      <surname>Ali</surname>
      <affiliation>
         <address>
            <email>saqib@seagate.com</email>
         </address>
      </affiliation>
   </author>



   <revhistory>

      <revision>
       <revnumber>v4.0</revnumber>
         <date>2002-06-29</date>
         <authorinitials>sa</authorinitials>
          <revremark>
               Updated the HOWTO for Apache 2.0. Also the source is in XML
         </revremark>
      </revision>


      <revision>
       <revnumber>v3.4</revnumber>
         <date>2002-06-29</date>
         <authorinitials>sa</authorinitials>
          <revremark>
               Added the section "How to generate a CSR"  
         </revremark>
      </revision>

      <revision>
       <revnumber>v3.3</revnumber>
         <date>2002-04-14</date>
         <authorinitials>sa</authorinitials>
          <revremark>
		Add the section of DAV server management.
         </revremark>
      </revision>



   </revhistory>

   <abstract>
      <para>.This document is an HOWTO on installing a Apache based WebDAV server with LDAP for authentication and SSL encryption.</para> 
   </abstract>
</articleinfo>

<sect1 id="intro"><title>Introduction</title>
<para>The Objective of this document in to Setup a Apache + mySQL + PHP + WebDAV based Web Application Server, that uses LDAP for Authentication. The documentation will also provide details on the encrypting LDAP transactions.</para>
<note><title>Note:</title><para>If you encounter any problems installing Apache or any of the modules please feel free to contact me @ <email>saqib@seagate.com</email></para></note>

<sect2><title>About this document</title>
<para>This document was originally written in 2001. Since then many updates and new additions have been made. Thanks to all the people who submitted updates and corrections.</para>
<para>The XML source of this document is available at <ulink url="http://www.xml-dev.com:8080/cocoon/mount/docbook/Apache-WebDAV-LDAP-HOWTO.xml">http://www.xml-dev.com:8080/cocoon/mount/docbook/Apache-WebDAV-LDAP-HOWTO.xml</ulink>.</para>
<para>The latest version of the document is available at <ulink url="http://www.xml-dev.com:8080/cocoon/mount/docbook/Apache-WebDAV-LDAP-HOWTO.html">http://www.xml-dev.com:8080/cocoon/mount/docbook/Apache-WebDAV-LDAP-HOWTO.html</ulink>.</para>

</sect2>
<sect2><title>Contributions to the document</title>
<para>If you like to contribute to the HOWTO, you can d/l the XML source from <ulink url="http://www.xml-dev.com:8080/cocoon/mount/docbook/Apache-WebDAV-LDAP-HOWTO.xml">http://www.xml-dev.com:8080/cocoon/mount/docbook/Apache-WebDAV-LDAP-HOWTO.xml</ulink> , and send in the updated source to saqib@seagate.com ALONG WITH YOUR NAME IN THE LIST OF AUTHORS AND REVISION HISTORY :). That makes it easier for me contact the person if there are any updates/corrections. Thanks.
</para>
</sect2>

<sect2><title>What is Apache?</title>
<para>The Apache HTTP Server is an open-source HTTP server for modern operating systems including UNIX and Windows NT. It provides HTTP services in sync with the current HTTP standards. </para>
<para>Thei Apache WebServer is available for free download from <ulink url="http://httpd.apache.org/">http://httpd.apache.org/</ulink></para>
</sect2>



<sect2><title>What is WebDAV?</title>
<para> WebDAV stands for Web enabled Distributed Authoring and Versioning. It provides a collaborative environment for users to edit/manage files on web-servers. Technically DAV is an extension to the http protocol.</para>
<para>Here is a brief description of the extensions provided by DAV:</para>
<para><emphasis role="bold">Overwrite Protection:</emphasis> Lock and Unlock mechanism to prevent the "lost update problem". DAV protocol support both shared and exclusive locks.</para>
<para><emphasis role="bold">Properties:</emphasis> Metadata (title, subject, creater, etc)</para>
<para><emphasis role="bold">Name-space management:</emphasis> Copy, Rename, Move and Deletion of files</para>
<para><emphasis role="bold">Access Control:</emphasis> Limit access to various resources. Currently DAV assumes access control is already in place, and does not provide strong authentication mechanism.</para>
<para><emphasis role="bold">Versioning:</emphasis> Revision control for the documents. Versioning is not implemented yet.</para>
</sect2>

<sect2><title>What is PHP?</title>
<para>PHP (recursive acronym for "PHP: Hypertext Preprocessor") is a widely-used Open Source general-purpose scripting language that is especially suited for Web development and can be embedded into HTML.</para>
<para>PHP is available from <ulink url="http://www.php.net">http://www.php.net</ulink></para>
</sect2>

<sect2><title>What is mySQL?</title>
<para>MySQL, the most popular Open Source SQL database, is developed, distributed, and supported by MySQL AB</para>
<para>mySQL DB Engine can be downloaded from <ulink url="http://www.mysql.com/">http://www.mysql.com/</ulink></para>
</sect2>

<sect2><title>What do we need?</title>
<para>
The tools needed to achieve this objective are:</para>

<orderedlist numeration="lowerroman">
	<listitem>C Compiler e.g. GCC</listitem>
	<listitem>Apache 2 Web Server</listitem>
	<listitem>LDAP Module for Apache</listitem>
	<listitem>iPlanet LDAP lib files</listitem>
	<listitem>SSL engine</listitem>
	<listitem>PHP</listitem>
	<listitem>mySQL DB Engine</listitem>
</orderedlist>

<note><title>Note:</title><para>All of these packages are free and are available for download on the net.</para></note>

</sect2>

<sect2><title>Assumptions</title>
<para> This document assumes that you have the following already installed on your system.</para>
<orderedlist numeration="lowerroman">
	<listitem>gzip or gunzip - available from <ulink url="http://www.gnu.org">http://www.gnu.org</ulink></listitem>
 	<listitem>gcc and GNU make - available from <ulink url="http://www.gnu.org">http://www.gnu.org</ulink></listitem>
</orderedlist>
</sect2>
</sect1>

<sect1><title>Requirements</title>
<para>You'll have to download and compile several packages. This document will explain the compilation process, but you should be fimiliar with installing from source code.</para>
<sect2><title>Basics</title>
<para>You will need a machine running Solaris / Linux and GCC Compiler. GNU gnzip and GNU tar is also needed.</para>
</sect2>
<sect2><title>Apache 2.0.46</title>
<para>Apache is the HTTP server, it will be used to run the Web Application Server. Please download the Apache 2.0.46 source code from <ulink url="http://www.apache.org/dist/httpd/">http://www.apache.org/dist/httpd/</ulink>.</para>
</sect2>
<sect2><title>OpenSSL</title>
<para>You will need to download the OpenSSL from <ulink url="http://www.openssl.org/source/">http://www.openssl.org/source/</ulink> . Please download the latest version. OpenSSL installation will be used for SSL libraries for compiling mod_ssl with Apache, and for managing SSL certificates on the WebServer. Please download the OpenSSL source code gzipped file into /tmp/downloads</para>
</sect2>
<sect2><title>iPlanet LDAP Library</title>
<para>
Download the iPlanet LDAP SDK from <ulink url="http://wwws.sun.com/software/download/products/3ec28dbd.html">http://wwws.sun.com/software/download/products/3ec28dbd.html</ulink>. We will use iPlanet LDAP SDK, because it includes libraries for ldaps:// (LDAP over SSL)
</para>
</sect2>
<sect2><title>mod_auth_ldap</title>
<para>mod_auth_ldap will be used for compiling LDAP support into Apache. Please download mod_auth_ldap from <ulink url="http://www.muquit.com/muquit/software/mod_auth_ldap/mod_auth_ldap_apache2.html">http://www.muquit.com/muquit/software/mod_auth_ldap/mod_auth_ldap_apache2.html</ulink>
</para>
</sect2>
<sect2><title>mySQL DB Engine</title>
<para>Download the appropriate mySQL build for your platform from <ulink url="http://www.mysql.com/downloads/index.html">http://www.mysql.com/downloads/index.html</ulink></para>
</sect2>

<sect2><title>PHP</title>
<para>Download the PHP source code from <ulink url="http://www.php.net/downloads.php">http://www.php.net/downloads.php</ulink></para>
</sect2>

</sect1>

<sect1><title>Installation</title>

<para>First we hve take care of the few pre-requisites, and then we will get into the main installtion.</para>

<sect2><title>Pre-requisites</title>
<para>The application server as we plan to install, requires the SSL libraries and LDAP libraries. SSL engine is also required for managing the SSL certs for Apache 2.x</para>
<sect3><title>iPlanet LDAP SDK</title>
<para>Become root by using the su command:</para>
<screen><command>$ su -</command></screen>
<para>Create the <filename type="directory">/usr/local/iplanet-ldap-sdk.5</filename> directory. Copy the <filename>ldapcsdk5.08-Linux2.2_x86_glibc_PTH_OPT.OBJ.tar.gz</filename> form <filename type="directory">/tmp/downloads</filename> to <filename type="directory">/usr/local/iplanet-ldap-sdk.5</filename> directory.</para>
<screen>
<command># mkdir /usr/local/iplanet-ldap-sdk.5</command>
<command># cp /tmp/downloads/ldapcsdk5.08-Linux2.2_x86_glibc_PTH_OPT.OBJ.tar /usr/local/iplanet-ldap-sdk.5</command>
<command># cd /usr/local/iplanet-ldap-sdk.5</command>
<command># tar -xvf ldapcsdk5.08-Linux2.2_x86_glibc_PTH_OPT.OBJ.tar</command>
</screen>
<para>Now you should have all the required iPlanet LDAP lib files in the correct directory</para>

</sect3>

<sect3><title>OpenSSL Engine</title>
<para>Next we need to install the OpenSSL Engine</para>
<para>OpenSSL is required to create and manage SSL certificates on the webserver. The installion is also necessary for the lib files that will be used by the SSL module for apache.</para>
<para>Change to the directory where you placed the OpenSSL source code files</para>
<screen> <command># cd /tmp/download</command>
<command># gzip -d openssl.x.x.tar.gz</command>
<command># tar -xvf openssl.x.x.tar</command>
<command># cd openssl.x.x</command>
<command># make</command>
<command># make test</command>
<command># make install</command>
</screen>
</sect3>

</sect2>
<sect2><title>mySQL</title>
<para>Installaing mySQL is quite simple. The downloaded binaries have to be place in appropriate directory.</para>
<para>We start creating a user:group for mysql daemon, and copying the files to appropriate directories.</para>
<screen> <command># groupadd mysql</command>
<command># useradd -g mysql mysql</command>
<command># cd /usr/local</command>
<command># gunzip &lt; /path/to/mysql-VERSION-OS.tar.gz | tar xvf - </command>
<command># ln -s full-path-to-mysql-VERSION-OS mysql</command>
</screen>
<para>Next run the install_db script, and change permission on the files</para>
<screen> <command># cd mysql</command>
<command># scripts/mysql_install_db</command>
<command># chown -R mysql .</command>
</screen>
<sect3><title>Starting mySQL</title>
<para>Now start the mySQL server to verify the installation</para>
<screen> <command># bin/mysqld_safe --user=mysql &amp;</command>
</screen>
<para>Verify mySQL daemon is running, by using the ps -ef command. You should see the following output:</para>
<screen><command># ps -ef | grep mysql</command>
root      3237     1  0 May29 ?        00:00:00 /bin/sh bin/safe_mysqld
mysql     3256  3237  0 May29 ?        00:06:58 /usr/local/mysql/bin/mysqld --defaults-extra-file=/usr/local/mysql/data/my.cnf --basedir=/usr/local/mysql --datadir=/usr/local/mysql/data --user=mysql --pid-file=/usr/local/mysql/data/downloa
</screen>
</sect3>
<sect3><title>Stopping mySQL</title>
<para>To stop the MySQL server, follow the instructions below</para>
<screen><command># cd /usr/local/mysql</command>
<command># ./bin/mysqladmin -u root -p shutdown</command>
</screen>
</sect3>
<sect3><title>Locating Data Directory</title>
<para>mySQL deamon stores all the information in a direcory called "Data Directory". If you followed the installation instructions above, your Data Directory should be located under <filename type="directory">/use/local/mysql/data</filename>.</para>
<para>To locate where your Data Directory is located, use the <command>mysqladmin</command> utility as follows:</para>
<screen>
<command># /usr/local/mysql/bin/mysqladmin variables -u root --password={your_password} | grep datadir</command>
</screen>

</sect3>
</sect2>

<sect2><title>Apache 2.0</title>
<para>Start by setting some FLAGS for the compiler</para>
<screen><command># export LDFLAGS="-L/usr/local/iplanet-ldap-sdk.5/lib/ -R/usr/local/iplanet-ldap-sdk.5/lib/:/usr/local/lib"</command>
<command># export CPPFLAGS="-I/usr/local/iplanet-ldap-sdk.5/include"</command>
</screen>
<para>Next UNTAR the apache 2.0 source files, and execute the <filename>configure</filename> script.</para>
<screen><command># cd /tmp/download</command>
<command># gzip -d httpd-2.0.46.tar.gz </command>
<command># tar -xvf httpd-2.0.46.tar</command>
<command># cd httpd-2.0.46</command>
<command>#./configure --enable-so --enable-mods-shared="ldap auth-ldap" --with-ldap --with-auth-ldap --with-ldap-lib=/usr/local/iplanet-ldap-sdk.5/ --with-ldap-include=/usr/local/iplanet-ldap-sdk.5/ --with-ssl --enable-ssl  --enable-rewrite   --enable-dav</command>
</screen>
<para>Next run the make command</para>
<screen><command># make</command>
<command># make install</command>
</screen>
<sect3><title>Starting Apache</title>
<screen><command># /usr/local/apache2/bin/apachectl start</command>
</screen>
</sect3>
<sect3><title>Stopping Apache</title>
<screen><command># /usr/local/apache2/bin/apachectl stop</command>
</screen>
</sect3>
</sect2>

<sect2><title>mod_auth_ldap</title>
<para>Untar modauthldap_apache2.tar.gz</para>
<screen><command>cd /tmp/download</command>
<command># gzip -d modauthldap_apache2.tar.gz</command>
<command># tar -xvf modauthldap_apache2.tar</command>
<command># cd modauthldap_apache2</command>
</screen>
<para>Now configure and install mod_auth_ldap</para>
<screen><command># ./configure --with-apxs=/usr/local/apache2/bin/apxs  --with-ldap-dir=/usr/local/iplanet-ldap-sdk.5/</command>
<command># make</command>
<command># make install</command>
</screen>
</sect2>

<sect2><title>PHP</title>

</sect2>

</sect1>


<sect1 id="config-webdav"><title>Configuring and Setting up the
 WebDAV services</title>

<para> Now for the easy part. In this section we will WebDAV enable a
directory under Apache root.  </para>

<sect2><title>Modifications to  the
<filename>/usr/local/apache/conf/httpd.conf</filename></title>

<para>
Please verify that the following Apache directive appears in the 
<filename>/usr/local/apache/conf/httpd.conf</filename> :</para>
 
<para><screen>
  Addmodule mod_dav.c
</screen></para>

<para> If it does not please add it. This directive informs Apache
about DAV capability. The directive must be placed outside any
container.  </para>

<para>
Next we must specify where Apache should store 
the DAVLockDB file. DAVLockDB is a lock database for the WebDAV. 
This directory should be writable by the httpd process.
</para>

<para>
I store the DAVLock file under <filename>/usr/local/apache/var</filename>.
I use this directory for other purposes as well. Please add the
following line to your
<filename>/usr/local/apache/conf/httpd.conf</filename> to specify
that the DAVLockDB file will be under
<filename>/usr/local/apache/var</filename> : </para>

<para><screen>
  DAVLockDB      /usr/local/apache/var/DAVLock 
</screen></para>

<para>The directive must be placed outside any container.</para>
</sect2>

<sect2><title>Creating a directory for DAVLockDB</title>

<para> As mentioned above a directory must be created  for DAVLockDB
that can be written by the web server process. Usually web server
process runs under the user '<emphasis>nobody</emphasis>' . Please
verify this for your system using the command: 
<screen><command>ps -ef | grep httpd</command></screen>
Under <filename>/usr/local/apache</filename> create
the directory and set the permissions on it using the following
commands:  </para>

<para><screen>
  <command># cd /usr/local/apache</command>
  <command># mkdir var</command>
  <command># chmod -R 755 var/</command>
  <command># chown -R nobody var/</command>
  <command># chgrp -R nobody var/</command>
</screen></para>

</sect2>

<sect2><title>Enabling DAV</title>

<para> Enabling DAV is a trivial task. To enable DAV for a directory
under Apache root, just add the following directive in the container
for that particular directory: </para>

<para><screen>
  DAV On
</screen></para>

<para> This directive will enable DAV for the directory and its
sub-directories.  </para>

<para>The following is a sample configuration that will enable WebDAV
and LDAP authentication on
<filename>/usr/local/apache/htdocs/DAVtest</filename>.  Place this in
the <filename>/usr/local/apache/conf/httpd.conf</filename> file.
</para>

<screen>
 DavLockDB /tmp/DavLock
&lt;Directory "/usr/local/apache2/htdocs/DAVtest"&gt;
Options Indexes FollowSymLinks
AllowOverride None
order allow,deny
allow from all
AuthName "SMA Development server"
AuthType Basic
LDAP_Debug On
#LDAP_Protocol_Version 3
#LDAP_Deref NEVER
#LDAP_StartTLS On
LDAP_Server you.ldap.server.com 
#LDAP_Port 389
# If SSL is on, must specify the LDAP SSL port, usually 636
LDAP_Port 636
LDAP_CertDbDir /usr/local/apache2/sslcert
Base_DN "o=SDS"
UID_Attr uid
DAV On
#require valid-user
require valid-user 
#require roomnumber "123 Center Building"
#require filter "(&amp;(telephonenumber=1234)(roomnumber=123))"
#require group cn=rcs,ou=Groups
&lt;/Directory&gt;
</screen>

</sect2>

<sect2><title>Create a Directory called DAVtest</title>

<para>As mentioned in a earlier section, all DAV directories have to
be writable by the WebServer process. In this example we assume
WebServer is running under username '<emphasis>nobody</emphasis>'.
This is usually the case. To check httpd is running under what user,
please use: </para>
<screen><command># ps -ef | grep httpd</command></screen>

<para>Create a test directory  called '<filename>DAVtest</filename>'
under <filename>/usr/local/apache/htdocs</filename> :</para>

<para><command># mkdir /usr/local/apache/htdocs/DAVtest</command></para>

<para>Change the permissions on the directory  to make it is
read-writable by the httpd process. Assuming the httpd is running
under username '<emphasis>nobody</emphasis>', use the following
commands:</para>

<screen>
  # cd /usr/local/apache/htdocs
  # chmod -R 755 DAVtest/
  # chown -R nobody DAVtest/
  # chgrp -R nobody DAVtest/
</screen>
</sect2>

<sect2><title>Restart Apache</title>

<para> Finally you must run the configuration test routine that comes
with Apache to  verify the syntax in <filename>httpd.conf</filename> :
</para>

<screen><command># /usr/local/apache/bin/apachectl configtest</command></screen>

<para>
If you get error messages please verify that you followed all of
the above mentioned steps correctly. If you can not figure out the
error message feel free to email me with the error message
(<ulink url="mailto:saqib@seagate.com">saqib@seagate.com</ulink>).
</para>

<para>If the configtest is successful start the apache web-server: </para>

<para><command># /usr/local/apache/bin/apachectl restart</command></para>

<para>Now you have WebDAV enabled Apache Server with LDAP
authentication and SSL encryption.  </para>



</sect2>

<sect2><title>WebDAV server protocol compliance testing</title>
<para>It is very important that the WebDAV that we just implemented be fully complaint with the WebDAV-2 protocol. If it is not 
fully compatible, the client side WebDAV applications will not function properly.</para>

<para>To test the complaince we will use a tool called Litmus. Litmus is a WebDAV server protocol compliance test suite, 
which aims to test whether a server is compliant with the WebDAV protocol as specified in RFC2518. </para>

<para>Please download the Litmus source code from http://www.webdav.org/neon/litmus/ and place it in the /tmp/downloads directory.</para>

<para>Then use gzip and tar to extract the files:</para>
<screen>
<command># cd /tmp/downloads</command>
<command># gzip -d litmus-0.6.x.tar.gz</command>
<command># tar -xvf litmus-0.6.x.tar</command>
<command># cd litmus-0.6.x</command>
</screen>

<para>Compiling and installing Litmus is easy:</para>

<screen>
<command># ./configure</command>
<command># make</command>
<command># make install</command>
</screen>

<para><command>make install</command> will install the Litmus binary files under <filename>/usr/local/bin</filename> and the help files under <filename>/usr/local/man</filename></para>


<para>To the test the complaince of the WebDAV server that you just installed, please use the following command</para>
<screen>
<command># /usr/local/bin/litmus http://you.dav.server/DAVtest userid passwd</command>
</screen>
</sect2>

</sect1>


<sect1><title>WebDAV server management</title>
<para>In this section we will discuss about the various management task - e.g. using LDAP for access control, and working with DAV method on Apache</para>
<para>Most of the configuration changes for the DAV will have to done using the <filename>httpd.conf</filename> file. This file is located at <filename>/usr/local/apache/conf/httpd.conf</filename> </para>

<para><filename>httpd.conf</filename> is a text based configuration file that Apache uses. It can b editted using any text editor - I preffer using vi. Please make backup copy of this file, before changing it.</para>

<para>After making changes to the <filename>httpd.conf</filename> the Apache server has to be restarted using the <command>/usr/local/apache/bin/apachectl restart</command> command. 
However before restarting you test for the validity of the <filename>httpd.conf</filename> by using the <command>/usr/local/apache/bin/apachectl configtest</command> comand. </para> 

<sect2><title>Restricting access to DAV shares</title>
<para>In the previous section when we created the DAVtest share, we used the LDAP for authentication purposes. However anyone
who can authenticates using their LDAP useri/passwd will be able to access that folder. </para>
<para>Using the <command>require</command> directive in the httpd.conf file, we can limit access to certain individuals or groups of individuals.</para>

<para>If we look at the DAVtest configuration from the previosu section: 
<screen>
  &lt;Directory /usr/local/apache/htdocs/DAVtest&gt;
  Dav On
  #Options Indexes FollowSymLinks

  AllowOverride None
  order allow,deny
  allow from all
  AuthName "LDAP_userid_password_required"
  AuthType Basic
  &lt;Limit GET PUT POST DELETE PROPFIND PROPPATCH MKCOL COPY MOVE LOCK UNLOCK&gt;
  Require valid-user
  &lt;/Limit&gt;
  LDAP_Server ldap.server.com
  LDAP_Port 389
  Base_DN "o=ROOT"

  UID_Attr uid
  &lt;/Directory&gt;
</screen>
We see that the <command>require</command> is set to <command>valid-user</command>. Which means any valid authenticated user
has access to this folder. 
</para>

<sect3><title>Restricting access based on Individual UID(s)</title>
<para>LDAP UID can be used to restrict access to DAV folder.</para>
<para><command>require valid-user</command> directive can be changed to <command>require user 334455 445566</command></para>
<para>This will restrict access to individuals with UID 334455 and 445566. Anyone else will not be able to access this folder.</para> 
</sect3>

<sect3><title>Restricting access based on groups of individuals.</title>
<para><command>require</command> can also be used to restrict access to groups of individuals. This can be either done using LDAP groups or LDAP filters. The filter must be valid LDAP filter syntax.</para>
</sect3>
</sect2>

<sect2><title>Restricting write access to DAV shares</title>
<para>It maybe be required that the editting for the resources on the DAV shares be restricted to certain individual, however anyone can view the resources. This can be easily done using the <command>&lt;Limit&gt;</command> tags in the httpd.conf file</para>
<para> 
<screen>
  &lt;Directory /usr/local/apache/htdocs/DAVtest&gt;
  Dav On
  #Options Indexes FollowSymLinks

  AllowOverride None
  order allow,deny
  allow from all
  AuthName "LDAP_userid_password_required"
  AuthType Basic
  &lt;Limit GET PUT POST DELETE PROPFIND PROPPATCH MKCOL COPY MOVE LOCK UNLOCK&gt;
  Require valid-user
  &lt;/Limit&gt;
  LDAP_Server ldap.server.com
  LDAP_Port 389
  Base_DN "o=ROOT"

  UID_Attr uid
  &lt;/Directory&gt;
</screen>
</para>
<para>You restrict write access to certain individuals by changing the <command>&lt;limit&gt;</command> to
<screen>
  &lt;Limit PUT POST DELETE PROPPATCH MKCOL COPY MOVE LOCK UNLOCK&gt;
  Require 334455
  &lt;/Limit&gt;
</screen>
</para>
<para>Basically we are limiting the PUT POST DELETE PROPPATH MKCOL COPY MOVE LOCK and UNLOCK to an individual who has the UID of 334455. Everone else will be able to use the methods GET and PROPFIND on the resources, but not any other method.</para>


</sect2>

</sect1>

<sect1 id="ssl"><title>Implementing and using SSL to secure WebDAV traffic</title>
<para>
Security of the data stored on a file server is very important these days. Compromised data can cost thousands of dollars to
company. In the last section, we compiled LDAP authentication module into the Apache build to provide a Authentication 
mechanism. However HTTP traffic is very insecure, and all data is transferred in clear text - meaning, the LDAP authentication
(userid/passwd) will be transmitted as clear text as well. This create a problem. Anyone can sniff these userid/passwd and gain
access to DAV store. To prevent this we have to encrypt HTTP traffic, essentially HTTP + SSL or HTTPS. Anything transferred over
HTTPS is encrypted, so the LDAP userid/passwd can not be sniffed. HTTPS runs on port 443. The resulting build from the last 
section's compilation process will have Apache to listen to both port 80 (normal HTTP) and 443 (HTTPS). If you are just going
to use this server for DAV, then I will highly suggest that you close port 80. In this section of the HOWTO I will provide some 
information regarding SSL and maintaining SSL on a WebDAV server. However this is a not limited to a DAV server, it can be 
used on any web server.
</para>

<sect2><title>Introduction to SSL</title>
<para>
SSL (Secure Socket Layer) is a protocol layer that exists between the Network Layer and Application layer. As the name suggest
SSL provides a mechanism for encrypting all kinds of traffic - LDAP, POP, IMAP and most importantly HTTP. 
</para>
<para>
The following is a over-simplified structure of the layers involved in SSL.
<screen>

	+-------------------------------------------+
	|   LDAP   |    HTTP    |   POP   |   IMAP  |
	+-------------------------------------------+
	|                   SSL                     |
	+-------------------------------------------+
	|               Network Layer               |
	+-------------------------------------------+
	
</screen>
</para>
<sect3><title>Encryption algorithms used in SSL</title>
<para>
There are 2 kinds of encryption algorithms used in SSL.
</para>
<para>
<emphasis role="strong">Public-Private Key Crytography - Initiating SSL connection: </emphasis> This algorithm is used for initiating the SSL session. In this algorithm, the encryption must
be performed using the Public Key, and the decryption can only be performed using the Private Key. The Web-server holds the
private Key, and sends the Public key to the client. The public key is sent to the client in a certificate. 
</para>

<orderedlist>
	<listitem>
		<para>The client request content from the Web Server using HTTPS.</para>
	</listitem>
	<listitem>
		<para>The web server responds with a Certificate which includes the server's public key.</para>
	</listitem>
	<listitem>
		<para>The client check to see if the certificate has expired.</para>
	</listitem>
	<listitem>
		<para>Then the client checks if the Certificate Authority that signed the certificate, is a trusted authority listed in the browser. This explains why we need to get a certificate from a a trusted CA.</para>
	</listitem>
	<listitem>
		<para>The client then checks to see if the Domain Name of the web server matches the Comman Name (CN) on the certificate?</para>
	</listitem>
	<listitem>
		<para>If everything is successful the SSL connection is initiated.</para>
	</listitem>
</orderedlist>

<para>
<emphasis role="strong">Symmetric Cryptography - Actuall transmission of data</emphasis>: After the SSL connection has been established, Symmetric cryptography
is used to encrypting data. Public-Private Key cryptography is CPU cycle intensive, so Symmetric cryptography is used. In 
symmetric cryptography the data can be encrypted and decrypted using the same key. The Key for symmetric cryptography was
exchange in the initiation process.
</para>
</sect3>
</sect2>

<sect2><title>Test Certificates</title>
<para>While compiling Apache we created a test certificate. We used the makefile provided by
mod_ssl to create this custom Certificate. We used the command:
<screen># make certificate TYPE=custom</screen>
</para>

<para>This certificate can be used for testing purposes.</para>
</sect2>

<sect2><title>Certificates for Production use</title>
<para>
For production use you will need a certificate from a CA.
CA or Certificate Authorities are certificate vendors, who are listed as a Trusted CA in user's browser client. As mentioned in
the Encryption Algorithms section, if the CA is not listed as a trusted authority, your user will get a warning message when 
trying to connect to a secure location.
</para>
<para>
Similarly the test certificates will also cause a warning message to appear on the user's browser.
</para>
 
</sect2>

<sect2><title>How to generate a CSR</title>
<para>
CSR or Certificate Signing Request must be sent to the trusted CA for signing. This section discusses howto create a CSR,
and send it to the CA of your choice.


</para>

<screen>
<command>cd /usr/local/apache/conf/</command>
<command>/usr/local/ssl/bin/openssl req -new -nodes -keyout private.key -out public.csr</command>
</screen>

<para>
At this point you will be asked several about your server location, to generat the Certificate Signing Request</para>

<para>
Note: You Common Name is the DNS name of your webserver e.g. dav.server.com . If you put in anything else, it will NOT work. Remember the passwd that you use, for future reference.
</para>

<para>Once the process is complete, you will have private.key and a public.csr . At this pointe the public.key is not encrypted. To encrypt"
</para>

<screen>
<command>mv private.key private.key.unecrpyted</command>
<command>/usr/local/ssl/bin/openssl rsa -in private.key.unecrpyted -des3 -out private.key</command>
</screen>

</sect2>

<sect2><title>Removing passphrase from the RSA Private Key</title>
<para>RSA Private Key stored on the webserver is usually encrypted, and you need a passphrase to parse the file. That is why you
are prompted for a passphrase when start Apache with modssl:</para>

<para>
<screen>
<command># apachectl startssl</command>
<command>Apache/1.3.23 mod_ssl/2.8.6 (Pass Phrase Dialog)</command>
<command>Some of your private key files are encrypted for security reasons.</command>
<command>In order to read them you have to provide us with the pass phrases.</command>
<command>Server your.server.dom:443 (RSA)</command>
<command>Enter pass phrase:</command>
</screen>
</para>

<para>Encrypting the RSA Private Key is very important. If somebody gets hold of the you "Unencrypted RSA Private Key" he/she can easily 
impersonate your webserver. If the Key is encrypted, the hacker can not do anything without the passphrase. </para>

<para>However encrypting the Key can sometimes be nuisance, since you will be prompted for a passphrase everytime you start the web-server. 
Specially if you are using rc scripts to start the webserver at boot time, the prompt for passphrase creates problems.</para>

<para>You can get rid of the passphrase prompt easily by decrypting the Key. However make sure that no one can hold of this Key. I would 
recommend Hardening and Securing guidelines be followed before decrypting the Key on the webserver.</para>

<para>To decrypt the Key:</para>
<para>First make a copy of the encrypted key</para>
<para><screen><command># cp server.key server.key.cryp</command></screen></para>
<para>Then re-write the key with encryption. You will be prompted for the original encrypted Key passphrase</para>
<para><screen><command># /usr/local/ssl/bin/openssl rsa -in server.key.cryp -out server.key</command>
read RSA key
Enter PEM pass phrase:
writing RSA key
</screen>
</para> 

<para>
One way to secure the decrypted Private Key is to make readable only by the root:
<screen>
<command># chmod 400 server.key</command>
</screen>
</para>
</sect2>

<sect2><title>Trusted Certificate Authorities</title>
<para>The following is list of Certificate Authorities that are trusted by the various browsers:</para>
<orderedlist>
	<listitem>
		<para><ulink url="http://www.verisign.com">Verisign</ulink></para>
	</listitem>
	<listitem>
		<para><ulink url="http://www.thawte.com">Thawte</ulink></para>
	</listitem>
</orderedlist>


</sect2>      
 
</sect1>
</article>

