<!DOCTYPE Article PUBLIC "-//Davenport//DTD DocBook V3.0//EN">

<Article>

<ArtHeader>

<Title>Font HOWTO</Title>
<AUTHOR>
<FirstName>Donovan 
</FirstName>
<Surname>
Rebbechi, 	
</Surname>
<affiliation>
<address>
<email>elflord@panix.com</email>
</address>
</affiliation>
</AUTHOR>

<revhistory>
      <revision>
         <revnumber>v2.0</revnumber>
         <date>2002-07-10</date>
         <authorinitials>dr</authorinitials>
          <revremark>
         </revremark>
      </revision>
</revhistory>

<abstract>
      <para>
      Provides a comprehensive source to act as a starting point 
      for any and all font questions about Linux.
      </para>
</abstract>
</ArtHeader>

<Sect1>
<Title>Introduction</Title>

<Sect2>
<Title>The Location of This Document</Title>

<Para>
This document is located at 
<ULink
URL="http://pegasus.rutgers.edu/~elflord/font_howto"
>my webpage</ULink
>

</Para>
</Sect2>
<Sect2><Title>Submitting corrections/errata</Title>
<Para>
Please don't send me html ! I con't do anything with it. Instead, send a patch
based on the sgml source. To do this, edit Font-HOWTO.sgml, save the new file
to Font-HOWTO.sgml.new, and run the diff program:
<screen>
diff -u Font-HOWTO.sgml Font-HOWTO.sgml.new
</screen>
and send me the patch. If I like it, it's easy for me to add it immediately.
It's also easy for me to quickly inspect the changes and decide whether or
not I like them.
</Para>
</Sect2>

<Sect2>
<Title>Last Updated</Title>
<Para>
This version is last updated 
Wed Jul 10 20:05:15 EDT 2002. Go to the location of the
document for the latest version.
</Para>
</Sect2>


<Sect2>
<Title>Copyright</Title>
<Para>
Copyright (c) 2000-2002 by Donovan Rebbechi
</Para>
<Para>

 Please freely copy and distribute (sell or give away) this document in any 
format. It's requested that corrections and/or comments be forwarded to the 
document maintainer, but you are not obliged to. You may create a derivative 
work and distribute it provided that you: 

<ItemizedList>
<ListItem><Para>
Send your derivative work (in the most suitable format such as sgml) to the LDP (Linux Documentation Project) or the like for posting on the Internet. If not the LDP, then let the LDP know where it is available. 
</Para></ListItem><ListItem><Para>
License the derivative work with the same license as this one or use GPL. 
Include a copyright notice and at least a pointer to the license used. 
</Para></ListItem><ListItem><Para>
Give due credit to previous authors and major contributors. 
</Para></ListItem>
</ItemizedList>
					    If you're considering making a derived work other than a translation, it's requested that you discuss
						 your plans with the current maintainer. 
</Para>
</Sect2>

<Sect2>
<Title>Rationale</Title>

<Para>
I'm going to make this brief (-; The purpose of this document is to address
what was a gaping hole in font documentation. While previously, there
were several documents about fonts for Linux, I felt that none of them
were comprehensive, all of them had a relatively narrow focus. Hence
the goal of this document is not to provide radical new insight into 
the issue of font handling ( though I have included material previously 
unavailable ), the main aim is to provide a comprehensive source to act 
as a starting point for any and all font questions about Linux.
</Para>

</Sect2>

<Sect2>
<Title>Credits and Acknowledgements</Title>

<Para>
Special thanks are due to Rod Smith, who made several helpful suggestions,
and fixed pfm2afm.
Also thanks to Doug Holland, whose Font Deuglification HOWTO proved
to be a good reference,	John McLaughlin, author of the document that
helped me come to grips with Star Office, 
and the Linux community for their suggestions
and constructive comments.
</Para>

</Sect2>

</Sect1>

<Sect1>
<Title>Fonts 101 -- A Quick Introduction to Fonts</Title>

<Sect2>
<Title>Types of Fonts</Title>

<Sect3>
<Title>Bitmap Fonts</Title>

<Para>
A bitmap is a matrix of dots. Bitmap fonts are represented in precisely
this way -- as matrices of dots. Because of this, they are
<Emphasis>device dependent</Emphasis> -- they are only useful at a particular 
resolution. A 75 DPI screen bitmap font is still 75 DPI on your 1200 DPI 
printer.
</Para>

<Para>
There are two types of bitmap fonts -- bitmap printer fonts, such as
the <Literal remap="tt">pk</Literal> fonts generated by dvips, and bitmap screen fonts,
used by X and the console. The bitmap screen fonts typically have 
a <Literal remap="tt">bdf</Literal> or <Literal remap="tt">pcf</Literal> extension. Bitmap screen 
fonts are most useful
for terminal windows, consoles and text editors, where the lack of
scalability and the fact that they are unprintable is not an issue.
</Para>

</Sect3>

<Sect3>
<Title>Type 1 Fonts</Title>

<Para>
The Type 1 font standard was devised by Adobe, and Type 1 fonts are
supported by Adobe's PostScript standard. Because of this, they are
also well supported under linux. They are supported by X and 
ghostscript. Postscript fonts have traditionally been the choice 
of font for anything on UNIX that involves printing.
</Para>

<Para>
Typically, a UNIX Type 1 font is distributed as an <Literal remap="tt">afm </Literal>
( adobe font metric ) file, and an outline file, which 
is usually a <Literal remap="tt">pfb</Literal> ( printer font binary ) or 
<Literal remap="tt">pfa</Literal> ( printer font ascii ) 
file. The outline file
contains all the glyphs, while the metric file 
contains the metrics. 
</Para>

<Para>
Type 1 fonts for other platforms may be distributed in different
formats. For example, PostScript fonts for windows often use a different
format ( <Literal remap="tt">pfm</Literal> ) for the metric file.
</Para>

</Sect3>

<Sect3>
<Title>Type3 Fonts</Title>

<Para>
These fonts are distributed in a similar manner to Type 1 files --
in groups of <Literal remap="tt">afm</Literal> font metrics, and <Literal remap="tt">pfa</Literal> files.
While they are supported by the PostScript standard, they are not 
supported by X, and hence have limited use.
</Para>

</Sect3>

<Sect3>
<Title>TrueType Fonts</Title>

<Para>
TrueType fonts were developed by Apple. They made the format available
to Microsoft, and succesfully challenged Adobe's grip on the font 
market. 
True type fonts store the metric and shape information in a single
file ( usually one with a <Literal remap="tt">ttf</Literal> extension ). Recently,
font servers have been developed that make TrueType available 
to X. And PostScript and ghostscript have supported TrueType fonts
for some time. Because of this, TrueType fonts are becoming more 
popular on linux.
</Para>

</Sect3>

<Sect3>
<Title>Type 42 Fonts </Title>

<Para>
Type42 fonts are actually just TrueType fonts with headers that enable
them to be rendered by a PostScript interpreter. Most applications,
such as ghostscript and SAMBA handle these fonts transparently. However,
if you have a PostScript printer, it may be necessary to explicitly 
create Type42 font files.
</Para>

</Sect3>

<Sect3>
<Title>Type 1 vs TrueType -- a comparison</Title>

<Para>
Despite the historical feuding between the proponents to Type 1 and TrueType
fonts, both have a lot in common. Both are scalable outline fonts.
Type 1 fonts use cubic as opposed to quadratic curves for the glyphs.
This is in theory at least a slight advantage since they include 
all the curves available to TrueType fonts. In practice, it makes 
very little difference. 
</Para>

<Para>
TrueType fonts have the apparent advantage that their support for 
hinting is better ( Type 1 fonts do have hinting functionality, but it 
is not as extensive as that of TrueType fonts ). 
However, this is only an issue on low resolution
devices, such as screens ( the improved hinting makes no discernable
difference on a 600dpi printer, even at small point sizes. )
The other point that makes this apparent advantage somewhat 
questionable is the fact that well hinted TrueType fonts are rare. 
This is because software packages that support hinting functionality
are out of the budget of most small time designers.
Only a few major foundries, such as Monotype make well hinted 
fonts available.
</Para>

<Para>
In conclusion, the main differences between TrueType and Type 1 fonts 
are in availability and application support. The widespread availability
of TrueType fonts for Windows has resulted in webpages designed 
with the assumption that 
certain TrueType fonts are available. Also, many users have large 
numbers of TrueType fonts because they ship with the users Windows
applications. However, on Linux, most applications support Type 1 fonts
but do not have the same level of support for TrueType. Moreover, most
major font foundries still ship most of their fonts in Type 1 format.
For example, Adobe ships very few TrueType fonts.
My recommendation to users is to use whatever works for your 
application, and try to avoid converting from one format to another
where possible ( because the format conversion is not without loss ).
</Para>

</Sect3>

<Sect3>
<Title>Metafont</Title>

<Para>
Metafont was developed by Donald E. Knuth as part of the TeX typesetting
system. Metafont is a graphics programming language ( like PostScript )
that has applications wider than just fonts.
Metafonts exhibit some very desirable qualities. One of the important
features is that metafonts can scale very gracefully.  The metafont
Computer Modern has different shape at 20 point and 10 point. The 
shape changes with size, because it is desirable for a smaller font
to be proportionately wider than a larger font ( this makes the larger
fonts more elegant and the smaller fonts more readable ).
</Para>

<Para>
Metafonts typically have a <Literal remap="tt">mf</Literal> extension. They are rendered
to device dependent bitmap fonts. The rendering is slow, so they
are of excellent quality, but are not well suited to WYSIWYG 
publishing.
</Para>

</Sect3>

</Sect2>

<Sect2>
<Title>Families of Typefaces</Title>

<Para>
Typically, typefaces come in groups of a few variants. For example,
most fonts come with a bold, italic, and bold-italic variant.
Some fonts may also have small caps, and demibold variants.
A group of fonts consisting of a font and its variants is 
called a <Emphasis>family</Emphasis> of typefaces.
For example, the Garamond family consists of Garamond,
Garamond-italic, Garamond-bold, Garamond bold-italic,
Garamond demi-bold, and Garamond demi-bold-italic. The Adobe 
expert Garamond font also makes available Garamond small caps,
and Garamond titling capitals.
</Para>

</Sect2>

</Sect1>

<Sect1>
<Title>Fonts 102 -- Typography</Title>

<Para>
Here, we discuss some typography basics. While this information
is not essential, many font lovers will find it interesting.
</Para>

<Sect2>
<Title>Classifications of Typefaces</Title>

<Sect3>
<Title>Fixed versus variable width</Title>

<Para>
There are several classifications of typefaces. Firstly, there
are <Literal remap="tt">fixed width</Literal> fonts, and variable width fonts.
The fixed width fonts look like typewriter text, because 
each character is the same width. This quality is desirable for
something like a text editor or a computer console, but not
desirable for the body text of 
a long document. The other class is variable
width. Most of the fonts you will use are variable width, though
fixed width can be useful also ( for example, all the example 
shell commands in this document are illustrated with a 
fixed width font ). The most well known fixed width font
is Courier.
</Para>

</Sect3>

<Sect3>
<Title>To serif or not to serif ?</Title>

<Para>
Serifs are little hooks on the ends of characters. For example, the
letter i in a font such as Times Roman has serifs protruding from 
the base of the i and the head of the i.
Serif fonts are <Emphasis>usually</Emphasis> considered more readable than 
fonts without serifs. There are many different types of serif fonts.
</Para>

<Para>
Sans serif fonts do not have these little hooks, so they have
a starker appearance. One usually does not write a long book 
using a sans serif font for the body text. There are sans serif
fonts that are readable enough to be well suited to documents 
that are supposed to be browsed / skimmed ( web pages, catalogues,
marketing brochures ). Another application that sans serif fonts
have is as display fonts on computer screens, especially at 
small sizes. The lack of detail in the font can provide it with
more clarity. For example, Microsoft touts Verdana as being 
readable at very small sizes on screen.
</Para>

<Para>
Notable sans serif fonts include Lucida Sans, MS Comic Sans,
Verdana, Myriad, Avant Garde, Arial, Century Gothic and Helvetica.
By the way, Helvetica is considered harmful by typographers.
It is somewhat overused, and many books by typographers plead 
users to stay away from it.
</Para>

</Sect3>

<Sect3>
<Title>The old and the new -- different types of Serif fonts</Title>

<Sect4>
<Title>Old Style</Title>

<Para>
Old style fonts are based on very traditional styles dating as 
far back as the late 15th century. Old style fonts tend 
to be conservative in design, and very readable. They are well 
suited to writing long documents. The name ``old style'' refers 
to the style of the font, as opposed to the date of its design.
There are classic old style fonts, such as Goudy Old Style,
which were designed in the 20th century.
The old style class of fonts has the following distinguishing features:

<ItemizedList>
<ListItem>

<Para>
Well defined, shapely serifs.
</Para>
</ListItem>
<ListItem>

<Para>
Diagonal emphasis. Imagine drawing a font with a fountain pen, 
where lines 45 degrees anticlockwise from vertical are heavy
and lines 45 degrees clockwise from vertical are light. Old style
fonts often have this appearance.
</Para>
</ListItem>
<ListItem>

<Para>
Readability. Old style fonts are almost always very readable.
</Para>
</ListItem>
<ListItem>

<Para>
Subtlety and lack of contrast. The old style fonts have heavy 
lines  and light lines but the contrast in weight is subtle, 
not stark.
</Para>
</ListItem>

</ItemizedList>

Notable Old Style fonts include Garamond, Goudy Old Style, Jenson,
and Caslon ( the latter is contentious -- some consider it transitional )
</Para>

</Sect4>

<Sect4>
<Title>Moderns ( or didone )</Title>

<Para>
The moderns are the opposite of old style fonts. These fonts 
typically have more character, and more attitude than their old style
counterparts, and can be used to add character to a document rather
than to typeset a long piece. However, nothing is black and white --
and there are some modern fonts such as computer modern and
Monotype modern, and New Century Schoolbook which are very readable
( the contrast between heavy and light is softened to 
add readability ).
They are based on the designs popular in the 19th century and 
later. Their distinguishing features include:

<ItemizedList>
<ListItem>

<Para>
Lighter serifs, often just thin horizontal lines.
</Para>
</ListItem>
<ListItem>

<Para>
Vertical emphasis. Vertical lines are heavy, horizontal 
lines are light.
</Para>
</ListItem>
<ListItem>

<Para>
Many moderns have a stark contrast between light and heavy strokes.
</Para>
</ListItem>
<ListItem>

<Para>
Modern typefaces with high contrast between light and heavy 
strokes are not as readable as the old style fonts.
</Para>
</ListItem>

</ItemizedList>

Bodoni is the most notable modern. Other moderns include computer 
modern, and Monotype modern ( on which computer modern is based ).
</Para>

</Sect4>

<Sect4>
<Title>Transitional</Title>

<Para>
Transitional fonts fit somewhere in between moderns and old style fonts.
Many of the transitionals have the same kind of readability as the old 
styles. However, they are based on slightly later design. While
a move in the direction of the moderns may be visible in these 
fonts, they are still much more subtle than the moderns. 
Examples of transitionals include Times Roman, Utopia, Bulmer,
and Baskerville. Of these, Times leans towards old style, while
Bulmer looks very modern.
</Para>

</Sect4>

<Sect4>
<Title>Slab Serifs</Title>

<Para>
The slab serif fonts are so named because they have thick, block 
like serifs, as opposed to the smooth hooks of the old styles
or the thin lines of some of the moderns.
Slab serif fonts tend to be sturdy looking and are generally quite
readable. Many of the slab serifs have Egyptian names -- such
as Nile, and Egyptienne ( though they are not really in any way Egyptian ).
These fonts are great for producing readable text that may suffer
some dilution in quality ( such as photocopied documents, and documents
printed on newspaper ). These fonts tend to look fairly sturdy.
The most notable slab serif fonts are Clarendon, Memphis and
Egyptienne, as well as several typewriter fonts.
Many of the slab serif fonts are fixed width. Conversely, most 
( almost all ) fixed width fonts are slab serif.
</Para>

</Sect4>

</Sect3>

<Sect3>
<Title>The Sans Serif Revolution</Title>

<Para>
Surprisingly, the rise of sans serif fonts is a fairly recent
phenomenon. The first well known sans serif fonts were designed in the
19th early 20th century. The earlier designs include Futura, 
Grotesque and Gill Sans. These fonts represent respectively 
the ``geometric'', ``grotesque'' and ``humanist'' classes 
of sans serif fonts.
</Para>

<Sect4>
<Title>Grotesque</Title>

<Para>
The grotesques where so named because the public were initially 
somewhat shocked by their relatively stark design. Groteques are 
very bare in appearance due to the absence of serifs, and the simpler,
cleaner designs. Because of their ``in your face'' appearance,
grotesques are good for headlines. The more readable variations also
work quite well for comic books, and marketing brochures,
where the body text comes in small doses. Grotesques don't look 
as artsy as their geometric counterparts. 
Compared to the geometrics, they have more variation in weight, more
strokes, they are squarer ( because they don't use such 
circular arcs ). They use a different upper case G and lower case 
a to the geometrics.
While they are minimalistic
but don't go to the same extreme as the brutally avant-garde 
geometrics.
</Para>

<Para>
Notable grotesques include the overused Helvetica,  Grotesque,
Arial, Franklin Gothic, and Univers.
</Para>

</Sect4>

<Sect4>
<Title>Geometric</Title>

<Para>
The Futura font came with the manifesto: <Emphasis>form follows function</Emphasis>.
The geometric class of fonts has a stark minimalistic appearance. 
Distinguishing features include a constant line thickness ( no weight ).
This is particularly conspicuous in the bold variants of a font. 
Bold groteques and humanist fonts often show some notable 
variation in weight while this rarely happens with the geometric
fonts. Also notable is the precise minimalism of these designs.
The characters almost always are made up from straight horizontal and
vertical lines, and arcs that are very circular ( to the point 
where they often look as though they were drawn with a compass ).
The characters have a minimal number
of strokes. This gives them a contemporary look in that they 
embrace the minimalistic philosophy that would later take the
world of modern art by storm.
A tell tale sign that a font is a geometric type is the upper case
``G'', which consists of a minimalistic combination of two
strokes -- a long circular arc and a horizontal line.
The other character that stands out is the lower case ``a'' --
which is again two simple strokes, a straight vertical line and
a circle ( the other ``a'' character is more complex which is why
it is not used ).
Notable geometrics include Avant Garde, Futura, and Century
Gothic.
</Para>

</Sect4>

<Sect4>
<Title>Humanist</Title>

<Para>
As the name might suggest, humanist fonts were designed with a goal 
of being less mechanical in appearance. In many ways, they are
more similar to the serif fonts than the geometrics and the 
grotesques. They are said to have a ``pen drawn'' look about them.
They tend to have subtle variation in weight, especially observable 
in bold variants. The curve shapes are considerably less rigid than
those of the geometrics. Many of them are distinguishable by the
``double story'' lower case g, which is the same shape as the g
used in the old style serif fonts.
The humanist typefaces are the easiest to use without producing an 
ugly document as they are relatively compatible with the old style 
fonts.
</Para>

</Sect4>

</Sect3>

<Sect3>
<Title>Compatible Typefaces</Title>

<Para>
Grouping typefaces is not easy, so it pays to avoid using too many on
the one page. A logical choice of two typefaces consists of a serif
and a sans serif.
<ULink
URL="http://www.monotype.com/newmedia/type101_ex.htm"
>Monotype's Typography 101 page</ULink
>
provides a category-matchup. They conclude that 
the moderns and geometrics form good pairs, while 
the old styles and humanists also go together well.
The transitionals are also paired with the humanists.
The slab serifs are paired with the grotesques, and 
some variants of the slab serifs are also said to match 
the geometrics or humanists.
</Para>

<Para>
From reading this, one gets the impression that their 
philosophy is essentially to match the more conservative
serifs with the more moderate sans serifs, and pair the 
wilder modern serifs with the avant garde looking ( pun unavoidable )
geometrics.
</Para>

</Sect3>

</Sect2>

<Sect2>
<Title>Ligatures, Small caps fonts and expert fonts</Title>

<Sect3>
<Title>Ligatures</Title>

<Para>
Properly spacing fonts brings with it all sorts of issues.
For example, to properly typeset the letters ``fi'', the i should
be very close to the f. The problem is that this causes the dot 
on the i to collide with the f, and the serif on the head of the i
to collide with the horizontal stroke of the f.
To deal with this problem, font collections include ligatures. 
For example, the ``fi'' ligature character is a single character that 
one can substitute for the two character string ``fi''.
Most fonts contain fi and fl ligatures. Expert fonts discussed 
later often include extra ligatures, such as ffl, ffi, and a dotless
i character.
</Para>

</Sect3>

<Sect3>
<Title>Small caps fonts</Title>

<Para>
Small caps fonts are fonts that have reduced size upper case letters
in place of the lower case letters. These are useful for writing
headings that require emphasis ( and they are often used in LaTeX ).
Typically, when one writes a heading in small caps, they use a large
cap for the beginning of each word, and small capitals for the rest
of the word ( ``title case'' ). The advantage of this over using
all caps is that you get something that is much more readable
( using all caps is a big typographic sin ).
</Para>

</Sect3>

<Sect3>
<Title>Expert fonts</Title>

<Para>
Expert fonts consist of several extras designed to supplement a typeface.
These include things like ligatures, ornaments ( much like a 
mini-dingbats collection designed to go with the typeface ), 
small caps fonts, and swash capitals ( fancy, calligraphic letters ).
</Para>

</Sect3>

</Sect2>

<Sect2>
<Title>Font Metrics and Shapes</Title>

<Para>
Font metrics define the spacing between variable width fonts.
The metrics include information about the size of the font,
and <Emphasis>kerning</Emphasis> information, which assigns kerning 
pairs -- pairs of characters that should be given different 
spacing. For example, the letters ``To'' would usually belong in 
a kerning pair, because correctly spaced ( or kerned ), the o 
should partly sit under the T. Typesetting programs such as LaTeX
need to know information about kerning so that they can make decisions
about where to break lines and pages. The same applies to WYSIWYG
publishing programs.
</Para>

<Para>
The other important component of a font is the outline, or shape.
The components of the fonts shape ( a stroke, an accent, etc )
are called ``glyphs''.
</Para>

</Sect2>

</Sect1>

<Sect1 id="xfonts">
<Title>Making Fonts Available To X</Title>

<Para>
There are a number of ways fonts can be added to X. Firstly, XFree86
has a <Emphasis>font path</Emphasis> which is just a list of several directories
or <Emphasis>font servers</Emphasis> where it searches for fonts. A font server
is just a background process that makes fonts available to XFree86. 
An advantage of font servers is that they can send fonts to remote displays.
</Para>

<Para>
Recently, <Literal remap="tt">xfs</Literal> ( the ``X font server'' ) has been patched 
to support TrueType fonts, and run as a stand-alone program.  
The patched version ships with RedHat and RedHat-based distributions,
and is included in XFree86 4.0 and newer.
<Literal remap="tt">xfs</Literal> is actually just the standard font server that comes
with XFree86. It's source code is part of the XFree86 source tree.
However, distributions have recently been shipping a version that runs
in stand-alone mode.
The stand-alone X font server, with the TrueType support 
patch ( the TrueType support takes place via a font server 
called <Literal remap="tt">xfsft</Literal> ) is probably the nicest font management 
solution currently available. Its advantages include:

<ItemizedList>
<ListItem>

<Para>
Support for different types of fonts, including Type 1, TrueType
and bitmap.
</Para>
</ListItem>
<ListItem>

<Para>
Makes fonts available to remote displays.
</Para>
</ListItem>
<ListItem>

<Para>
Greatly simplifies editing the fontpath -- you can do it via
the command line utility <Literal remap="tt">chkfontpath</Literal>, as opposed to
having to edit configuration files. This not only makes life
easier for users, it makes packaging more safer and more scriptable 
for packagers.
</Para>
</ListItem>

</ItemizedList>

</Para>

<Para>
Because different distributions ship with different configurations,
it is not true that one size fits all. We can split users up into
three groups:

<ItemizedList>
<ListItem>

<Para>
Your distribution ships with a stand-alone <Literal remap="tt">xfs</Literal>
and it has been patched to support TrueType. This group 
includes Redhat users and users of derivatives of Redhat 
such as Mandrake, and TurboLinux.
Debian 3.0 will also include the patched xfs, currently in testing.
For this group, the wisest strategy is to install both TrueType
and Type 1 fonts through <Literal remap="tt">xfs</Literal>
</Para>
</ListItem>
<ListItem>

<Para>
Some distributions ship with a stand-alone <Literal remap="tt">xfs</Literal>
package, but no TrueType support.
Note that XFree86 supports TrueType as of version 4.0.
This includes Debian stable ("potato").
 For these users, the best thing to do is use 
<Literal remap="tt">xfs</Literal> to install Type 1 fonts, and install TrueType
fonts via <Literal remap="tt">xfstt</Literal>. Debian users can seek out 
the 
<ULink
URL="http://www.dimensional.com/~bgiles/debian-tt.html"
>TrueType Fonts in Debian mini-HOWTO</ULink
>
for information about installing TrueType fonts in Debian.
</Para>
</ListItem>
<ListItem>

<Para>
If you don't have <Literal remap="tt">xfs</Literal> then you will need to install
Type 1 fonts by adding to their XFree86 font path and
using xset. 
using xset. XFree86 3.x users should install TrueType fonts
via <Literal remap="tt">xfstt</Literal>, while XFree86 4.x users can add them
to the X font path.

You should install TrueType fonts
via <Literal remap="tt">xfstt</Literal>.
</Para>
</ListItem>

</ItemizedList>

</Para>

<Sect2 id="fontpath">
<Title>The font path </Title>

<Para>
XFree86 finds your fonts by searching a <Emphasis>font path</Emphasis>,
a list of directories ( or servers -- we'll explain this 
further later. ) containing fonts.
When an application requests a font, it searches through 
the directories in your font path one at a time until the font
is found.
To make fonts available requires you to set your font path.
You can add a directory to your font path with the command
<Anchor id="xset">
	xset fp+ directory
	
Once you have done this, you need to ask the X server to re-scan 
for available fonts with the command 
<screen>
	xset fp rehash
</screen>	
Since you will want these commands to run automatically, you should
put them in your <Literal remap="tt">.xinitrc</Literal> file ( or possibly your 
<Literal remap="tt">.Xclients</Literal> or <Literal remap="tt">.xsession</Literal> file -- this depends on 
how you start X. It's convenient to make two of these files symlinks
to the other to avoid confusion ).
Another way to have the commands  set automatically is edit XF86Config.
For example, to add <Literal remap="tt">/usr/share/fonts/myfonts</Literal> to the font path
when X is started, edit <Literal remap="tt">XF86Config</Literal> like this:
<screen>
		...
		Section "Files"
		...
		
		FontPath /usr/share/fonts/myfonts
		...
		EndSection
		...
</screen>
The advantage of editing XF86Config is that the resulting changes 
are system wide.
</Para>

</Sect2>

<Sect2>
<Title>Installing Type 1 Fonts</Title>

<Sect3>
<Title>Run Type1inst</Title>

<Para>
The easiest way to make Type 1 fonts available to X is with the
help of the Type1inst utility. This is a perlscript that automatically
creates the fonts.dir and fonts.scale files that you need for X
to use the fonts. Simply CD to the directory, and run type1inst.
	cd directory
	type1inst
	
</Para>

</Sect3>

<Sect3>
<Title>If You Have the <Literal remap="tt">xfs</Literal> Package</Title>

<Para>
Now you need to add the fonts to your font path. If you already 
have the stand-alone <XRef LinkEnd="xfs"> running, you do this 
by editing your <Literal remap="tt">xfs</Literal> configuration file.
<Emphasis> 
RedHat users can just use chkfontpath<XRef LinkEnd="chkfontpath">.
the format is </Emphasis>
<Literal remap="tt">chkfontpath --add directory</Literal>
</Para>
<Para>
Your fonts will be available to X after you restart <Literal remap="tt">xfs</Literal>,
or tell it to reload by sending a SIGHUP. You may need to run
<Literal remap="tt">xset fp rehash</Literal> as well.
</Para>
<Para>
Your fonts should now be available to X. Now you 
just run
	xset fp rehash
	
and X will be able to find the new fonts.
</Para>

</Sect3>

<Sect3>
<Title>If You Don't Have The <Literal remap="tt">xfs</Literal> Package</Title>

<Para>
In this case, you need to add the directory containing 
your new fonts to the font path, as described previously.
</Para>

</Sect3>

</Sect2>

<Sect2>
<Title>True Type Fonts</Title>

<Para>
Adding TrueType fonts is a little more difficult, because you need 
to have a font server that is capable of serving TrueType fonts.
Two font servers that do this are xfstt and xfs.
</Para>

<Para>
<Literal remap="tt">xfstt</Literal> is a TrueType font server. While it's easy to configure,
and quite useful, it appear that <Literal remap="tt">xfs</Literal> is becoming more popular.
The main advantage of <Literal remap="tt">xfs</Literal> over <Literal remap="tt">xfstt</Literal> is that it supports
both Type 1 and TrueType fonts.
</Para>

<Sect3>
<Title>xfstt</Title>

<Para>
To set up xfstt, just download it and install it. 
Once you install it, you need to do the following:

<OrderedList>
<ListItem>

<Para>
	
install fonts into the appropriate
directory ( read the documentation that comes with the package ).
</Para>
</ListItem>
<ListItem>

<Para>
cd to that directory and run <Literal remap="tt">xfstt --sync</Literal>. This causes it
to look for the fonts and create the <Literal remap="tt">fonts.dir</Literal> file. 
</Para>
</ListItem>
<ListItem>

<Para>
Now add <Literal remap="tt">unix/:7100</Literal> to your font path.
</Para>
</ListItem>

</OrderedList>

Your TrueType fonts should now display and be available to applications
such as GIMP and Netscape.
You may want to configure it to start every time your system starts up.
Check to see if there's a startup file included ( if you are using 
RPM, you can use <Literal remap="tt">rpm -ql xfstt &verbar;grep init</Literal> and look for the 
file with a name something like this: <Literal remap="tt">/etc/rc.d/init.d/xfstt</Literal>
) 
If you don't have an init script, just
put two  lines in <Literal remap="tt">/etc/rc.local</Literal> like this:
<screen>
	/usr/X11R6/bin/xfstt --sync
	/usr/X11R6/bin/xfstt &#38;
</screen>	
</Para>

</Sect3>

</Sect2>

<Sect2 id="xfs">
<Title>xfs</Title>

<Para>
Some of the newer Linux distributions ship with the X font server 
<Literal remap="tt">xfs</Literal> configured to run as a stand alone program. 
Notably, Redhat and all the redhat based distributions use this 
modularised <Literal remap="tt">xfs</Literal> with TrueType compiled in.
Debian also ship <Literal remap="tt">xfs</Literal>, but the version 
 they ship in stable ("potato") doesn't have built in true 
 type support, though the one in testing ("woody") does.


</Para>

<Para>
Running <Literal remap="tt">xfs</Literal> 
as a stand alone server has several benefits, especially 
if it is compiled with TrueType support. The main advantage is that since
the font server is no longer attached to the X server, it is possible
to serve fonts to remote displays. Also, it makes it much easier
to modify the font path.
</Para>

<Sect3>
<Title>The <Literal remap="tt">xfs</Literal> Path</Title>

<Para>
As a font server, <Literal remap="tt">xfs</Literal> has it's own font path. 
One might wonder where this fits into the picture. It
works like this: you can place the <Literal remap="tt">xfs</Literal> font server
in XFree86's font path, by adding <Literal remap="tt">unix/:port</Literal> to
the XFree86 font path.
Once you do this, any font in the <Literal remap="tt">xfs</Literal> font path
automatically becomes available to XFree86.
</Para>

<Para>
The <Literal remap="tt">xfs</Literal> font path 
is determined by the <Literal remap="tt">xfs</Literal> configuration file,
which is <Literal remap="tt">/etc/X11/fs/config</Literal> on Redhat, and 
<Literal remap="tt">/etc/X11/xfs/config</Literal> on Debian.
Redhat users do not need to explicitly edit this file, they 
can use the <Literal remap="tt">chkfontpath</Literal> utility.
The syntax is simple:
<Anchor id="chkfontpath"> 
<screen>
	chkfontpath --add directory
</screen>	
Users of other distributions can edit the configuration file as 
follows:
<screen>
	catalogue = /usr/X11R6/lib/X11/fonts/misc:unscaled,
	...
	/usr/share/fonts/my_new_fonts/,
	...
	/usr/share/fonts/some_other_directory
	# in 12 points, decipoints
	default-point-size = 120
	...
</screen>	
The above would add <Literal remap="tt">/usr/share/fonts/my&lowbar;new&lowbar;fonts/</Literal> to the
<Literal remap="tt">xfs</Literal> font path. <Emphasis>Note that the last line of the list of 
directories doesn't have a comma at the end.</Emphasis>
For these modifications to the font path to become effective, <Literal remap="tt">xfs</Literal>
 	must be told to reload by running <Literal remap="tt">/etc/init.d/xfs reload</Literal> or
 	sending it a SIGHUP with "kill -HUP [pid]" or "killall -HUP xfs". Alternately
 	you can just re-start xfs, though if you do that it would be a good idea to re-start
 	your X session too.
</Para>

</Sect3>

<Sect3>
<Title>Installing a Font Into <Literal remap="tt">xfs</Literal></Title>

<Para>
To prepare a font for <Literal remap="tt">xfs</Literal>, you need to follow the following 
steps:

<ItemizedList>
<ListItem>

<Para>
If you don't have xfs installed, you need to install it.
</Para>
</ListItem>
<ListItem>

<Para>
Put the new fonts in a directory.
</Para>
</ListItem>
<ListItem>

<Para>
If you are installing Type 1 fonts,
prepare the new directory for the server 
by running <Literal remap="tt">type1inst</Literal> in the directory.
</Para>
</ListItem>
<ListItem>

<Para>
If you are installing
TrueType fonts, ( <Emphasis>remember, not all distributions can do TrueType via
xfs ! </Emphasis> ), prepare the new directory for the server by running 
	ttmkfdir -o fonts.scale
	mkfontdir
	
in the directory containing your new fonts. If you created a new directory
for the fonts you may need to copy fonts.scale to fonts.dir or create a
symbolic link.
<Literal remap="tt">ttmkfdir</Literal> is part of the <Emphasis>freetype</Emphasis> package.
</Para>
</ListItem>
<ListItem>

<Para>
Now you can add the new directory to your <Literal remap="tt">xfs</Literal> search path. 
Users of Redhat-like distributions 
can do this with the <Literal remap="tt">chkfontpath</Literal> utility:
Other users can do this by editing their <Literal remap="tt">xfs</Literal> configuration
file.
</Para>
</ListItem>
<ListItem>

<Para>
if <Literal remap="tt">xfs</Literal> is already installed on your system,
you should see which port it is running on. You can do this
as follows:
<screen>
	ps ax|grep xfs
</screen>	
</Para>
</ListItem>
<ListItem>

<Para>
Then check your XFree86 font path. 
		xset -q
	
</Para>
</ListItem>
<ListItem>

<Para>
If your font path includes something like <Literal remap="tt">unix:/port&lowbar;number</Literal>
were <Emphasis>port&lowbar;number</Emphasis> is the port which the server is running on, then
you already have xfs set up properly. Otherwise, you should add it to
your XFree86 font path.
		xset fp+ unix/:port_number
		xset fp rehash
	
You can add it permanently by editing your <Literal remap="tt">.xinitrc</Literal> as explained 
previously.
To add it system wide, edit your XF86Config file ( probably either 
<Literal remap="tt">/etc/X11/XF86Config</Literal>, <Literal remap="tt">/etc/XF86Config</Literal> or
<Literal remap="tt">/usr/X11R6/lib/X11/XF86Config</Literal> ), by adding a 
line <Literal remap="tt">FontPath "unix:/port&lowbar;number"</Literal> in the Files section.
Here's an example:
<screen>
		...
		Section "Files"
		...
		
		FontPath "unix/:-1" 
		...
		EndSection
		...
</screen>	
</Para>
</ListItem>
<ListItem>

<Para>
If <Literal remap="tt">xfs</Literal> is already properly installed, then you 
can tell it to reload, as described above, or restart 
it like this:
<screen>
		/etc/rc.d/init.d/xfs restart
</screen>	
</Para>
</ListItem>
<ListItem>

<Para>
After restarting <Literal remap="tt">xfs</Literal>, it's a good idea to restart your
X-session.
</Para>
</ListItem>

</ItemizedList>

</Para>

</Sect3>

</Sect2>

</Sect1>

<Sect1>
<Title>Making Fonts Available To Ghostscript</Title>

<Para>
To make fonts available to ghostscript, it suffices to tell ghostscript
where the files corresponding to a given font are located. The
file that needs to be edited is 
<Literal remap="tt">/usr/share/ghostscript/version/Fontmap</Literal>.
The format is very simple, almost immediately self evident on 
perusing it.
</Para>

<Sect2 id="ghostscript">
<Title>Type 1

	</Title>

<Para>
Adding Type 1 fonts is straightforward. Run <Literal remap="tt">type1inst</Literal> on the directory
containing the font. <Literal remap="tt">type1inst</Literal> will output a file called 
<Literal remap="tt">Fontmap</Literal>. Append this file to the ghostscript
<Literal remap="tt">Fontmap</Literal> file.
</Para>

</Sect2>

<Sect2>
<Title>True Type
	</Title>

<Para>
Adding truetype fonts is a little trickier, because we have to get the
name of the TrueType font. One way (brute force, alas) to do this is using 
the <Literal remap="tt">ttf2pt1</Literal> TrueType to Type 1 converter, and grabbing the font
name from the <Literal remap="tt">afm</Literal> ( there's got to be a more efficient way ! 
but this works, ugly as it is ). You do it like this:
<screen>
		ttf2pt1 -A fontname - 2 &gt; /dev/null  |grep FontName
</screen>	
Then you add an entry to the ghostscript <Literal remap="tt">Fontmap</Literal> file
in the correct format, eg
	some-font	(/usr/share/fonts/subdirectory/somefont.pbf);
	
Well, that works fine, but try doing it with 500 or so fonts.
This is the kind of thing that calls for a short perlscript:
<screen>
#!/usr/bin/perl
# ttfontmap -- generate fontmap file for TrueType fonts
my $directory=shift || print STDERR "Usage: ttfontmap {directory}\n";

$directory=~s/\/$//;

for my $fontname ( glob ( "$directory/*.ttf" ) )
{
    open ( R, "sh -c \"ttf2pt1 -A $fontname - 2&gt;/dev/null\" |" );
    while ( &#60;R&#62; )
    {
        if ( $_ =~ /^FontName/ )
        {
            s/^FontName\s*//;
            chomp;
            print "/" .  $_ . "    ($fontname);\n" ;
        }
    }
    close R;
}           
</screen>	
<Emphasis>You can 
<ULink
URL="http://pegasus.rutgers.edu/~elflord/font_howto/ttfontmap"
>download this script</ULink
></Emphasis>	
</Para>

<Para>
To set this script up, all you need to do is cut and paste it into
a file called <Literal remap="tt">ttfontmap</Literal>, and place the file somewhere
in your <Literal remap="tt">PATH</Literal> ( such as <Literal remap="tt">/usr/bin</Literal> ).
You run this script like this: 
<screen>
	ttfontmap directory &gt; output_file
</screen>	
where <Literal remap="tt">directory</Literal> is the directory containing the 
fonts. You are left with the file <Literal remap="tt">output&lowbar;file</Literal> which you can append
to your ghostscript fontmap. Note: some will observe that you could 
just use 
	ttfontmap directory &gt;&gt; /usr/share/ghostscript/version/Fontmap
	
However, I advise against this ( what would happen if you typed ``&gt;'' instead of 
``&gt;&gt;''
? )
</Para>

</Sect2>

<Sect2>
<Title>Using Ghostscript To Preview Fonts</Title>

<Para>
Once you've made fonts available to ghostscript, you can preview them.
Do this by running the ghostscript interpreter on the file <Literal remap="tt">prfont.ps</Literal>
in your ghostscript installation, and after you start it, type:
	/Fontname DoFont
	
at the ghostscript font ( where <Literal remap="tt">FontName</Literal> is the ghostscript
name of the font you wish to preview ).
There are several other ways you can invoke <Literal remap="tt">gs</Literal>. For example,
if you want to create a PostScript file that you can look at in 
a nicer PostScript viewer such as <Literal remap="tt">gv</Literal>, you can use
	gs -sDEVICE=pswrite -sOutputFile=somefile.ps  prfont.ps
	
Having done this, you can also print your output file.
</Para>

</Sect2>

</Sect1>

<Sect1>
<Title>True Type to Type 1 Conversion</Title>

<Sect2>
<Title>Why ?</Title>

<Para>
or perhaps the right question to ask is ``why not ?'' The typical
Linux user has experienced a migration from Windows, and probably 
has an enormous collection of TrueType fonts. Many of these
fonts ( eg those that ship with MS Word and Corel's products ) 
are of fairly good quality. However, some Linux applications, such
as Star Office and LaTeX do not support TrueType fonts, but do support
Type 1 fonts.  <Emphasis>update: it looks like Star Office can handle TrueType 
fonts, but I'm still trying to work out the details. At best, it involves
some fairly gruesome hacks.</Emphasis>
This is a pity, because
with ghostscript support for TrueType, and TrueType font servers,
Linux has the infrastructure it needs to handle TrueType.
</Para>

</Sect2>

<Sect2>
<Title>How ?</Title>

<Para>
To convert your TrueType fonts into Type 1 fonts, go to
<ULink
URL="http://quadrant.netspace.net.au/ttf2pt1/"
>http://quadrant.netspace.net.au/ttf2pt1/</ULink> 
and get ttf2pt1. 
To convert a TrueType to a Type 1 font,
use the following syntax:
<screen>
	ttf2pt1 -b file.ttf name
</screen>	
Where <Literal remap="tt">name</Literal> is the name of the file corresponding to the new Type 1
font ( ie it's arbitrary. It's a good idea to make it the same as the ttf file. 
eg <Literal remap="tt">ttf2pt1 -b foo.ttf foo</Literal>.
</Para>

<Para>
Well, that worked fine for one font. If we have a lot, we 
need a smarter way to do it. One can just 
just use a loop:
<screen>
	for X in *.ttf; do ttf2pt1 -b $X ${X%%.ttf}; done
</screen>
	
Alternatively, you can download the
<ULink URL="http://pegasus.rutgers.edu/~elflord/font_howto/ttfutils-0.2.tar.gz">ttfutils</ULink>
package and use <Literal remap="tt">ttf2type1</Literal> for the conversions.
<screen>
	ttf2type1 *.ttf
</screen>	
</Para>

</Sect2>

</Sect1>

<Sect1>
<Title>WYSIWYG Publishing and Fonts</Title>

<Sect2>
<Title>Introduction and Overview</Title>

<Para>
Installing fonts for WYSIWYG publishing on Linux is a relatively
complex task. It typically involves three steps:

<ItemizedList>
<ListItem>

<Para>
Make the font available to the X server
</Para>
</ListItem>
<ListItem>

<Para>
Make the font available to ghostscript
</Para>
</ListItem>
<ListItem>

<Para>
Make the font available to the application
</Para>
</ListItem>

</ItemizedList>

The main reason for the complexity is that 
the <Emphasis>font printing system</Emphasis> ( ghostscript ) is unrelated 
to the <Emphasis>screen font system</Emphasis>. In a way, Linux's left hand
does not know what it's right hand is doing.
This problem is nontrivial to solve, because it is possible that 
printer fonts and display fonts reside on different machines, so there
is no guarantee that all fonts the XClient uses are printable.
</Para>

<Para>
The good news is that most WYSIWYG applications use what is a reasonable solution
to this problem. The solution involves constructing some kind of
mechanism that maps screen fonts to printer fonts ( this is the main issue.
There are also other issues, such as grouping bold, italic and roman variants
into ``families'' of fonts ).
Unfortunately, there is no standard way to do this. It seems that font management
standards which address this issue would greatly simplify the installation
of fonts into WYSIWYG publishing systems, because all applications could 
use a system-wide ( as opposed to application-specific ) configuration.
</Para>

</Sect2>

<Sect2>
<Title>Applixware</Title>

<Para>
There are two ways to install fonts into Applixware. One method 
involves using FontTastic, which is Applixware's ``private'' font
server. The other method involves editing Applixware's fontmap,
to use a font already installed on the system. Installing into the
font server is more convenient, but fonts installed in this manner may 
only be printed at 300 dpi.
</Para>

<Sect3>
<Title>FontTastic</Title>

<Para>
Using FontTastic is the easy way to do it. To install new fonts
like this, simply do the following:

<OrderedList>
<ListItem>

<Para>
Run Applixware as root
</Para>
</ListItem>
<ListItem>

<Para>
Click on the <Emphasis>tools</Emphasis> menu.
</Para>
</ListItem>
<ListItem>

<Para>
Choose ``Font Installer''
</Para>
</ListItem>
<ListItem>

<Para>
Check ``OK'' in the popup dialog
</Para>
</ListItem>
<ListItem>

<Para>
Click the ``Catalogs'' menu and choose ``create''
</Para>
</ListItem>
<ListItem>

<Para>
Fill in the <Emphasis>catalog name</Emphasis> box. It 
doesn't matter what you put there. For the rest of this example,
we'll assume it's called ``foobar''
</Para>
</ListItem>
<ListItem>

<Para>
Select your foobar catalog from the catalog manipulations 
list.
</Para>
</ListItem>
<ListItem>

<Para>
From the ``Services'' menu, select
``install fonts into -&gt; FontTastic font server''
</Para>
</ListItem>
<ListItem>

<Para>
Make sure catalog foobar is selected in the catalogs list,
then press the ``select files'' button.
</Para>
</ListItem>
<ListItem>

<Para>
Use the select files dialog to select the fonts you want to
install. Press ``OK'' when you've selected the files.
For example, if you want to select arial.ttf in 
the directory /usr/share/fonts/ttfonts/, you would type 
<Emphasis>/usr/share/fonts/ttfonts</Emphasis> in the ``Current Directory''
dialog, then select arial.ttf from the files dialog box, then click
``OK''. Note that you can select multiple files, but they all must
come from the same directory.
</Para>
</ListItem>
<ListItem>

<Para>
You can edit your list by checking on the different fonts in the
list box and possibly removing or renaming them.
</Para>
</ListItem>
<ListItem>

<Para>
When you're ready, click the ``install fonts'' button. Then click
``OK''.
</Para>
</ListItem>
<ListItem>

<Para>
Go to the ``services'' menu and choose ``update''. Check ``OK''
on the annoying modal dialog, then choose exit from the services menu.
Exit applix. 
</Para>
</ListItem>
<ListItem>

<Para>
Congrats, you're done ! The new fonts will be available when you
restart Applix.
</Para>
</ListItem>

</OrderedList>

</Para>

</Sect3>

<Sect3>
<Title>Using System Wide Fonts With Applixware</Title>

<Para>
This method is more involved,  but produces better results. I recommend
that this method is used for fonts that are really important, and that 
you use a lot. There are a few steps to this:
</Para>

<Sect4>
<Title>Make the fonts available to X</Title>

<Para>
This is explained <XRef LinkEnd="xfonts">
</Para>

</Sect4>

<Sect4>
<Title>Make the fonts available to ghostscript</Title>

<Para>
This is explained in <XRef LinkEnd="ghostscript">
</Para>

</Sect4>

<Sect4>
<Title>Edit the fontmap.dir</Title>

<Para>
This is the final step in making your fonts available to Applix, and 
also the most time consuming step. The file <Emphasis>fontmap.dir</Emphasis>
is in under the <Emphasis>axdata/fontmetrics</Emphasis> of your applix installation.
The purpose of this step is basically to tell applix which screen fonts
go with which outline fonts. This is in general a very nontrivial problem,
because the screen fonts are not always on the same computer that the 
application is installed.
</Para>

<Para>
We describe how to add  fonts to fontmap.dir. In this example, we
add the font Baskerville Italic.
</Para>

<Para>

<OrderedList>
<ListItem>

<Para>
First, we add a line that says 
FontRecord = Baskerville-Normal-Italic
In fact, the name we use in FontRecord is completely arbitrary.
However, the font record must be unique to the font. Because of
this, it's good practice to use the name that ghostscript
uses for the font. 
</Para>
</ListItem>
<ListItem>

<Para>
Next, we a line that says
Family = Baskerville
The family name for a font is the name that appears 
in Applix's font selection menu. Typically, it is <Emphasis>non-unique</Emphasis>,
since bold, italic, roman and bold-italic variants of a font will
typically go under the same family.
</Para>
</ListItem>
<ListItem>

<Para>
If the font is either a bold, or italic variant, or both, we need to add the
following lines:
	Slant = 1 
	
if the font is italic, and
	Weight = 1 
	
if the font is bold.
If the font is bold <Emphasis>and</Emphasis> italic, we add both lines.
In this example, we need only add the line
	Slant = 1 
	
</Para>
</ListItem>
<ListItem>

<Para>
We add a line that looks like this:
	ScreenName = "-paradise-baskerville-medium-i-normal--0-0-0-0-p-0-iso8859-1"
	
The screen name is the name that the X-server uses for the font. 
We can list font names containing the string ``bask'' by typing
	xlsfonts|grep -i bask
	
</Para>
</ListItem>
<ListItem>

<Para>
Now we add a line that gives the name of the printer font:
PostScriptPrinterName = Baskerville-Normal-Italic
</Para>
</ListItem>
<ListItem>

<Para>
Next, we need to specify the location of the font metric file 
and the outline file
	MetricsFile = /usr/share/fonts/misc/baskvli.afm
	Type1FontFileName = /usr/share/fonts/misc/baskvli.pfb
	

If you are adding a TrueType file, you can use <Literal remap="tt">ttf2pt1 </Literal>
to generate an <Literal remap="tt">afm</Literal> file :
		ttf2pt1 -A foo.ttf - &gt; foo.afm
		
( or get the ttfutils package and use <Literal remap="tt">ttf2afm</Literal> )
Then you use something like this:
	MetricsFile = /usr/share/fonts/misc/foo.afm
	
Do <Emphasis>not</Emphasis> include a <Literal remap="tt">Type1FontFileName</Literal> directive --
let ghostscript take care of this.
</Para>
</ListItem>

</OrderedList>

</Para>

<Para>
That's it. Now after adding the whole family of fonts, you should 
have something like this:
<screen>
	FontRecord = Baskerville-Normal
	Family = Baskerville
	ScreenName = "-paradise-baskerville-medium-r-normal--0-0-0-0-p-0-iso8859-1"
	PostScriptPrintName = Baskerville-Normal
	MetricsFile = /usr/share/fonts/misc/baskvl.afm
	Type1FontFileName = /usr/share/fonts/misc/baskvl.pfb

	FontRecord = Baskerville-Normal-Italic
	Family = Baskerville
	Slant = 1
	ScreenName = "-paradise-baskerville-medium-i-normal--0-0-0-0-p-0-iso8859-1"
	PostScriptPrintName = Baskerville-Normal-Italic
	MetricsFile = /usr/share/fonts/misc/baskvli.afm
	Type1FontFileName = /usr/share/fonts/misc/baskvli.pfb

	FontRecord = Baskerville-Bold
	Family = Baskerville
	Weight = 1
	ScreenName = "-paradise-baskerville-bold-r-normal--0-0-0-0-p-0-iso8859-1"
	PostScriptPrintName = Baskerville-Bold
	MetricsFile = /usr/share/fonts/misc/baskvlb.afm
	Type1FontFileName = /usr/share/fonts/misc/baskvlb.pfb     

	FontRecord = Baskerville-Bold-Italic
	Family = Baskerville
	Weight = 1
	Slant = 1
	ScreenName = "-paradise-baskerville-bold-i-normal--0-0-0-0-p-0-iso8859-1"
	PostScriptPrintName = Baskerville-Bold-Italic
	MetricsFile = /usr/share/fonts/misc/baskvlbi.afm
	Type1FontFileName = /usr/share/fonts/misc/baskvlbi.pfb     
</screen>
</Para>

<Para>
It is possible to do more with this configuration file. The file itself 
has a <Emphasis>glossary</Emphasis> which explains the format of the configuration
file.
</Para>

</Sect4>

</Sect3>

</Sect2>

<Sect2>
<Title>Star Office</Title>

<Para>
Here, we cover Star Office 5.0. The procedure with Star Office 5.1 
is similar,
but the utility is called <Literal remap="tt">spadmin</Literal>, not <Literal remap="tt">psetup</Literal>.
It's worth mentioning up front that 
<ULink
URL="http://www.mindspring.com/~john_mcl/adding_fonts.html"
>John McLaughlin's page</ULink
>
is an excellent source on this issue, and it inspired most
of what follows.
</Para>

<Para>
Having tried both Star Office 5.0, and 5.1, I have found that Star Office
5.1 seems to give me less grief when adding new fonts. I was not succesful
adding true type fonts to Star Office 5.0, but it proved somewhat easier
with Star Office 5.1.
</Para>

<Sect3>
<Title>Backup Your Configuration Before you Start !</Title>

<Para>
It's good to make a backup in case you inadvertantly hose your 
configuration. Modifying fonts will impact several files in the
<Literal remap="tt">xp3</Literal>.
You should definitely backup the file <Literal remap="tt">xp3/psstd.fonts</Literal>. 
I recommend going further and backing up the whole <Literal remap="tt">xp3</Literal>
directory. You can do this by cd-ing to your Star Office
directory, then using
<screen>
	tar cvzf xp3.tgz xp3
</screen>	
to create a backup. To restore a backup,
delete the <Literal remap="tt">xp3</Literal> directory and unpack the archive
<screen>
	rm -rf xp3
	tar xvzf xp3.tgz
</screen>
	
</Para>

</Sect3>

<Sect3>
<Title>Adding Type 1 Fonts to Star Office</Title>

<Para>
Adding Type 1 fonts to Star Office is relatively simple.
If you want to use your TrueType fonts with Star Office 5.0,
the best thing to do is convert them to Type 1 fonts, and then follow
the procedure outlined here. If you have Star Office 5.1, you 
might wish to use the proceedure for installing TrueType fonts
instead ( though it is somewhat more difficult ).
Firstly, do the usual thing -- make the font available to both X and 
ghostscript. Once this is done, the font can be installed into Star Office
using the <Literal remap="tt">psetup</Literal> tool. The procedure is as follows:

<OrderedList>
<ListItem>

<Para>
As root, run psetup ( or spadmin if you have Star Office 5.1 )
</Para>
</ListItem>
<ListItem>

<Para>
Press the ``add fonts'' button. 
</Para>
</ListItem>
<ListItem>

<Para>
The easiest thing to do after 
this is press the ``initialize font paths'' button. This puts a
list of all fonts in your X font path in the list box. 
</Para>
</ListItem>
<ListItem>

<Para>
Choose 
the directory containing the font you wish to install ( it should
be in the box ), and then press ``OK''. 
</Para>
</ListItem>
<ListItem>

<Para>
Click the ``convert all font metrics button''.
</Para>
</ListItem>

</OrderedList>

That's it. You're done. You can exit ( or click ``OK'' until it exits ). 
When you restart Star Office, you will have the new fonts.
</Para>

</Sect3>

<Sect3>
<Title>Adding TrueType Fonts to Star Office</Title>

<Para>
Adding TrueType fonts to Star Office is 
nontrivial, but possible.
After some hard work, and long hours stareing at 
<ULink
URL="http://www.mindspring.com/~john_mcl/adding_fonts.html"
>John McLaughlin's page</ULink
>
page, I finally got them working in Star Office 5.1.
Note that this does not work with version 5.0.
The following steps are appropriate it you are printing 
through ghostscript:

<ItemizedList>
<ListItem>

<Para>
Make the fonts available to X.
</Para>
</ListItem>
<ListItem>

<Para>
Make the fonts available to ghostscript.
</Para>
</ListItem>
<ListItem>

<Para>
You need to have <Literal remap="tt">afm</Literal> files for the fonts you wish to
add. Use 
<screen>
	ttf2pt1 -A foo.ttf - &gt; foo.afm
	</screen>	
to create the <Literal remap="tt">afm</Literal> files.
Alternatively, you can get the 
</Para>
</ListItem>
<ListItem>

<Para>
<ULink
URL="http://pegasus.rutgers.edu/~elflord/font_howto/ttfutils-0.2.tar.gz"
>ttfutils</ULink
>
package 
and use <Literal remap="tt">ttf2afm</Literal> The advantage of this 
is you can handle several at a time, eg 
<screen>
	ttf2afm *.ttf
</screen>	
</Para>
</ListItem>
<ListItem>

<Para>
Star Office needs <Literal remap="tt">pfb</Literal> files corresponding 
to each <Literal remap="tt">ttf</Literal> file. You can create them 
with the command
<screen>
	touch foo.pfb
</screen>	
Actually, Star Office only uses these files for printing purposes.
And by enterring the font in the PPD, thus duping Star Office into
thinking the fonts are inside your printer ( when they're actually
inside ghostscript's rendering system ), you get around needing to
use these files. Star Office just seems to require that the 
<Literal remap="tt">pfb</Literal> file exists to install the font.
</Para>
</ListItem>
<ListItem>

<Para>
	Now you can run <Literal remap="tt">spadmin</Literal> and install the font(s).
</Para>
</ListItem>
<ListItem>

<Para>
	
Now add the fonts to the PPD file corresponding to your 
printer configuration. The name you use for the font should
be the same name Star Office uses for it, <Emphasis>not</Emphasis> the 
ghostscript font name. For example, if the font is 
<Literal remap="tt">foobar.ttf</Literal> and the corresponding <Literal remap="tt">afm</Literal> 
file is <Literal remap="tt">foobar.afm</Literal>, you use the name
``foobar'' for the font in the PPD file. The entry 
should look something like this:
<screen>
*Font cloistrk: Standard "(001.002)" Standard ROM
	</screen>	
</Para>
</ListItem>

</ItemizedList>

</Para>

<Para>
On the other hand, if you are not printing from ghostscript,
you have different issues to deal with. In this case, 
tricking Star Office into thinking that your printer has the fonts
is a bad idea, because your printer does <Emphasis>not</Emphasis> have the
fonts in the ROM, so while <Literal remap="tt">gv</Literal> will display the PostScript
files nicely, your printer will not be able to print them.
If you have a PostScript printer, the main differences are as follows:

<ItemizedList>
<ListItem>

<Para>
Do not edit the PPD file.
</Para>
</ListItem>
<ListItem>

<Para>
Instead of using <Literal remap="tt">touch foo.pfb</Literal> to create empty <Literal remap="tt">pfb</Literal>
files, you need the <Literal remap="tt">pfb</Literal> files to be Type42 PostScript
fonts. A Type42 font is really a ``printer TrueType font''.
You don't really notice Type42 fonts even when you use them, because
most applications handle them transparently.
To create Type42 fonts, you use 
<ULink
URL="ftp://ftp.dcs.ed.ac.uk/pub/jek/programs/ttfps.tar.gz"
>ttfps</ULink
> to create the files. 
<screen>
	ttfps foo.ttf foo.pfb
	</screen>		
</Para>
</ListItem>

</ItemizedList>

</Para>

<Para>
There are some gotchas. Sometimes, Star Office might not choose the
screen font you like. It is sometimes worth checking 
<Literal remap="tt">xp3/psstd.fonts</Literal> and possibly editing it to make sure
that Star Office is really using the font you had in mind for screen 
display.
Also, Star Office doesn't handle configuration problems gracefully.
If there's something wrong with your configuration, it's
possible that the word processor will not even start. This is why 
you should back up your <Literal remap="tt">xp3</Literal> directory.
</Para>

</Sect3>

<Sect3>
<Title>Under the Hood</Title>

<Para>
If you wish to install TrueType fonts in Star Office, you may need
to learn how Star Office handles things. When you run <Literal remap="tt">spadmin</Literal>
or <Literal remap="tt">psetup</Literal>, the following happens:

<ItemizedList>
<ListItem>

<Para>
Star Office makes symbolic links to the <Literal remap="tt">pfb</Literal> outline 
files in your <Literal remap="tt">xp3/pssoftfonts</Literal> directory.
</Para>
</ListItem>
<ListItem>

<Para>
The <Literal remap="tt">afm</Literal> file is copied into the directory
<Literal remap="tt">xp3/fontmetrics/afm/</Literal>
</Para>
</ListItem>
<ListItem>

<Para>
An entry is added to the <Literal remap="tt">xp3/psstd.fonts</Literal> file.
This file stores the names of all the screen fonts used by 
Star Office ( in particular, it maps the screen fonts to the outline
filenames ).
</Para>
</ListItem>

</ItemizedList>

</Para>

<Para>
This is why it's good to simply backup the whole <Literal remap="tt">xp3</Literal> directory --
it is the only convenient way to restore Star Office to a 
clean configuration.
</Para>

</Sect3>

</Sect2>

<Sect2>
<Title>Word Perfect</Title>

<Para>
Nothing yet. 
<ULink
URL="http://www.rodsbooks.com/wpfonts/"
>Rod Smith's webpage</ULink
>
is the definitive resource regarding installing fonts on Word Perfect.
</Para>

</Sect2>

</Sect1>

<Sect1>
<Title>Netscape</Title>

<Para>
Perhaps the most notorious application as far as fonts are concerned is the
dreaded Netscape. However, there is a fairly simple procedure to attack 
Netscape font ugliness. The main problem is that Netscape wants to use  
75dpi fonts which is typically too small. You can fix this by specifying 
the appropriate X resources in your <Literal remap="tt">.Xdefaults</Literal> file:
<screen>
	Netscape*documentFonts.sizeIncrement: 20
	Netscape*documentFonts.xResolution*iso-8859-1: 100
	Netscape*documentFonts.yResolution*iso-8859-1: 100
</screen>
The number 100 can be chosen arbitrarily. For example, if you like your 
fonts really large, like I do, then you may want to use 150 instead.
</Para>

<Para>
The other essential tip with regard to addressing Netscape font ugliness is this --
get the Microsoft font pack. These fonts are widely used and it makes an enormous
difference if you have ( or don't have ) those fonts.
</Para>

</Sect1>

<Sect1>
<Title>TeX / LaTeX</Title>

<Sect2>
<Title>A Quick Primer on LaTeX/TeX fonts</Title>

<Para>
Adding fonts to TeX and LaTeX is a somewhat complex procedure. However, like
a lot of things, it's easy if you know how to do it.
Some fonts are distributed in metafont format, and some in Type 1 format. 
Usually, the Type 1 formats are more easily available. However, metafont fonts have 
the distinct advantage that they can adjust their shape at different sizes,
while Type 1 and TrueType fonts at different point sizes are simply magnified
or reduced versions of precisely the same shape. The main reason why this feature
is desirable is that ideally, fonts should be ( relatively ) wider at smaller
sizes and narrower at larger sizes.
</Para>

<Para>
For this discussion, we focus on Type 1 fonts, since they are more widely
available, and more problematic to install.
</Para>

<Para>
Here's a quick primer on LaTeX fonts.	 LaTeX uses the following 
types of font files for handling Type 1 fonts:

<ItemizedList>
<ListItem>

<Para>
 <Literal remap="tt">.pl</Literal> -- property list. This is a human readable version of a 
tex font metric file.
</Para>
</ListItem>
<ListItem>

<Para>
 <Literal remap="tt">.vpl</Literal> -- virtual property list. Human readable version of a 
virtual font file.
</Para>
</ListItem>
<ListItem>

<Para>
 <Literal remap="tt">.fd</Literal> -- font definition. Used to define a <Emphasis>family</Emphasis> of
fonts.
</Para>
</ListItem>
<ListItem>

<Para>
 <Literal remap="tt">.tfm</Literal>  -- tex font metric. This is a metric file, as explained
in the glossary. It is completely analogous to the <Literal remap="tt">.afm</Literal> files used
by Type 1 fonts. TeX needs the font metrics to properly layout the page.
</Para>
</ListItem>
<ListItem>

<Para>
 <Literal remap="tt">.vf</Literal> -- virtual font. These files contain encoding details, and
act as interpreters. TeX treats them as fonts. For example, 
Imagine that there's some wacky font foobar-exp.pfb which consists 
of a few ( say 20 ) alternate characters, and there's a virtual font 
which uses a few of these alternate characters ( and it gets the
rest of the characters from font foobar.pfb ).
Dvips might say
``I want character 65 of virtual font foo.vf''. Dvips knows that 65 is always
an ``a'' in TeX's scheme. Then the virtual font maps TeX's request to 
a request for character 14 of the Type 1 font foobar.pfb ( which might 
be the alternate ``a'' in the Type 1 font foobar.pfb ). The virtual font 
mechanism is very flexible and allows fonts to be constructed from many 
different font files. This is useful when using fonts such as adobe's
``expert'' fonts.
</Para>
</ListItem>
<ListItem>

<Para>
 <Literal remap="tt">.pk</Literal> -- a device dependent bitmap font. These are usually constructed
on an as-needed basis ( they are renderings of Type 1 and metafont fonts ). 
They are typically high resolution ( about 300-1200dpi ),
and are intended to be rendered on a printer. Because of their high resolution,
and the fact that each point size of each font requires a <Literal remap="tt">.pk</Literal> file,
they require a lot of disk space, so they are cached, but not stored.
</Para>
</ListItem>
<ListItem>

<Para>
<Literal remap="tt">.mf</Literal> -- metafont files. Metafont is a graphics programming language
widely used for font design ( though it can also be used for graphics ). 
It has many advantages over TrueType and Type 1 schemes. However, it's main
weakness is that it is not as ubiquitous as TrueType or Type 1 ( and it is also
not terribly well suited to WYSIWYG publishing. Of course, this isn't a 
major disadvantage when TeX is your typesetting system. )

</Para>
</ListItem>

</ItemizedList>

</Para>

<Para>
It's good to know your way around the TeX directory structure. Here are
the main directories you'll need to know about:

<ItemizedList>
<ListItem>

<Para>
 <Literal remap="tt">$TEXMF/fonts</Literal>	-- the main font directory
</Para>
</ListItem>
<ListItem>

<Para>
 <Literal remap="tt">$TEXMF/fonts/type1</Literal> -- the type1 font directory
</Para>
</ListItem>
<ListItem>

<Para>
 <Literal remap="tt">$TEXMF/fonts/type1/foundry</Literal> -- the directory for the shape files in a given foundry
</Para>
</ListItem>
<ListItem>

<Para>
 <Literal remap="tt">$TEXMF/fonts/type1/foundry/fontname</Literal> -- contains the font called <Emphasis>name</Emphasis>. 
The <Emphasis>name</Emphasis> is usually plain English, and needn't follow TeX's cryptic
naming scheme for fonts.
</Para>
</ListItem>
<ListItem>

<Para>
 <Literal remap="tt">$TEXMF/fonts/afm/foundry/fontname</Literal> -- the directory containing the <Literal remap="tt">afm</Literal>
files corresponding to the font <Literal remap="tt">name</Literal> belonging to foundry <Literal remap="tt">foundry</Literal>.
</Para>
</ListItem>
<ListItem>

<Para>
  <Literal remap="tt">$TEXMF/fonts/tfm/foundry/fontname</Literal> -- analogous to the <Literal remap="tt">afm</Literal> directory,
but contains <Literal remap="tt">tfm</Literal> files instead.
</Para>
</ListItem>
<ListItem>

<Para>
<Literal remap="tt">$TEXMF/fonts/vf/foundry/fontname</Literal> -- similar to the above, but contains the virtual fonts.
</Para>
</ListItem>
<ListItem>

<Para>
<Literal remap="tt">$TEXMF/fonts/source/foundry/fontname</Literal> -- similar to the above, but contains metafont files.
</Para>
</ListItem>
<ListItem>

<Para>
<Literal remap="tt">$TEXMF/dvips/config/psfonts.map</Literal> -- fontmap file for dvips. This file is similar
in both function and format to ghostscript's Fontmap file.
</Para>
</ListItem>
<ListItem>

<Para>
<Literal remap="tt">$TEXMF/tex/latex/psnfss</Literal> -- this is where all the font definition files go.
</Para>
</ListItem>

</ItemizedList>

</Para>

</Sect2>

<Sect2>
<Title>Adding Type 1 fonts</Title>

<Sect3>
<Title>Naming the fonts</Title>

<Para>
First, you need to appropriately name your fonts.
See the fontinst documentation on your system for instructions 
on how to name fonts ( it should be fontinst subdirectory of the
directory containing your tetex documentation ).
To make a long story very short, the naming scheme is 
<Literal remap="tt">FNW&lcub;V&rcub;E&lcub;n&rcub;</Literal> where:

<ItemizedList>
<ListItem>

<Para>
F is a one-letter abbreviation for the foundry ( m = monotype, p = adobe, 
b = bitstream, f = free )
</Para>
</ListItem>
<ListItem>

<Para>
N is a two letter abbreviation for the font name 
( for example, ag = ``avant garde'' )
</Para>
</ListItem>
<ListItem>

<Para>
W is the font weight ( r = regular, b = bold, l = light d = demibold )
</Para>
</ListItem>
<ListItem>

<Para>
V is an optional slope variant ( i = italic , o = oblique )
</Para>
</ListItem>
<ListItem>

<Para>
E is an abbreviation for the encoding ( almost always <Literal remap="tt">8a</Literal> which is 
adobe standard encoding ).
</Para>
</ListItem>
<ListItem>

<Para>
N is an optional width variant ( n = narrow )
</Para>
</ListItem>

</ItemizedList>

For example, the font Adobe Garamond demibold is <Literal remap="tt">pgad8a</Literal>.
</Para>

</Sect3>

<Sect3>
<Title>Creating the virtual fonts and tex font metrics</Title>

<Para>
Now you can run <Literal remap="tt">fontinst</Literal> as follows:
	latex `kpsewhich fontinst.sty`
	
then you type at the prompt:
	\latinfamily{font_name}{}\bye
	
where <Literal remap="tt">font&lowbar;name</Literal> is the first three letters of your 
font file name ( for example, <Literal remap="tt">pad</Literal> for adobe garamond ).
Now <Literal remap="tt">fontinst</Literal> will generate a number of files -- 
font description files, property list files and virtual property
list files. It also generates a lot of <Literal remap="tt">.mtx</Literal> files. These
are created by <Literal remap="tt">fontinst</Literal>, but you don't need to use them.
You need to convert the property lists and virtual property lists
to metrics and virtual fonts. This is done using the utilities 
<Literal remap="tt">vptovf</Literal> and <Literal remap="tt">pltotf</Literal>.
	for X in *.pl; do pltotf $X; done
	for X in *.vpl; do vptovf $X; done
	
Then remove the old <Literal remap="tt">vpl</Literal>, <Literal remap="tt">pl</Literal> and <Literal remap="tt">mtx</Literal> files.
</Para>

</Sect3>

<Sect3>
<Title>Configure dvips</Title>

<Para>
You will need to edit your dvips config file, <Literal remap="tt">psfonts.map</Literal>.
The best way to explain the format of the file is to give an example.
<screen>
	marr8r          ArialMT &lt;8r.enc &lt;farr8a.pfa
	marbi8r         Arial_BoldItalicMT &lt;8r.enc &lt;farbi8a.pfa
	marb8r          Arial_BoldMT &lt;8r.enc &lt;farb8a.pfa
	marri8r         Arial_ItalicMT &lt;8r.enc &lt;farri8a.pfa
	marr8rn         Arial_Narrow &lt;8r.enc &lt;farr8an.pfa
</screen>	
The <Literal remap="tt">8r.enc</Literal> is simply there to inform dvips of the encoding scheme 
used ( in all our examples, it's 8r, because of the way <Literal remap="tt">fontinst</Literal> 
constructs the virtual fonts ). The leftmost column is the font name TeX
uses. The second column is the real name of the font, which is hardcoded
into the font file ( this name can be 
deduced by opening the <Literal remap="tt">afm</Literal> file in a text editor, and looking 
for the <Literal remap="tt">FontName</Literal> directive ). The last column is the filename 
of the shape file corresponding with the font. It is not necessary to
provide a directory path -- tex knows where to look.
</Para>

</Sect3>

<Sect3>
<Title>Test the font</Title>

<Para>
Try running latex on a document like this:
\documentclass{article}
\begin{document}
	\usefont{T1}{pga}{m}{n}\selectfont
	\huge
	Testing a new font \dots the quick red fox jumped over the lazy brown dogs
\end{document} 
	 
where you replace <Literal remap="tt">pga</Literal> with the outline of your font.
If this works, you are almost done. All you have to do now is put all the 
files in the right directories ( as explained in the primer ), then 
run 
	 texconfig rehash
	 
so that tex can update the directory lists.
</Para>

</Sect3>

<Sect3>
<Title>Create a .sty file</Title>

<Para>
You may want to create a .sty file so that you can more easily use 
fonts. Use the files in <Literal remap="tt">$TEXMF/tex/latex/psnfss</Literal> as a template.
</Para>

</Sect3>

</Sect2>

</Sect1>

<Sect1>
<Title>Getting Fonts For Linux</Title>

<Sect2>
<Title>True Type</Title>

<Sect3>
<Title>Commercial Software
	</Title>

<Para>
True type fonts are very
easy to come by, and large amounts of them are typically included
in packages like Microsoft Word and Word Perfect. Getting Word 
Perfect is an easy way to get an enormous amount of fonts ( and 
if you're really cheap, you could buy a legacy version of Word Perfect for 
windows. The fonts on the CD are readable. ) 
</Para>

</Sect3>

<Sect3>
<Title>Microsoft's Font Download
	</Title>

<Para>
Microsoft have also made several TrueType fonts available. The
<Literal remap="tt">.exe</Literal> file is simply an archive, you can extract it 
using <Literal remap="tt">unzip</Literal>.
You can get them from
<ULink
URL="http://www.microsoft.com/truetype/fontpack/win.htm"
>the download site</ULink
>
</Para>

</Sect3>

<Sect3>
<Title>Luc's Webpage
	</Title>

<Para>
<ULink
URL="http://cgm.cs.mcgill.ca/~luc/originalfonts.html"
>Luc Devroye's webpage</ULink
>
has links to several sites with free fonts available.
What's unique about these fonts is that a lot of them are really free, they 
are not ``warez fonts''.
</Para>

</Sect3>

<Sect3>
<Title>Web sites with truetype fonts
	</Title>

<Para>
There are several web sites offering freely available downloadable
fonts. For example, 
<ULink
URL="http://www.freewareconnection.com/fonts.html"
>the freeware connection</ULink
> has links to a number of archives.
</Para>

</Sect3>

<Sect3>
<Title>Foundries
	</Title>

<Para>
Several foundries sell TrueType fonts. However, most of them
are quite expensive, and for the same money, you'd be better 
of with Type 1 fonts. I'll discuss these more in the Type 1 fonts
section. The one place that does do sell true type fonts 
at low prices is 
<ULink
URL="http://www.buyfonts.com"
>buyfonts</ULink
>.
Please read the section on ethics before you buy cheap fonts.
</Para>

</Sect3>

</Sect2>

<Sect2>
<Title>Type 1 Fonts and Metafont</Title>

<Sect3>
<Title>Dealing With Mac and Windows Formats</Title>

<Para>
Many foundries ship fonts with Windows and Mac users in mind.
This can sometimes pose a problem. Typically, the ``Windows fonts''
are fairly easy to handle, because they are packed in a <Literal remap="tt">zip</Literal>
file. The only work to be done is converting the <Literal remap="tt">pfm</Literal> file
to and <Literal remap="tt">afm</Literal> file ( using <Literal remap="tt">pfm2afm</Literal> ).
</Para>

<Para>
Macintosh fonts are more problematic, because they are typically 
made available in <Literal remap="tt">.sit.bin</Literal> format -- stuffit archives. 
Unfortunately, there is no tool for Linux that can unpack stuffit archives
created with the newer version of stuffit.
The only way to do it is run Executor ( Mac emulator ), or try running 
stuffit in dosemu or Wine.
Once the <Literal remap="tt">sit.bin</Literal> file is unpacked, the Macintosh files can 
be converted using <Literal remap="tt">t1unmac</Literal> which comes with the 
<Literal remap="tt">t1utils</Literal> package.
</Para>

<Para>
Unfortunately, some vendors only ship Type 1 fonts in Macintosh format 
( stuffit archives ). However, according to font expert 
<ULink
URL="http://cgm.cs.mcgill.ca/~luc/"
>Luc Devroye</ULink
>, all major 
foundries make Type 1 fonts available for Mac and Windows.
</Para>

</Sect3>

<Sect3>
<Title>Free Stuff
	</Title>

<Para>
<ULink
URL="http://www.ctan.org"
>ctan</ULink
>
have a number of good fonts, many of which are free. 
Most of these are in Metafont format, though some are also
Type 1 fonts.
Also, see <ULink
URL="http://www.bluesky.com"
>Bluesky</ULink
>
who have made available Type 1 versions of the computer modern
fonts. ( The computer modern fonts are of excellent quality --
to purchase anything of comparable quality and completeness 
will cost you around $500-. They are comparable to the premium
fonts. )
</Para>

<Para>
<ULink
URL="http://cgm.cs.mcgill.ca/~luc/originalfonts.html"
>Luc Devroye's webpage</ULink
>
has links to several sites with free fonts available.
What's unique about these fonts is that a lot of them are really free, they 
are not ``warez fonts''.
</Para>

<Para>
URW have released the standard PostScript fonts resident in most 
printers to the public domain. These fonts are quite good.
</Para>

<Para>
The 
<ULink
URL="ftp://ftp.cdrom.com/pub/os2/fonts/"
>Walnut Creek Archive</ULink
>
has several freely available fonts, and shareware fonts. 
Some of these are obvious ripoffs ( and not very good ones ).
If a font doesn't come with some kind of license, chances are 
it's a ripoff.
Also 
<ULink
URL="http://www.winsite.com/win3/fonts/atm/"
>Winsite</ULink
>
have several Type 1 fonts ( in the fonts/atm subsection of their 
windows 3.x software ).  Unfortunately, several of
these have afm files which have mistakes and are missing 
all kerning pairs ( you can fix the afms by editing 
the "FontName" section of the afm files. It should match 
the fontname given in the font shape file. Of course, adding
kerning pairs is a topic beyond the scope of this document. )
</Para>

<Para>
<ULink
URL="http://cgm.cs.mcgill.ca/~luc/"
>Luc Devroye's webpage</ULink
>
includes several free fonts he designed, as well as a lot of 
links, and fascinating discussion on the topic of typography.
This site is a ``must-visit''.
There are also several links to many foundries.
</Para>

</Sect3>

<Sect3>
<Title>Commercial Fonts</Title>

<Sect4>
<Title>Value vs Premium: Why Should I buy Premium Fonts ?</Title>

<Para>
So you're wondering -- why do some fonts cost a lot and others 
are cheap ?
These fonts are the ``standard PostScript
fonts'' resident in most PostScript printers. Also the famous 
Why should I buy the more expensive ones ?
My take on it is that for a casual user, the value fonts 
( such as those on the Bitstream CD ) are just
fine. However, if you're using the fonts for ``real work'', or 
you're just a hard core font junkie, then the better quality 
fonts are a must-have -- and most of the quality fonts are either
free ( for example, Computer Modern ), or they are upmarket commercial
fonts.
</Para>

<Para>
The advantage of the cheaper fonts is self evident -- they are cheaper.
The quality fonts also have their advantages though.	

<ItemizedList>
<ListItem>

<Para>
<Emphasis>Ethical issues:</Emphasis> The cheaper fonts
are almost always ripoffs. Type design takes a long time and 
and experienced designer. Fonts that are sold for less than $1-
per font were almost certainly not designed by the vendor.
CDs with insane quantities of fonts on the are almost always 
ripoffs  ( the possible exceptions being collections from major
foundries that cost thousands of dollars ).
Usually, the ripoffs lack the quality of fonts from respectable
founries.
</Para>
</ListItem>
<ListItem>

<Para>
<Emphasis>Completeness:</Emphasis> The higher quality fonts ( notably 
from Adobe ) come in several variants, with some nice supplements to
provide the user with a more complete font family. 
There are often bold, italic,
and demibold variants, swash capitals, small caps,
old style figures, and extra
ligatures to supplement the font. More recently, Adobe have a multiple
master technology which gives the user ( almost ) infinite variation 
within one font family.
</Para>
</ListItem>
<ListItem>

<Para>
<Emphasis>Quality:</Emphasis> A lot of the freely available fonts or the cheap
ripoffs lack fairly essential features such as kerning pairs and
decent ligatures. They are basically cheap copies. In contrast,
reputable designers take a lot of trouble to study the original
design, and rework it to the best of their ability.
</Para>
</ListItem>
<ListItem>

<Para>
<Emphasis>Authenticity:</Emphasis> The person who designed Adobe Garamond
( Robert Slimbach ) actually studied the original designs of
Claude Garamond. In fact reputable foundries always 
carefully research their designs, rather than just swiping something
off the net, and modifying it with Fontographer.
</Para>
</ListItem>

</ItemizedList>

</Para>

</Sect4>

<Sect4>
<Title>Value</Title>

<Para>

<ItemizedList>
<ListItem>

<Para>
An excellent place to go for a CD packed with several Type 1 
fonts of reasonable quality is <ULink
URL="http://www.bitstream.com"
>Bitstream</ULink
>. 
Bitstreams more noted products include their 
<ULink
URL="http://www.bitstream.com/products/world/font_cd/bits_collection.html"
>250 font CD</ULink
>
and their
<ULink
URL="http://www.bitstream.com/products/world/font_cd/500_cd.html"
>500 font CD</ULink
>
( the latter goes for $50- at the time of writing ).
These are fairly good quality fonts, and are a fairly good starting
point for the casual user.
The fonts used in Corel's products are (mostly) licensed from bitstream.
</Para>
</ListItem>
<ListItem>

<Para>

<ULink
URL="http://www.matchfonts.com/"
>Matchfonts</ULink
> offer more modestly priced fonts -- 
they are distributed in ``packs'' of about 8 fonts
for $30. This includes some nice calligraphic fonts.
All fonts seem to be offered in a usable format
( the windows ATM fonts come in a .exe file. 
Don't let the extension fool you -- it's just a zip archive ).
These are not ripoffs as far as I can tell.
</Para>
</ListItem>
<ListItem>

<Para>
	
<ULink
URL="http://www.buyfonts.com"
>EFF</ULink
>
sell TrueType fonts for $2- per hit. 
They also have ``professional range'' PostScript and TrueType
fonts for $16- per typeface.
</Para>
</ListItem>

</ItemizedList>

</Para>

</Sect4>

<Sect4>
<Title>Premium
	</Title>

<Para>

<ItemizedList>
<ListItem>

<Para>
Adobe have several
high quality,  fonts available at 
<ULink
URL="http://www.adobe.com/type/"
>Adobe's type website</ULink
>.
Some of these are expensive, but they have several
more affordable bundles -- see 
<ULink
URL="http://www.adobe.com/type/collections.html"
>Adobe Type Collections</ULink
>.
Adobe have some of the most complete font families on the market,
for example, 
<ULink
URL="http://www.adobe.com/type/browser/P/P_912.html"
>Garamond</ULink
>, 
<ULink
URL="http://www.adobe.com/type/browser/P/P_180.html"
>Caslon</ULink
>, 
and their
<ULink
URL="http://www.adobe.com/type/browser/C/C_4e.htm"
>multiple masters</ULink
>
( Myriad and Minion, used on their website are among the nicer 
of their multiple masters. )
</Para>
</ListItem>
<ListItem>

<Para>
<ULink
URL="http://www.bertholdtypes.com"
>Berthold Types Limited</ULink
>
is a major foundry, who offer several quality fonts. Some of
them are resold through Adobe, all are directly available 
from Berthold. Same price ballpark as Adobe.
</Para>
</ListItem>
<ListItem>

<Para>
ITC develop several
quality fonts ( including some of the ones Corel ships with 
their products ) at
<ULink
URL="http://www.itcfonts.com"
>http://www.itcfonts.com</ULink
>
They offer family packages for about $100-180 US. 
Their fonts, come in both Type 1
and TrueType format. It's better to choose the
``Windows'' package, because Mac formats are difficult
to handle on Linux.
</Para>
</ListItem>
<ListItem>

<Para>
<ULink
URL="http://www.linotypelibrary.com"
>Linotype</ULink
>
are a well known foundry who offer fonts by legendary designers
including Herman Zapf. ( yep, the guy ``Zapf Chancery'' is named after. 
He also designed Palatino. )
</Para>
</ListItem>
<ListItem>

<Para>
<ULink
URL="http://www.monotype.com"
>Monotype</ULink
>
develop most of the fonts shipped with Microsoft
products. One of the older and well respected foundries.
</Para>
</ListItem>
<ListItem>

<Para>
	
<ULink
URL="http://www.portal.ca/~tiro/"
>Tiro Typeworks</ULink
>
sell good quality, if somewhat expensive typefaces.
Their typefaces are very complete, for example, they
include complete sets of ligatures, and smallcaps, titling
fonts, etc.
UNIX is listed as one of the OS options -- which is a welcome 
surprise after seeing the words ``Windows or Mac'' too many times..
</Para>
</ListItem>

</ItemizedList>

</Para>

</Sect4>

<Sect4>
<Title>More Links
	</Title>

<Para>
For links to a bunch of other foundries, 
see <ULink
URL="http://cgm.cs.mcgill.ca/~luc/"
>Luc Devroye's page</ULink
>
</Para>

</Sect4>

</Sect3>

</Sect2>

</Sect1>

<Sect1>
<Title>Useful Font Software for Linux</Title>

<Para>
There are several font packages for Linux. Many of them are essential.

<ItemizedList>
<ListItem>

<Para>
chkfontpath is a utility for manipulating the <Literal remap="tt">xfs</Literal> configuration
file.
</Para>
</ListItem>
<ListItem>

<Para>
<ULink
URL="http://www.debian.org/~fog/dtm/"
>DTM -- the Definitive Type Manager</ULink
>
is a global font management tool. This is a developer's release.
</Para>
</ListItem>
<ListItem>

<Para>
<ULink
URL="http://www.tug.org/applications/fontinst/index.html"
>fontinst</ULink
> is a LaTeX package designed to simplify the installation
of Type 1 fonts into LaTeX.

</Para>
</ListItem>
<ListItem>

<Para>
<ULink
URL="http://www.freetype.org"
>Freetype</ULink
>
is a TrueType library that comes with most Linux distributions
</Para>
</ListItem>
<ListItem>

<Para>
<ULink
URL="http://www.cs.wisc.edu/~ghost/"
>Ghostscript</ULink
>
is the software that is used for printing on Linux. The version
of ghostscript that ships with Linux is GNU ghostscript. This is one version behind
the latest release of Aladdin ghostscript ( who release their old versions 
under the GPL )
</Para>
</ListItem>
<ListItem>

<Para>
<ULink
URL="http://pegasus.rutgers.edu/~elflord/font_howto/pfm2afm.tgz"
>pfm2afm</ULink
>
is a utility for converting windows <Literal remap="tt">pfm</Literal> font 
metric files into <Literal remap="tt">afm</Literal> metrics that can be used 
for Linux. This is based on the original version available
at CTAN, and includes modifications from Rod Smith to make
it compile under Linux.
</Para>
</ListItem>
<ListItem>

<Para>
<ULink
URL="http://www.lcdf.org/~eddietwo/type/"
>mminstance and t1utils</ULink
> are two packages for handling Type 1 fonts.
mminstance is for handling Adobe's 
<ULink
URL="http://www.adobe.com/type/browser/C/C_4e.html"
>multiple master</ULink
> Type 1 fonts.
t1utils is a suite of utilities for converting between the different 
Type 1 formats.

</Para>
</ListItem>
<ListItem>

<Para>
<ULink
URL="http://quadrant.netspace.net.au/ttf2pt1/"
>ttf2pt1</ULink
>
is a TrueType to Type 1 font converter. It is useful if you 
have applications that require Type 1 fonts.
</Para>
</ListItem>
<ListItem>

<Para>
<ULink
URL="ftp://ftp.dcs.ed.ac.uk/pub/jek/programs/ttfps.tar.gz"
>ttfps</ULink
> converts <Literal remap="tt">.ttf</Literal> TrueType font files 
into Type42 files.

</Para>
</ListItem>
<ListItem>

<Para>
<ULink
URL="http://pegasus.rutgers.edu/~elflord/font_howto/ttfutils-0.2.tar.gz"
>ttfutils</ULink
>
A package of utilities for handling TrueType fonts. This
package requires <Literal remap="tt">ttf2pt1</Literal>. Useful if not essential.

</Para>
</ListItem>
<ListItem>

<Para>
<ULink
URL="ftp://ftp.metalab.unc.edu/pub/Linux/X11/xutils/"
>type1inst</ULink
>
is an essential package for installing Type 1 fonts. It greatly 
simplifies the installation.
</Para>
</ListItem>
<ListItem>

<Para>
<ULink
URL="ftp://ftp.metalab.unc.edu/pub/Linux/X11/fonts/"
>xfstt</ULink
>
is a TrueType font server for Linux. It's useful, but <Literal remap="tt">xfs</Literal>
is probably a better choice.
</Para>
</ListItem>
<ListItem>

<Para>
<ULink
URL="http://www.dcs.ed.ac.uk/home/jec/programs/xfsft/"
>xfsft</ULink
> The xfsft font server. Note that this is included 
in <Literal remap="tt">xfs</Literal>.
</Para>
</ListItem>
<ListItem>

<Para>
<ULink
URL="http://hawk.ise.chuo-u.ac.jp/student/person/tshiozak/x-tt/"
>x-tt</ULink
> is a font server designed to handle Korean and Japanese
fonts.
</Para>
</ListItem>

</ItemizedList>

</Para>

</Sect1>

<Sect1>
<Title>Ethics and Licensing Issues Related to Type</Title>

<Para>
Font licensing is a very contentious issue. While it is true 
that there is a wealth of <Emphasis>freely available</Emphasis> fonts, the chances 
are that the fonts are ``ripoffs'' in some sense, unless they come 
with a license indicating otherwise. 
The issue is made more confusing by intellectual property laws regarding
typefaces. Basically, in the USA, font <Emphasis>files </Emphasis> are protected 
by copyright, but <Emphasis>font renderings</Emphasis> are not. In other words,
it's illegal to redistribute fonts, but it's perfectly legal to 
``reverse-engineer'' them by printing them out on graph paper and 
designing the curves to match the printout. Reverse engineered fonts
are typically cheap and freely available, but of poor quality.
These fonts, as well as pirated fonts are often distributed on 
very cheap CDs containing huge amounts of fonts.
So it's not always easy to tell if a font is reverse engineered, or 
simply pirated. This situation creates an enormous headache for 
anyone hoping to package free fonts for Linux.
</Para>

<Para>
Perhaps one of the most offensive things about the nature of 
font piracy is that it artificially debases the value of the
work that type designers do. Pirated fonts invariably are bundled
en masse onto these one zillion font CDs, with no due credit given
to the original designers. In contrast, what is commendable 
about several 
legitimate font foundries is that they credit their designers.
</Para>

<Para>
There are many differing opinions on this issue. See 
<ULink
URL="http://www.typeright.org"
>typeright</ULink
> for 
an explanation of the case in favour of intellectual property rights.
Also, see <ULink
URL="http://www.ssifonts.com/"
>Southern Software, Inc</ULink
>
for another opinion -- but don't buy any of their fonts! Their Type 1 fonts
( poorly reverse-engineered Adobe fonts ) 
do not have AFMs, and are thus unusable. 
</Para>

<Para>
<ULink
URL="http://www.faqs.org/faqs/fonts-faq/part2/"
>The comp.fonts FAQ</ULink
>
also discusses the issues of fonts and intellectual property,
as does 
<ULink
URL="http://cgm.cs.mcgill.ca/~luc/"
>Luc Devroye's homepage</ULink
>. These 
references are somewhat less extreme in their views.
</Para>

</Sect1>

<Sect1>
<Title>References</Title>

<Sect2>
<Title>Font Information</Title>

<Para>

<ItemizedList>
<ListItem>

<Para>
<ULink
URL="http://www.rodsbooks.com/"
>Rod Smith's homepage</ULink
>
contains a wealth of information about using fonts and printers 
with Applixware and Word Perfect.
</Para>
</ListItem>
<ListItem>

<Para>
<ULink
URL="http://www.mindspring.com/~john_mcl/adding_fonts.html"
>John McLaughlin's page</ULink
>
discusses setting up fonts with Star Office
</Para>
</ListItem>
<ListItem>

<Para>
<ULink
URL="http://www.geocities.com/SiliconValley/5682/postscript.html"
>Jim Land's homepage</ULink
>
contains a lot of links to sites on PostScript and fonts.
</Para>
</ListItem>
<ListItem>

<Para>
<ULink
URL="http://www.faqs.org/faqs/fonts-faq/"
>The comp.fonts FAQ</ULink
>
is the definitive font FAQ.
</Para>
</ListItem>
<ListItem>

<Para>
<ULink
URL="http://cgm.cs.mcgill.ca/~luc/"
>Luc Devroye's homepage</ULink
>
Contains enough information about fonts and other things
to sink a ship. This guy designed a bunch of free fonts,
and his homepage has a lot of interesting links, 
information and commentary.
</Para>
</ListItem>
<ListItem>

<Para>
<ULink
URL="http://www.linuxdoc.org/HOWTO/mini/FDU.html"
>The Font Deuglification HOWTO</ULink
>
discusses TrueType fonts under Linux. This 
is the clear winner of the ``TrueType'' HOWTOs.
An excellent 
source of information.
</Para>
</ListItem>
<ListItem>

<Para>
<ULink
URL="http://www.dimensional.com/~bgiles/debian-tt.html"
>TrueType Fonts in Debian mini-HOWTO</ULink
>
discusses installing TrueType in Debian.
A must-read for Debian users.
Also worth reading if you have <Emphasis>any</Emphasis> distribution
that doesn't have the version of <Literal remap="tt">xfs</Literal> with TrueType
support.
</Para>
</ListItem>
<ListItem>

<Para>
<ULink
URL="http://www.moisty.org/~brion/linux/TrueType-HOWTO.html"
>The (preliminary) True Type HOWTO</ULink
>
-- an incomplete HOWTO dated June 1998. Included in this
list for completeness.
</Para>
</ListItem>
<ListItem>

<Para>
<ULink
URL="http://www.sfu.ca/~yzhang/linux/truetype/"
>TrueType for XFree86 Mini-HOWTO</ULink
>
-- a slightly dated HOWTO. Only applicable to Redhat 5.x
</Para>
</ListItem>

</ItemizedList>

</Para>

</Sect2>

<Sect2>
<Title>Postscript and Printing Information</Title>

<Para>

<ItemizedList>
<ListItem>

<Para>
<ULink
URL="http://www.adobe.com/print/postscript/main.html"
>Adobe's Postscript page</ULink
>
is the definitive site on the PostScript standard.
</Para>
</ListItem>
<ListItem>

<Para>
<ULink
URL="http://www.cs.wisc.edu/~ghost/"
>Ghostscript's home page</ULink
>
has a lot of information, and all the latest printer drivers.
</Para>
</ListItem>
<ListItem>

<Para>
<ULink
URL="http://www.geocities.com/SiliconValley/5682/postscript.html"
>Jim Land's homepage</ULink
>
contains a lot of links to sites on PostScript and fonts.
</Para>
</ListItem>
<ListItem>

<Para>
<ULink
URL="http://www.hex.net/~cbbrowne/printing.html"
>Christopher Browne's Printing FAQ</ULink
>

</Para>
</ListItem>

</ItemizedList>
	
</Para>

</Sect2>

</Sect1>

<Sect1>
<Title>Glossary</Title>

<Para>

<ItemizedList>
<ListItem>

<Para>
<Emphasis remap="bf">afm</Emphasis> 
Stands for <Emphasis remap="bf">Adobe Font Metric</Emphasis>. These files store information about
the width and spacing associated with the font, as opposed to information
about the font shape.

</Para>
</ListItem>
<ListItem>

<Para>
<Emphasis remap="bf">anti-aliasing</Emphasis>
also referred to as font smoothing is a technique
used to render fonts on low resolution devices ( such as a monitor ). 
The problem with rendering fonts is that the fonts consist of outlines,
but the device renders in dots. The obvious way to render a font is 
to color black any pixel inside the outline, and leave all other dots. 
The problem with this is that it doesn't adequately address the pixels that
are on the outline. A smarter algorithm would be to color the boundary pixels
gray. Anti-aliasing essentially involves doing this.

</Para>
</ListItem>
<ListItem>

<Para>
<Emphasis remap="bf">bdf</Emphasis> fonts are a variety of bit-mapped fonts that may be 
used with X.

</Para>
</ListItem>
<ListItem>

<Para>
<Emphasis remap="bf">bitmap fonts</Emphasis>
These fonts are simply a collection of dots. Each character of 
the font is stored as a dot matrix. Because of this, bitmap fonts 
are device dependent, so you can't use the same bitmap fonts on 
a screen and a printer. Examples of bitmap screen fonts include 
.pcf and .bdf fonts used by X. Examples of printer bitmap 
fonts include TeX's PK fonts.

</Para>
</ListItem>
<ListItem>

<Para>
<Emphasis remap="bf">didone</Emphasis> see modern.

</Para>
</ListItem>
<ListItem>

<Para>
<Emphasis remap="bf">DPI</Emphasis>
Dots Per Inch. Monitors typically display at 75-100 DPI, while 
modern printers vary from 300-1200 DPI

</Para>
</ListItem>
<ListItem>

<Para>
<Emphasis remap="bf">expert fonts</Emphasis> are collections of additional characters
that supplement a font. They include small caps fonts, ornaments,
extra ligatures, and variable width digits. Many of Adobe's fonts 
have expert fonts available.

</Para>
</ListItem>
<ListItem>

<Para>
<Emphasis remap="bf">font server</Emphasis>
a background program that makes fonts available to XFree86.

</Para>
</ListItem>
<ListItem>

<Para>
<Emphasis remap="bf">glyph</Emphasis> A glyph is a fancy word for a shape. It is a component
that makes up an outline font. For example, the dot on the letter
``i'' is a glyph, as is the vertical line, as are the serifs. Glyphs
determine the shape of the font.

</Para>
</ListItem>
<ListItem>

<Para>
<Emphasis remap="bf">kerning</Emphasis> In variable width fonts, different pairs of characters 
are spaced differently. The font metric files store information regarding 
spacing between pairs of characters, called <Emphasis remap="bf">kerning pairs</Emphasis>.

</Para>
</ListItem>
<ListItem>

<Para>
<Emphasis remap="bf">ligature</Emphasis> A ligature is a special character that is used
to represent a sequence of characters. This is best explained by example 
-- when the letter fi are rendered, the dot on the ``i'' collides
with the ``f'', and the serif on the top left of the i can also 
collide with the horizontal stroke of the f. The fi ligature is a 
single character that can be used in the place of a single f followed
by a single i. There are also ligatures for fl, ffi, and ffl. 
Most fonts only include the fi and fl ligatures. The other ligatures
may be made available in an <Emphasis remap="bf">expert font</Emphasis>.


</Para>
</ListItem>
<ListItem>

<Para>
<Emphasis remap="bf">metafont</Emphasis> 
A graphics language used for creating fonts. Metafont has a lot of nice
features, the main one being that fonts created with metafont need not
just scale linearly. That is, a 17 point computer modern font 
generated by metafont is not the same as a magnified 10 point 
computer modern font. Prior to Adobe's multiple master technology,
metafont was unique with respect to having this feature.
Metafonts main advantage is that it produces high quality fonts. 
The disadvantage is that generating bitmaps from the outline fonts 
is slow, so they aren't feasible 
for WYSIWYG publishing.

</Para>
</ListItem>
<ListItem>

<Para>
<Emphasis remap="bf">metric</Emphasis> this stores information about how much space a font 
takes up. A font metric is like a box that one can embed the font in. Font 
metrics are essential for the purpose of laying out fonts on a page, while the 
font shape itself is not. So typically, variable width fonts have metric 
information as well as shape information. The metric also includes kerning 
information.

</Para>
</ListItem>
<ListItem>

<Para>
<Emphasis remap="bf">modern</Emphasis> fonts are fonts based on designs developed in the
19th century or later. The moderns have a solid appearance due to 
their vertical stress. They tend to have more ``character'' or 
``attitude'' than the old styles and transitionals, but still carry
a certain amount of dignity and formality.
They are not suited for writing long passages, but they are useful
for adding character to a piece of writing.
Bodoni is a notable modern typeface.

</Para>
</ListItem>
<ListItem>

<Para>
<Emphasis remap="bf">old style</Emphasis> fonts are a traditional class of typeface. 
The old style fonts are based on designs from as far back as the late
15th century. Old style fonts are great for writing long documents
( such as books ). While the old style fonts are designed in the 
tradition of the earlier designers, some of them were designed 
quite recently. Notably, the face <Emphasis remap="bf">Goudy Old Style</Emphasis> was
designed by Goudy in the early 20th century. Notable old style
faces include Goudy Old Style, Garamond, and Caslon.

</Para>
</ListItem>
<ListItem>

<Para>
<Emphasis remap="bf">pcf</Emphasis> fonts are bit-mapped fonts used by X.

</Para>
</ListItem>
<ListItem>

<Para>
<Emphasis remap="bf">PostScript</Emphasis> is a programming language designed for page description.
Postscript was a trademark of it's inventor, adobe. However, it is also an 
ISO standard. Postscript needs an 
interpreter to render it. This can be done 
via a program on the computer, such as ghostscript, or it can be interpreted 
by some printers.

</Para>
</ListItem>
<ListItem>

<Para>
<Emphasis remap="bf">serif</Emphasis> fonts are fonts with 
little hooks ( called serifs ) on the ends of the font.
the serifs usually help make the font more readable. 
However, serifs are quite
difficult to render on low resolution devices, especially at small font 
sizes ( because they are a fine detail ), so it is often true 
that at small sizes on low resolution devices, sans serif fonts 
( such as Microsoft's Verdana ) prove more readable. Another issue
is that there are sans serif fonts ( like the moderns ) that are
not designed for writing long documents.

</Para>
</ListItem>
<ListItem>

<Para>
<Emphasis remap="bf">sans serif</Emphasis> fonts are fonts without serifs ( sans is French 
for ``without'' ). These fonts have a stark appearance, and are well
suited for writing headlines. While textbook typography mandates that 
serif fonts be used just for headlines, they can have other uses. 
There are sans serif fonts designed for readability as opposed to
impact.
Short punchy documents that are skimmed ( such as catalogues and 
marketting brochures ) may use them, and recently, Microsoft have made
available the Verdana font which is designed for readability at small
sizes on low resolution devices.
Well known sans serif fonts include Lucida Sans, MS Comic Sans,
Avant Garde, Arial, Verdana, Century Gothic.

</Para>
</ListItem>
<ListItem>

<Para>
<Emphasis remap="bf">slab serif</Emphasis> fonts are a certain class of font whose serifs
look like slabs ( eg flat lines or blocks ) and not hooks.
Slab serif fonts are <Emphasis remap="bf">often</Emphasis>, but not always very readable.
Because the serifs are simple and strong, they give one the feeling 
that they have been punched into the page. 
Well known examples of slab serifs are Clarendon, New 
Century Schoolbook, and Memphis.

</Para>
</ListItem>
<ListItem>

<Para>
<Emphasis remap="bf">transitional</Emphasis> fonts are fonts that are based on more 
recent designs than the old style fonts. many of the transitional 
fonts have good readability. Notable transitionals include Baskerville,
and Times Roman.

</Para>
</ListItem>
<ListItem>

<Para>
<Emphasis remap="bf">Type 1</Emphasis> is a type of font designed by Adobe. These fonts are
well supported by almost all linux applications, because they have been
supported by the X server architecture and the PostScript standard for
a long time. Postscript fonts are distributed in many different 
formats. Typically, a UNIX PostScript font is distributed as
an <Literal remap="tt">afm</Literal> ( adobe font metric ) file, and an outline file, which is 
usually a <Literal remap="tt">.pfb</Literal> ( printer font binary ) or 
<Literal remap="tt">.pfa</Literal> ( printer font ascii ) file. The outline file contains 
all the glyphs, while the metric file contains the metrics.

</Para>
</ListItem>
<ListItem>

<Para>
<Emphasis remap="bf">type3</Emphasis> fonts are similar to Type 1. The file extensions
are similar to Type 1 fonts ( they are distributed as <Literal remap="tt">pfa</Literal> and
<Literal remap="tt">afm</Literal> files ), but they are not supported by X, and because
of this, there are not very many linux applications which support them.

</Para>
</ListItem>

</ItemizedList>

</Para>

</Sect1>

</Article>
