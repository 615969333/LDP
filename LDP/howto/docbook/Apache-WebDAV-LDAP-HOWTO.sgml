<!DOCTYPE article PUBLIC "-//OASIS//DTD DocBook V3.1//EN">
<article>

<artheader>
   <title>Apache based WebDAV with LDAP and SSL HOWTO</title>

   <author>
      <firstname>Saqib</firstname>
      <surname>Ali</surname>
      <affiliation>
         <address>
            <email>saqib@seagate.com</email>
         </address>
      </affiliation>
   </author>

   <revhistory>
      <revision>
       <revnumber>v3.0</revnumber>
         <date>2002-04-09</date>
         <authorinitials>sa</authorinitials>
          <revremark>
		Added "Implementing and using SSL to secure WebDAV traffic" section
         </revremark>
      </revision>



      <revision>
       <revnumber>v2.1</revnumber>
         <date>2002-03-24</date>
         <authorinitials>sa</authorinitials>
          <revremark>
		Refined the WebDAV Introduction and SSL section.
         </revremark>
      </revision>

   
      <revision>
       <revnumber>v2.0</revnumber>
         <date>2002-03-20</date>
         <authorinitials>sa</authorinitials>
          <revremark>
		Added the SSL section
         </revremark>
      </revision>


      <revision>
         <revnumber>v1.1</revnumber>
         <date>2001-11-29</date>
         <authorinitials>sa</authorinitials>
          <revremark>
              Initial public release.
         </revremark>
      </revision>

      <revision>
         <revnumber>v1.0</revnumber>
         <date>2001-11-01</date>
         <authorinitials>sa</authorinitials>
          <revremark>
              Initial public release.
         </revremark>
      </revision>


   </revhistory>

   <abstract>
      <para>This document is an HOWTO on installing a Apache based WebDAV server with LDAP for authentication and SSL
      encryption. </para>
   </abstract>
</artheader>


<sect1 id="intro"> <title>Introduction</title>

<para> The Objective of this document  is to setup a Apache based
WebDAV server that can authenticate against a LDAP server.
You will learn how to install, configure, run, maintain and
fine-tune a Apache-based WebDAV server. This  document will provide
the basic groundwork for setting up a WebDAV server. It will also
provide information on fine tuning and maintaining the server. </para>

<para><emphasis role="strong">Note: If you encounter any problems
installing Apache or any of the modules please feel free to contact
me.</emphasis> </para>

<para> <emphasis role="strong"><ulink
url="http://www.stonebeat.org">WebDAV Support and Discussion Forum</ulink></emphasis> </para>

<para> <emphasis role="strong">This document is not a HOWTO on setting up
LDAP server</emphasis>. For  setting up a LDAP server please visit
<ulink url="http://www.linuxdoc.org/HOWTO/LDAP-HOWTO-1.html">
http://www.linuxdoc.org/HOWTO/LDAP-HOWTO-1.html</ulink> </para>

<sect2 id="copyright">
<title>Copyright and License</title>
<para>
This document is Copyright 2001 by Saqib Ali. Permission is granted
to copy, distribute and/or modify this document under the terms of
the GNU Free Documentation License, Version 1.1 or any later version
published by the Free Software Foundation; with no Invariant
Sections, with no Front-Cover Texts, and with no Back-Cover Texts. 
A copy of the license is available at
<ulink url="http://www.gnu.org/copyleft/fdl.html">http://www.gnu.org/copyleft/fdl.html</ulink>
</para>


<sect2><title>What is WebDAV?</title>

<para> WebDAV stands for Web enabled Distributed Authoring and
Versioning.  It  provides a collaborative environment for users to
edit/manage files on web-servers. Technically DAV is an extension
to the http protocol.  </para>

<para>WebDAV introduces several new properties to the existing HTTP properties. A property in HTTP terminology 
refers to the descriptive information about a file on the webserver. The properties that DAV introduces 
are PROPFIND, PROPPATCH, MKCOL, PUT, COPY, MOVE, DELETE, LOCK, and obviously UNLOCK. The following is a brief 
description of the properties introduced by DAV:</para>

<screen>
PROPFIND - Retrieves the properties of file or resource on the web server. 
PROPPATCH - Sets the properties of a file or resource on the web server.
MKCOL - Makes a collections of resources.
PUT - Puts a resource/collection on the server.
COPY - Copies a Resource/collection
MOVE - Moves a Resource/collection
DELETE - Deletes a Resource/collection
LOCK - Locks a Resource for PROPPATCH, MKCOL, PUT, MOVE, and DELETE
UNLOCK - Unlocks a resource
</screen>

 <para>Remember these properties, as we will need them later in this tutorial.</para>

</sect2>

<sect2><title>Why use WebDAV?</title>
<para>I ask, Why not? Who doesn't like distrtibuted authoring of the documents? Using WebDAV technology people throughout 
the world can be working on the same document. With the locking mechanism that DAV provides, the person who is editing the resource 
will lock it for editing. Others can read it but not modify it. When the person who is editing the document, is done editing,
he/she will release the lock, and then others can modify the documents as well.</para>
<para>Authentication to gain access to resources is available in HTTP. This HOWTO discusses using LDAP for authentication. 
Permissions using groups and users in LDAP directory can be setup to control read/write access to various resources(documents)
on the WebDAV server, so that you dont need to share passwords to work on the same documents</para>
<para>If you are worried about people trying to sniff your traffic, and gain access to confidential data, then worry not
- you can always use HTTP with SSL ver3. This is the best encryption available. This documents details on how to implement
WebDAV server which uses SSL encryption for transferring data. </para>



</sect2>

<sect2><title>How does WebDAV work?</title>

<para><emphasis>text goes here...</emphasis></para>
</sect2>


<sect2><title>What do we need?</title>

<para>The tools needed to achieve this objective are:  </para>

   <itemizedlist>
      <listitem><para>Apache Web Server</para></listitem>
      <listitem><para>LDAP Module for Apache</para></listitem>
      <listitem><para>WebDAV Module for Apache</para></listitem>
      <listitem><para>LDAP lib file</para></listitem>
   </itemizedlist>

<para><emphasis role="strong">NOTE:</emphasis> All of these packages are
free and are available for download on the net.</para>

<para>We will compile all the above mentioned packages to produce
binaries for the Web Server. The WebDAV and LDAP module will be
compiled statically  into Apache. Static compilation results in
faster execution times. Apache was  chosen, because it is the most
versatile web server ever to exist. 
<ulink url="http://www.netcraft.com/survey/"> Market Shares for Top Web
Servers  </ulink> shows that Apache has the largest web server market
share. </para>

<para>Apache is also being used by:</para>

   <itemizedlist>
     <listitem><para><ulink url="http://www.rackspace.com">RackSpace</ulink>
      - WebHosting provider</para></listitem>
     <listitem><para><ulink url="http://www.cihost.com">CIHost</ulink>
      - WebHosting provider</para></listitem>
     <listitem><para><ulink url="http://www.slashdot.org">SlashDot</ulink>
     </para></listitem>
   </itemizedlist>
</sect2>

<sect2><title>Assumptions</title>

<para> This document assumes that you have the following already
installed on  your system.  </para>

    <orderedlist>
       <listitem><para>gzip or gunzip - available from <ulink url="http://www.gnu.org">http://www.gnu.org</ulink></para></listitem>
       <listitem><para>gcc and GNU make - available from <ulink url="http://www.gnu.org">http://www.gnu.org</ulink></para></listitem>
    </orderedlist>
 
<para> The document also assumes there is a LDAP server installed
elsewhere  which will be used for the authentication.  </para>
</sect2>

<sect2><title>Opinions and Suggestions</title>

<para>
If you have any questions about the information available on this document,  
please contact me on the following email address:  
<ulink url="mailto:saqib@seagate.com">saqib@seagate.com</ulink> 
</para>

<para>
If you have comments and/or suggestions, please let me know as well!  
</para>
</sect2>

</sect1>

<sect1 id="inst-webdav"> <title>Installing WebDAV services</title>

<para> Our game plan is to first install OpenLDAP package. OpenLDAP
is  not required for Apache_LDAP_DAV to work, but we will need
the installed  OpenLDAP lib files to compile mod_ldap. And then
we will compile Apache  with mod_ldap  and mod_dav.  </para>

<para>
Please download the following packages. 
</para>

    <itemizedlist>
       <listitem><para><ulink url="http://www.apache.org">Apache Web Server</ulink></para></listitem>

       <listitem><para><ulink url="http://www.openldap.org/">OpenLDAP</ulink> 
            (for LDAP lib files)</para></listitem>

       <listitem><para><ulink url="http://www.webdav.org/mod_dav/">mod_dav</ulink> 
            (Apache module for WebDAV)</para></listitem>

       <listitem><para><ulink url="http://www.muquit.com/muquit/software/mod_auth_ldap/mod_auth_ldap.html">mod_ldap</ulink>
            (LDAP module for LDAP)</para></listitem>
            
       <listitem><para><ulink url="http://www.openssl.org">OpenSSL</ulink>
       	    (SSL enginer for creating/managing certificates)</para></listitem>
       	    
       <listitem><para><ulink url="http://www.modssl.org/">mod_SSL</ulink>
       	    (SSL Module for Apache)</para></listitem>
       	    
       	    
    </itemizedlist>


<sect2><title>Pre-Requirements</title>

<para> To compile the WebDAV service with LDAP authencation
capability, we will need to have the LDAP library files installed on
the machine. The LDAP library files will be used to compile the LDAP
module for Apache. Best way to get the LDAP library files is to
download the OpenLDAP sourcecode from 
<ulink url="http://www.openldap.org">http://www.openldap.org</ulink> and
compile it to produce the required library files. You may use any
other LDAP like IPlanet as well, but I recommend an OpenSource
solution. </para>


<sect3><title>OpenLDAP lib files installation</title>

<para> Become root by using the su command:  </para>

<screen><command>$ su</command></screen>

<para> Now change to the directory where you placed the OpenLDAP
(tar) source file, and extract the content. (I use a temp directory, 
<filename>/tmp/download</filename>):  </para>

<para><screen>
<command># cd /tmp/download</command>
<command># gzip -d openldap-stable-xxxxxxx.tar.gz</command>
<command># tar -xvf openldap-stable-xxxxxxx.tar</command>
<command># cd openldap-x.x.xx</command>
</screen>
</para>

<para> Now you can run "<command>configure</command>" for the
openldap package.  "<command>configure</command>" has many command
line options. Type "<command>configure --help</command>" to see all
options.  </para>

<para> For this WebServer we dont really need the LDAP deamon,
assuming there is  a LDAP server running elsewhere. We just need the
LDAP lib files.  Since we will not be compiling the LDAP deamon, we
will have to  specify  '<option>--disable-slapd</option>' as a
command line option to '<command>configure</command>':</para>

<screen><command># ./configure --disable-slapd</command></screen>

<para> After you are done with configuring, you can make the
dependencies for the openldap package: </para>

<screen><command># make depend</command></screen>

<para> After making the dependencies the openldap package needs to
be compiled. Use the <command>make</command> command:  </para>

<screen><command># make</command></screen>

<para>If everything goes OK, you will end up with compiled version of
openldap  in the current directory. Then you will need to install the
compiled binaries into appropriate places: </para>

<screen><command># make install</command></screen>


<para>Now you should have the compiled LDAP lib files required for
the  mod_ldap in the correct directory structure.  </para>
</sect3>

<sect3><title>OpenSSL Engine</title>
<para>OpenSSL is required to create and manage SSL certificates on the webserver. The installion is also necessary 
for the lib files that will be used by the SSL module for apache.</para>

<para>Now change to the directory where you placed the OpenSSL source code files</para>

<para><screen>
<command># cd /tmp/download</command>
<command># gzip -d openssl.x.x.gz</command>
<command># tar -xvf openssl.x.x</command>
<command># cd openssl.x.x</command>
<command># make</command>
<command># make test</command>
<command># make install</command>
</screen></para>
</sect3>
</sect2>


<sect2><title>Pre-configuring Apache</title>

<para> mod_dav requires that you have Apache pre-configured  so  that
it knows   where  where everything is. Change back to the directory
where you have the source files:  </para>

<para><screen>
<command>  # cd /tmp/download </command>
<command>  # gzip -d apache_1.x.x.tar.gz </command>
<command>  # tar -xvf apache_1.x.x.tar </command>
<command>  # cd apache_1.x.x </command>
<command>  # ./configure --prefix=/usr/local/apache </command> 
</screen></para>
</sect2>

<sect2><title>Configuring and Installing mod_dav</title>

<para>As mentioned above mod_dav will be statically linked with the
Apache installation.  Start by extracting mod_dav files: </para>

<para><screen>
<command># cd /tmp/download </command>
<command># gzip -d mod_dav-1.x.x.tar.gz</command>
<command># tar -xvf mod_dav-1.x.x.tar</command>
</screen>
</para>

<para> Change to the NEW directory which was created during the
extract: </para>

<para><command># cd mod_dav-1.x.x</command></para>

<para>Now configure the mod_dav package for static linking to Apache:</para>
 
<para><command># ./configure --with-apache= /tmp/download/apache_1.x.x</command></para>

<para>Compile and install the files:</para>

<para><command># make </command></para>
<para><command># make install</command></para>

<para>mod_dav will have been partially compiled and placed into the
Apache tree during the make install step.</para>
</sect2>

<sect2><title>Installing and configuring mod_auth_ldap</title>

<para>Change back to the temp download directory, and extract the mod_auth_ldap files:</para>

<para><screen>
<command># cd /tmp/download</command>
<command># gzip -d mod _auth_ldap.tar.gz</command>
<command># tar -xvf mod_auth_ldap.tar</command>
</screen>
</para>

<para>Now install the modauthldap files to the Apache source tree: </para>

<para><screen>
<command># cd apache_x.x.x</command>
<command># mv ../modauthldap ./src/modules/ldap </command>
</screen></para>
</sect2>

<sect2><title>Installing and configuring mod_ssl</title>
Now we willl need to configure the SSL module for Apache

<para><screen>
<command># cd /tmp/download </command>
<command># gzip -d mod_ssl-2.x.x.tar.gz</command>
<command># tar -xvf  mod_ssl-2.x.tar</command>
<command># ./configure --with-apache=../apache_1.3.x.x</command>
</screen>
</para>
</sect2>

<sect2><title>Configuring and Installing Apache</title>

<para> Finally we have reached the destination.  But not yet....... <screen>"The Journey is the Destination" (Jerry Garica of Grateful Dead)</screen>  </para>

<para> Now we are ready to compile and install Apache with WebDAV and
LDAP authentication for DAV.  </para>

<para>Change back to the temp download directory:</para>

<para><command># cd /tmp/download</command></para>

<para>Change to the Apache tree directory:</para>

<para><command># cd apache-x.x.x</command></para>

<para>Now set the variable SSL_BASE to the OpenSSL lib files. On tcsh it will be as following:</para>
<para><screen>
<command># setenv SSL_BASE /tmp/download/openssl-0.9.x</command>
</screen></para> 

<para>This will the compiler where to find the SSL LIB files.</para>

<para>And now configure apache for the compilation with mod_dav, mod_auth_ldap, and mod_ssl: </para>


<para><screen>
<command>  # ./configure --prefix=/usr/local/apache \
     --enable-module=ssl \
     --activate-module=src/modules/ldap/mod_auth_ldap.c \
     --activate-module=src/modules/dav/libdav.a \
     --enable-shared=ssl 
     
     [...you can add more options here...] </command>
</screen></para>
 
<para>--enable-shared is an optional, it tells the configure to compile SSL as dynamic module. Depending on the
services that you will be providing, you may or may not need dynamic compilation.</para>
 
<para>Now compile the Apache and install it into the appropriate
place: </para>

<para><command># make </command></para>
<para>Now create the SSL certification on the web server</para>
<para><command># make certificate TYPE=custom</command></para>
<para>Follow through the instructions, and you will have a certificate in no time. Remember CommonName is your 
FQDN (Fully Qualified Domain Name) e.g. dav.yourcompany.com</para>
<para>For details on creating and managing the SSL certificates, please read the section titled "Creating and Managing SSL certificates".</para>

<para>Now install Apache into its own directory</para>
<para><command># make install</command></para>
</sect2>

</sect1>

<sect1 id="config-webdav"><title>Configuring and Setting up the
 WebDAV services</title>

<para> Now for the easy part. In this section we will WebDAV enable a
directory under Apache root.  </para>

<sect2><title>Modifications to  the
<filename>/usr/local/apache/conf/httpd.conf</filename></title>

<para>
Please verify that the following Apache directive appears in the 
<filename>/usr/local/apache/conf/httpd.conf</filename> :</para>
 
<para><screen>
  Addmodule mod_dav.c
</screen></para>

<para> If it does not please add it. This directive informs Apache
about DAV capability. The directive must be placed outside any
container.  </para>

<para>
Next we must specify where Apache should store 
the DAVLockDB file. DAVLockDB is a lock database for the WebDAV. 
This directory should be writable by the httpd process.
</para>

<para>
I store the DAVLock file under <filename>/usr/local/apache/var</filename>.
I use this directory for other purposes as well. Please add the
following line to your
<filename>/usr/local/apache/conf/httpd.conf</filename> to specify
that the DAVLockDB file will be under
<filename>/usr/local/apache/var</filename> : </para>

<para><screen>
  DAVLockDB      /usr/local/apache/var/DAVLock 
</screen></para>

<para>The directive must be placed outside any container.</para>
</sect2>

<sect2><title>Creating a directory for DAVLockDB</title>

<para> As mentioned above a directory must be created  for DAVLockDB
that can be written by the web server process. Usually web server
process runs under the user '<emphasis>nobody</emphasis>' . Please
verify this for your system using the command: 
<screen><command>ps -ef | grep httpd</command></screen>
Under <filename>/usr/local/apache</filename> create
the directory and set the permissions on it using the following
commands:  </para>

<para><screen>
  <command># cd /usr/local/apache</command>
  <command># mkdir var</command>
  <command># chmod -R 755 var/</command>
  <command># chown -R nobody var/</command>
  <command># chgrp -R nobody var/</command>
</screen></para>

</sect2>

<sect2><title>Enabling DAV</title>

<para> Enabling DAV is a trivial task. To enable DAV for a directory
under Apache root, just add the following directive in the container
for that particular directory: </para>

<para><screen>
  DAV On
</screen></para>

<para> This directive will enable DAV for the directory and its
sub-directories.  </para>

<para>The following is a sample configuration that will enable WebDAV
and LDAP authentication on
<filename>/usr/local/apache/htdocs/DAVtest</filename>.  Place this in
the <filename>/usr/local/apache/conf/httpd.conf</filename> file.
</para>

<para><screen>
  &lt;Directory /usr/local/apache/htdocs/DAVtest&gt;
  Dav On
  #Options Indexes FollowSymLinks

  AllowOverride None
  order allow,deny
  allow from all
  AuthName "username_and_passwd_required"
  AuthType Basic
  &lt;Limit PUT POST DELETE PROPFIND PROPPATCH MKCOL COPY MOVE LOCK UNLOCK&gt;
  Require valid-user
  &lt;/Limit&gt;
  LDAP_Server your.ldap.server.com
  LDAP_Port 007
  Base_DN "o=ROOT"

  UID_Attr uid
  &lt;/Directory&gt;
</screen></para>

</sect2>

<sect2><title>Create a Directory called DAVtest</title>

<para>As mentioned in a earlier section, all DAV directories have to
be writable by the WebServer process. In this example we assume
WebServer is running under username '<emphasis>nobody</emphasis>'.
This is usually the case. To check httpd is running under what user,
please use: 
<screen><command># ps -ef | grep httpd</command></screen>
</para>

<para>Create a test directory  called '<filename>DAVtest</filename>'
under <filename>/usr/local/apache/htdocs</filename> :</para>

<para><command># mkdir /usr/local/apache/htdocs/DAVtest</command></para>

<para>Change the permissions on the directory  to make it is
read-writable by the httpd process. Assuming the httpd is running
under username '<emphasis>nobody</emphasis>', use the following
commands:</para>

<para><screen>
  # cd /usr/local/apache/htdocs
  # chmod -R 755 DAVtest/
  # chown -R nobody DAVtest/
  # chgrp -R nobody DAVtest/
</screen></para>
</sect2>

<sect2><title>Restart Apache</title>

<para> Finally you must run the configuration test routine that comes
with Apache to  verify the syntax in <filename>httpd.conf</filename> :
</para>

<para><command># /usr/local/apache/bin/apachectl configtest</command></para>

<para>
If you get error messages please verify that you followed all of
the above mentioned steps correctly. If you can not figure out the
error message feel free to email me with the error message
(<ulink url="mailto:saqib@seagate.com">saqib@seagate.com</ulink>).
</para>

<para>If the configtest is successful start the apache web-server: </para>

<para><command># /usr/local/apache/bin/apachectl restart</command></para>

<para>Now you have WebDAV enabled Apache Server with LDAP
authentication.  </para>

<para>If you have any questions, suggestions, recommendations, kudos, 
comments, or complaints, please email them to me
(<ulink url="mailto:saqib@seagate.com">saqib@seagate.com</ulink>).
</para>

<para><emphasis role="strong">Note:</emphasis> Please free to contact
me if you encounter any problems installing  Apache or any of the
modules, or if you would like upgrade your existing Apache server to
support WebDAV.</para>

<para> <emphasis role="strong"><ulink
url="http://www.stonebeat.org">WebDAV Support and Discussion Forum</ulink></emphasis> </para>

</sect2>

</sect1>
<sect1 id="ssl"><title>Implementing and using SSL to secure WebDAV traffic</title>
<para>
Security of the data stored on a file server is very important these days. Compromised data can cost thousands of dollars to
company. In the last section, we compiled LDAP authentication module into the Apache build to provide a Authentication 
mechanism. However HTTP traffic is very insecure, and all data is transferred in clear text - meaning, the LDAP authentication
(userid/passwd) will be transmitted as clear text as well. This create a problem. Anyone can sniff these userid/passwd and gain
access to DAV store. To prevent this we have to encrypt HTTP traffic, essentially HTTP + SSL or HTTPS. Anything transferred over
HTTPS is encrypted, so the LDAP userid/passwd can not be sniffed. HTTPS runs on port 443. The resulting build from the last 
section's compilation process will have Apache to listen to both port 80 (normal HTTP) and 443 (HTTPS). If you are just going
to use this server for DAV, then I will highly suggest that you close port 80. In this section of the HOWTO I will provide some 
information regarding SSL and maintaining SSL on a WebDAV server. However this is a not limited to a DAV server, it can be 
used on any web server.
</para>

<para> 
There are many administration tasks related with implementing and maintaining SSL encryption for a Web Site. You can 
either use commercial certicates, or generate your own. In the following sections we will briefly go over a few simple 
things that are required to get the SSL website up and running, and maintain it. This tutorial is by no means a full in-depth
overview of the SSL. 
</para>
<sect2>Introduction to SSL</sect2>
<para>
SSL (Secure Socket Layer) is a protocol layer that exists between the Network Layer and Application layer. As the name suggest
SSL provides a mechanism for encrypting all kinds of traffic - LDAP, POP, IMAP and most importantly HTTP. 
</para>
<para>
This HOWTO discusses about the HTTP over SSL or simply HTTPS. For more information about POP/IMAP/LDAP over SSL, please visit
<unlink url="http://www.stunnel.org">http://www.stunnel.org</unlin>. Or if you are looking for a commerical products look into IPlanet for LDAP and Netscape for IMAP and 
POP.
</para>
<sect3>Quick and Dirty on Encryption algorithms used in SSL</sect3>
<para>
There are 2 kinds of encryption algorithms used in SSL.
</para>
<para>
Public-Private Key Crytography - Initiating SSL connection: This algorithm is used for initiating the SSL session. In this algorithm, the encryption must
be performed using the Public Key, and the decryption can only be performed using the Private Key. The Web-server holds the
private Key, and sends the Public key to the client. The public key is sent to the client in a certificate. 
</para>

<itemizedlist>
	<listitem>
		<para>The client request content from the Web Server using HTTPS.</para>
	</listitem>
	<listitem>
		<para>The web server responds with a Certificate which includes the server's public key.</para>
	</listitem>
	<listitem>
		<para>The client check to see if the certificate has expired.</para>
	</listitem>
	<listitem>
		<para>Then the client checks if the Certificate Authority that signed the certificate, is a trusted authority listed in the browser. This explains why we need to get a certificate from a a trusted CA.</para>
	</listitem>
	<listitem>
		<para>The client then checks to see if the Domain Name of the web server matches the Comman Name (CN) on the certificate?</para>
	</listitem>
	<listitem>
		<para>If everything is successful the SSL connection is initiated.</para>
	</listitem>
</itemizedlist>

<para>
Symmetric Cryptography - Actuall transmission of data: After the SSL connection has been established, Symmetric cryptography
is used to encrypting data. Public-Private Key cryptography is CPU cycle intensive, so Symmetric cryptography is used. In 
symmetric cryptography the data can be encrypted and decrypted using the same key. The Key for symmetric cryptography was
exchange in the initiation process.
</para>


<sect2><title>Homegrown Certificates</title>
<para>The certicate that we created while installing Apache, is what I call a Homegrown Certificate. We used the makefile provided by
mod_ssl to create this custom Certificate. We used the command:
<screen># make certificate TYPE=custom</screen>
</para>

<para>These homegrown Certificates are usually used for testing purposes - to check if the Apache with mod_ssl installation worked.  
</para>

<sect2><title>Then why do I need a CA?</title>
<para>
CA or Certificate Authorities are certificate vendors, who are listed as a Trusted CA in user's browser client. As mentioned in
the Encryption Algorithms section, if the CA is not listed as a trusted authority, your user will get a warning message when 
trying to connect to a secure location.
</para>
<para>
Similarly the certificates that you created yourself will cause a warning message to appear on the user's browser.
</para>

<para>If you are implementing a commercial website, I would highly recommend using a Certification Authority for getting 
your certificates signed. The warning message usually make the customers go away.
</para>

<para>If you are on a "intranet", you can also implement your own CA, but it is a complicated task, and requires a lot of day-to-day
management.
  
</sect2>

<sect2><title>How to create CSR</title></para>
CSR or Certificate Signing Request must be sent to the trusted CA for signing. This section discusses howto create a CSR,
and send it to the CA of your choice.

add text here......
</para>
<sect2><title>Removing passphrase from the RSA Private Key</title>
<para>RSA Private Key stored on the webserver is usually encrypted, and you need a passphrase to parse the file. That is why you
are prompted for a passphrase when start Apache with modssl:</para>

<para>
<screen>
<command># apachectl startssl</command>
<command>Apache/1.3.23 mod_ssl/2.8.6 (Pass Phrase Dialog)</command>
<command>Some of your private key files are encrypted for security reasons.</command>
<command>In order to read them you have to provide us with the pass phrases.</command>
<command>Server your.server.dom:443 (RSA)</command>
<command>Enter pass phrase:</command>
</screen>
</para>

<para>Encrypting the RSA Private Key is very important. If somebody gets hold of the you "Unencrypted RSA Private Key" he/she can easily 
impersonate your webserver. If the Key is encrypted, the hacker can not do anything without the passphrase. </para>

<para>However encrypting the Key can sometimes be nuisance, since you will be prompted for a passphrase everytime you start the web-server. 
Specially if you are using rc scripts to start the webserver at boot time, the prompt for passphrase creates problems.</para>

<para>You can get rid of the passphrase prompt easily by decrypting the Key. However make sure that no one can hold of this Key. I would 
recommend Hardening and Securing guidelines be followed before decrypting the Key on the webserver.</para>

<para>To decrypt the Key:</para>
<para>First make a copy of the encrypted key</para>
<para><screen><command># cp server.key server.key.cryp</command></screen></para>
<para>Then re-write the key with encryption. You will be prompted for the original encrypted Key passphrase</para>
<para><screen><command># /usr/local/ssl/bin/openssl rsa -in server.key.cryp -out server.key</command>
read RSA key
Enter PEM pass phrase:
writing RSA key
</screen>
</para>

<para>
One way to secure the decrypted Private Key is to make readable only by the root:
<screen>
<command># chmod 400 server.key</command>
</screen>
</para>
</sect2>

<sect2><title>Trusted Certificate Authorities</title>
<para>The following is list of Certificate Authorities that are trusted by the various browsers:</para>
<orderedlist>
	<listitem>
		<para><ulink url="http://www.verisign.com">Verisign</ulink></para>
	</listitem>
	<listitem>
		<para><ulink url="http://www.thawte.com">Thawte</ulink></para>
	</listitem>
</orderedlist>
</sect2>      
 

</sect1>

</article>
