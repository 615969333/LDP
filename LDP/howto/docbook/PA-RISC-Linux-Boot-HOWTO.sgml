<!DOCTYPE article PUBLIC "-//OASIS//DTD DocBook V4.1//EN">
<article id="index">
<articleinfo>
   <title>PA-RISC/Linux Boot HOWTO</title>
   
	<author>
		<firstname>Deb</firstname>
		<surname>Richardson</surname>
	<affiliation>
		<orgname>The Puffin Group</orgname>
	<address>
		<email>deb@thepuffingroup.com</email>
	</address>
	</affiliation>
	</author>

	<author>
		<firstname>Thomas</firstname>
		<surname>Marteau</surname>
	<affiliation>
		<orgname>ESIEE</orgname>
	<address>
		<email>marteaut@esiee.fr</email>
	</address>
	</affiliation>
	</author>

   <revhistory>
      <revision>
         <revnumber>0.9</revnumber>
         <date>January 15, 2002</date>
         <authorinitials>tm</authorinitials>
	 <revremark>
	 This version brings you some useful advices for compiling your own kernel on hppa systems.
	 </revremark>
      </revision>
      <revision>
         <revnumber>0.8</revnumber>
         <date>October 17, 2001</date>
         <authorinitials>tm</authorinitials>
	 <revremark>
	 This version takes care of the change of name of the official FTP and CVS sites and modify the license.
	 </revremark>
      </revision>
	<revision>
         <revnumber>0.7</revnumber>
         <date>October 13, 2001</date>
         <authorinitials>tm</authorinitials>
	 <revremark>
	 This version adds some updates due to the progress of PA/Linux.
	 </revremark>
      </revision>
	<revision>
         <revnumber>0.6 draft</revnumber>
         <date>September 26, 2001</date>
         <authorinitials>tm</authorinitials>
	 <revremark>
	 This version contains some minor changes and complete the "obtaining bootp/tftpd" section.
	 </revremark>
      </revision>
      <revision>
         <revnumber>0.5 draft</revnumber>
         <date>August 3, 2001</date>
         <authorinitials>tm</authorinitials>
	 <revremark>
	 This version is a large update from Debbie's work
	 </revremark>
      </revision>
      <revision>
         <revnumber>0.3 draft</revnumber>
         <date>November 24, 1999</date>
         <authorinitials>dlr</authorinitials>
	 <revremark>
	 The initial and published version of this HOWTO.
	 </revremark>
      </revision>
   </revhistory>
<abstract>
<para>
This document outlines the procedures for getting the current PA-RISC/Linux development kernel to boot on your PA-RISC system.	It also explains the functions of PALO, the kernel loader for PA/Linux. Also, you will find many informations about how to compile a kernel from the source available at <ulink url="http://cvs.parisc-linux.org/">http://cvs.parisc-linux.org/</ulink>. Please notice that this HOWTO is a newer version than Deb Richardson's and includes more accurate informations due to the progress of the port. Nevertheless, I must say that this version keeps some texts of the oldest one and I reveal some hidden works of Deb. 
</para>

<para>
If you are looking for some informations related to HP hardware but not directly to PA-RISC, please read <ulink url="http://www.linuxdoc.org/HOWTO/HP-HOWTO/index.html">Bruno Cornec's HP-HOWTO</ulink>.
</para>

<para>
For more information about the PA-RISC/Linux porting project, please see <ulink url="http://www.parisc-linux.org/">http://www.parisc-linux.org/</ulink>. This site deals with kernel development and improvment. For userspace troubles, please refer to <ulink url="http://www.debian.org/ports/hppa/index.html">Debian's port pages</ulink>.
</para>
</abstract>

</articleinfo>


<sect1 id="copyright">
<title>Copyright and Licensing</title>
<para>
<literallayout>
Copyright &copy; 2001-2002 Thomas Marteau.
Copyright &copy; 1999 The Puffin Group and Deb Richardson.
</literallayout>
Permission is granted to copy, distribute and/or modify this document under the terms of the <ulink url="http://www.gnu.org/copyleft/fdl.html">GNU Free Documentation License</ulink>, Version 1.1 or any later version published by the Free Software Foundation; with no Invariant Sections, with no Front-Cover Texts, and with no Back-Cover Texts. A copy of the license can be found at <ulink url="http://www.gnu.org/copyleft/fdl.html">http://www.gnu.org/copyleft/fdl.html</ulink>.
</para>
</sect1>

<sect1 id="hardware">
<title>Supported Hardware</title>
<para>
Releasing the 0.9.3 version of PA/Linux, a great improvment was made in term of quantity and quality of hardware support. That's why, even if your model is not listed, give it a try and report your result to the <ulink url="mailto:parisc-linux@lists.parisc-linux.org">mailing list</ulink>.
The following PA-RISC machines can be booted like any other box of a different architecture.
I must add that this list can change at any time. The best way to get an updated list is to 
look at <ulink url="http://mkhppa1.esiee.fr/list.html">http://mkhppa1.esiee.fr/list.html</ulink>.
At this URL, you will know if your hardware is supoorted and how. If you can run PA/Linux <emphasis>via</emphasis> the serial
console or <emphasis>via</emphasis> the graphic card. You will also find everything you need there like the PDC firmware updates.
</para>

<itemizedlist>
<listitem><para>
any 712 models. You can get X running on them via framebuffer device!
</para></listitem>

<listitem><para>
any 715 models including Strider series.
</para></listitem>


<listitem><para>
any 710, 720, 730, 750 models should be running with the latest ISO. It contains some modifications specially for hard disk devices.
</para></listitem>

<listitem><para>
some 725, 735, 755 models are running with the latest kernels. But since there was not a lot of feedback about these machines, we can not be more explicit.
</para></listitem>

<listitem><para>
A180C and similar.
</para></listitem>

<listitem><para>
A500 and similar.
</para></listitem>

<listitem><para>
BXXX models like B132, B180. These boxes can be used in the framebuffer mode <emphasis>via</emphasis> the Standard Text Interface.
</para></listitem>

<listitem><para>
CXXX models like C110, C160.
</para></listitem>

<listitem><para>
CXXXX models work with the I/O devices linked to the first IOMMU.
</para></listitem>

<listitem><para>
D class is normally working. However, many very different configurations exist in the D-class. As a result, it is quite difficult to make a general statement.
</para></listitem>

<listitem><para>
J class is the SMP version of CXXXX models. So, I have to do the same remark.
</para></listitem>

<listitem><para>
L1000 and L2000.
</para></listitem>

</itemizedlist>

<para>
The following hardware will work in the future:
</para>

<itemizedlist>
<listitem><para>
L3000 model.
</para></listitem>

<listitem><para>
N class.
</para></listitem>

<listitem><para>
SuperDome class.
</para></listitem>
</itemizedlist>

<para>
The following hardware won't work:
</para>

<itemizedlist>

<listitem><para>
very old boxes like 705s.
</para></listitem>

<listitem><para>
E,F,G,H,I class. It seems that Christoph Plattner made his E55 running.
</para></listitem>

<listitem><para>
T,V class
</para></listitem>

</itemizedlist>
</sect1>

<sect1 id="preparation">
<title>Preparing to boot</title>
<para>
Like any other system, machines based on PA-RISC processors has several steps in order to be running. First of all, you must set properly the hardware parameters. Then, it must get a first boot in order to launch the installation process. Once the kernel is set up, you can reboot and then you install all your file system. At this point, your system is installed and running. This paper tries to separate the text into these different moments.
</para>
<para>
This first section introduces several HP hardware parameters configurable <emphasis>via</emphasis> HP <command>BOOT_ADMIN</command>
</para>
<sect2 id="consoles">
<title>Consoles</title>

<para>
In order to boot your PA-RISC system with the PA/Linux kernel, you
must first get a console on that system.  You can use either a graphic
console, which requires that a monitor be attached to the system, or a
serial console, which allows communication with the system from a remote
Linux machine. 
For the graphic console, you must be sure that the Linux support the graphic card of your system and 
there are two ways to get the graphic console. If you think about bug reporting  
your trouble, you must differenciate the two of them. First, the STI console is the 
classical video text console like on your PC for example. This name is due to  
the fact that each HP box has the Standard Text Interface which contains some standard ways to access to video memory. 
Second graphic console is the framebuffer console. In fact, while booting, you will see a penguin appeared 
on the top-left corner. This is the easiest way to differenciate the two graphic modes.
For the serial console, it is a good way to get all the prompt messages including the 
BOOT_ADMIN ones. It is very useful for bug reports. The majority of servers can only be used by the serial console.
</para>

<para>
If you have a monitor for your PA-RISC system, the easiest method is to use a graphic console. If you have troubles, the best way is serial console.
</para>

<sect3 id="graphicsconsole">
<title>Using a graphic console</title>

<para>
Using a graphic console is just a fancy way of saying "use the monitor attached 
 to the machine". If you have a monitor for your PA-RISC system, you should be  
able to bring up a console using the monitor, without having to mess with changing  
to and configuring a serial console.  
</para>

<para>
Obviously, if you can use a graphic console, this is the easiest way to proceed. 
Nevertheless, you must be sure that your hardware is supported.
</para>

</sect3>

<sect3 id="serialconsole">
<title>Using a serial console</title>

<para>
The only time that you should have to use a serial console is if you either don't have a monitor for your PA-RISC machine, or your machine doesn't support graphics.  Also, the kernel can NOT use the graphics console of some models, at the moment. So, if you need to use a serial console, use the following procedures to set up serial console support.
</para>

<sect4 id="cable">
<title>Serial Cable</title>
<para>
To connect your PA-RISC machine to your PC so you can boot the system using a console, you need a 9 pin-to-9 pin female null-modem cable.
 You should be able to obtain such a cable at your local computer hardware supplier. Obviously, you can connect the other end of the 
cable to a terminal but the best is to connect it to another box running <command>minicom</command> to get every messages and to copy 
and paste them logged in a file in order to get a complete and easy bug report.
</para>
</sect4>

<sect4 id="minicom">
<title>Configuring <command>minicom</command> on Linux</title>
<para>
In order to communicate with your PA-RISC machine during this process,
you have to set it up in "serial console" mode and configure a serial
communication program.  We recommend <command>minicom</command>,which is installed in most
 Linux distributions by default. If you don't have minicom on your system,
you can find the latest package at any of the major Linux software sites.
</para>

<para>
Most of the minicom configuration is machine-dependent.  You must,
however, ensure that:
</para>

<orderedlist numeration="loweralpha">
<listitem><para>the baud rate is set to 9600</para></listitem>
<listitem><para>parity is set to 8-N-1</para></listitem>
</orderedlist>

<para>
Don't worry too much because it is the default value for PA-RISC system. 
If you have a PC, you will probably need to change the baud rate but it seems that PA-RISC systems do like that too much.
</para>

</sect4>

<sect4 id="switchingconsoles">
<title>Switching consoles</title>
<para>
Before you can set up a serial connection between your Linux machine and your PA-RISC machine, you have to change the console mode on the PA-RISC system.
</para>

<para>
The default console mode is <literal>graphic_1</literal>.  To change this, use the following procedure:
</para>

<orderedlist numeration="arabic">
<listitem>
<para>
Turn the PA-RISC machine on.
</para>
</listitem>

<listitem>
<para>
During the boot process, the following message will appear:
</para>

<programlisting>
Searching for Potential Boot Devices.
To terminate search, press and hold the ESCAPE key.
</programlisting>

<para>
When this message appears, press and hold the <keycap>Esc</keycap> key
until an options menu appears.
</para>
</listitem>

<listitem>
<para> 
By default, you enter the BOOT_ADMIN console.
In some 715s, the options menu looks like this:
</para>

<programlisting>
b)    Boot from specified device
s)    Search for bootable devices
a)    Enter Boot Administration mode
x)    Exit and continue boot sequence
?)    Help

Select from menu: 
</programlisting>

<para>
Select "a)  Enter Boot Administration mode".  This will bring up a "<computeroutput>BOOT_ADMIN></computeroutput>" prompt.  
Everything else you do will be in BOOT_ADMIN mode. So now, everybody is in the BOOT_ADMIN console!
</para>
</listitem>
</orderedlist>

<sect5>
<title>Checking current console mode</title>
<para>
Type: <command>path console</command> to see to which mode the console is currently set.  
</para>

<para>
If it's in graphic console mode, it will return "<computeroutput>Console path     = graphic_1</computeroutput>".  
</para>

<para>
If it's set to serial console, it will return "<computeroutput>Console path    = rs232_a.9600.8.none</computeroutput>" 
or something similar.
</para>

<note>
<para>
Note that for some models, you can find some differences but the idea is the same. 
If you want to see more descriptions, please write a message telling me the box you use and what you get.
</para>
</note>

</sect5>

<sect5>
<title>Changing to serial console mode</title>
<para>
To change to serial console mode, type the following command at the
BOOT_ADMIN command prompt:
</para>

<para>
<command>
path console rs232_a.9600.8.none
</command>
</para>

<para>
To verify that the console path has been properly set, type
<command>path console</command>.  This should return
<computeroutput>Console path    = rs232_a.9600.8.none</computeroutput>,
indicating that the system is now set to boot in serial console mode.
By default, <command>reset</command> will make reboot your system with the new parameters.
</para>
</sect5>

<sect5>
<title>How can I change the boot console to serial on a 712?</title>
<para>
Unfortunately, you can't.  Although 712s are configured for in-house HP development to use serial console, 
this configuration isn't supported in the field.  You have to use a graphics console for 712s 
but if you really want it, you have a tip in the <ulink url="http://lists.parisc-linux.org/pipermail/parisc-linux/1999-December/008117.html">PA/Linux mailing list archive</ulink>.
In fact, why will we use this beautiful 712 with serial console when you can have X!
</para>
</sect5>

<sect5>
<title>Changing to graphic console mode</title>
<para>
It is the opposite operation compared to the upper one. By checking your console path, you should see
<computeroutput>Console path    = rs232_a.9600.8.none</computeroutput>
Now, you must set your grahic mode <emphasis>via</emphasis> <command>BOOT_ADMIN</command>
</para>

<para>
<command>
path console graphic_1
</command>
</para>

<para>
You should get the display available after a <command>reset</command>. If the screen does not seem to work, try to press the <keycap>Tab</keycap> key to change the resolution of your display. Pressing this key, the monitor type changes to one resolution to another one. Perhaps, you need to this operation several times. This is true also when you change your monitor.
</para>
</sect5>

</sect4>
</sect3>
</sect2>

<sect2 id="bootnetwork">
<title>Preparing to boot from the network</title>
<para>
This is a very old way to operate but it used to be the only way. Now, you do not need to boot <emphasis>via</emphasis> the network except some very specific case. That's why it is still here.
</para>

<sect3>
<title><command>rbootd</command> or <command>bootp</command>?</title>
<para>
All new machines can boot using <command>bootp</command>, including the
715/100, 715/120, as well as all 712s.  
</para>

</sect3>

<sect3>
<title>Using <command>rbootd</command></title>

<sect4>
<title>Obtaining <command>rbootd</command></title>

<para>
If you have an older machine that requires <command>rbootd</command> to
boot off a network, use the following procedure to set up, configure,
and boot using the PA-RISC/Linux kernel.
</para>

<para>
Older machines, including the Scorpio 715s, require
<command>rbootd</command>.  You can obtain <command>rbootd</command>:
</para>

<itemizedlist>
<listitem><para>
for all the distributions except Debian, you need to get this archive <emphasis>via</emphasis> <ulink url="http://mkhppa1.esiee.fr/download.html#deb">http://mkhppa1.esiee.fr/download.html</ulink>
</para></listitem>

<listitem><para>
for Debian, from <ulink url="http://www.debian.org/Packages/stable/net/rbootd.html">http://www.debian.org/Packages/stable/net/rbootd.html</ulink>
</para></listitem>
</itemizedlist>

</sect4>

<sect4 id="rbootd">
<title>Configuring <command>rbootd</command></title>
<para>
For example, to boot a PA-RISC 715 system, you have to have rbootd installed on the
Linux system (a "boot server") where you will be storing the
PA-RISC/Linux kernel image that you want to use to boot your PA-RISC system.
</para>

<para>
Once installed, use the following procedure to configure <command>rbootd</command> to work
with your PA-RISC system:
</para>

<orderedlist numeration="arabic">
<listitem>
<para>
In <filename>/etc/rbootd.conf</filename> add the following line:
</para>

<para>
<command>
ethernet addr <replaceable>bootfile</replaceable>
</command>
</para>

<para>
Replace <replaceable>bootfile</replaceable> with the name of your
PA-RISC/Linux kernel image, usually "<literal>lifimage</literal>".
</para>
</listitem>

<listitem>
<para>
Now get the ethernet address of your PA-RISC system by typing
<command>lan_addr</command> at the BOOT_ADMIN prompt on your PA-RISC
system.
</para>

<para>
It will return a number like
<computeroutput>080009-7004b6</computeroutput>.  Make note of the number
returned.
</para>
</listitem>

<listitem>
<para>
In <filename>/etc/rbootd.conf</filename> on your boot server, the
ethernet address has to be colon-delimited.  So, you'll have to modify
the number you just obtained so every two characters (after removing the
"-") is separated by a colon.  For example:
</para>

<programlisting>
080009-7004b6
</programlisting>

<para>
becomes
</para>

<programlisting>
08:00:09:70:04:b6
</programlisting>

<para>
Add the colon delimited ethernet address to
<filename>/etc/rbootd.conf</filename> on your boot server.  The
resulting file will look something like this:
</para>

<programlisting>
# ethernet addr        boot file(s)        comments

08:00:09:87:e4:8f      lifimage_715        # PA/Linux kernel for 715/33
08:00:09:70:04:b6      lifimage_720        # PA/Linux kernel for 720
</programlisting>

<para>
This <filename>rbootd.conf</filename> example contains the ethernet
addresses and boot file names for two different machines.
</para>

<para>
Once you have changed the configuration file, restart
<command>rbootd</command>.
</para>
</listitem>
</orderedlist>

<para>
By default, <command>rbootd</command> assumes that bootfiles are located
in <filename class="directory">/var/lib/rbootd/</filename>. If you use 
the archive for others distributions, this directory is
<filename class="directory">/usr/mdec/rbootd/</filename>. Therefore,
you will have to put your bootable kernel image in that directory, or,
if you really hate that directory for some reason, you can recompile
<command>rbootd</command> to use a different directory.
</para>

<para>
The easiest thing, of course, is to just drop your kernel images in your default directory!
</para>
</sect4>
</sect3>

<sect3>
<title>Using <command>bootp</command>/<command>tftp</command></title>

<sect4>
<title>Obtaining
<command>bootp</command>/<command>tftp</command></title>

<para>
For Debian users, you just have to install the packages <emphasis>via</emphasis> these commands as <command>root</command>:
<programlisting>
apt-get install bootp
apt-get install tftpd
</programlisting>
</para>

<note>
<para>
The package <command>bootp</command> can be replaced by <command>dhcp</command>. But, this howto won't go further in this way. For your information, after installing the package <command>dhcp</command>, you have a section in <filename>/etc/dhcpd.conf</filename> about BOOTP and you can always try <command>man dhcp</command>.
</para>
</note>

<para>
If you need rpm packages, the best advice is to go to <ulink url="http://rpmfind.net">http://rpmfind.net</ulink>.
It looks like for Red Hat users, you need to create the user "nobody" belonging to the group "nogroup". The files contained in
your <filename class="directory">/tftpboot/</filename> directory should belong to him.
</para>

</sect4>

<sect4>
<title>Configuring <command>bootp</command>/<command>tftp</command></title>
<para>
Use the following procedure to use <command>bootp</command> on your boot server:
</para>

<note>
<para>
This section is dedicated to Debian users. For others distributions, it is similar but 
there can be some changes like default directories. Since Debian maintained a <command>bootp</command> package,
I will discuss about it only. For <command>dhcp</command> configuration, it is not planned to be added.
</para>
</note>

<orderedlist numeration="arabic">
<listitem><para>
Configure <filename>/etc/inetd.conf</filename> on your boot server by adding the following lines:
</para>

<programlisting>
tftp            dgram   udp     wait    nobody  /usr/sbin/tcpd       /usr/sbin/in.tftpd /tftpboot
bootps          dgram   udp     wait    root    /usr/sbin/bootpd     bootpd -i -t 120
</programlisting>

<para>
Here, <filename class="directory">/boot</filename> is being used for tftpd server.  
You can choose another directory if you want. According to <command>man tftpd</command>, the default directory is
<filename class="directory">/tftpboot</filename>. 
</para>

<para>
When this is done, restart <command>inetd</command> with: <command>/etc/rc.d/init.d/inetd restart</command>.
</para>
</listitem>

<listitem><para>
According to <command>man bootptab</command>, set up the <filename>/etc/bootptab</filename> file to contain:
</para>

<programlisting>
<replaceable>[hostname]</replaceable>:hd=/tftpboot/Image:\
                             :rp=/usr/src/parisc/:\
                             :ht=ethernet:\
                             :ha=<replaceable>[mac address]</replaceable>:\
                             :ip=<replaceable>[ip address]</replaceable>:\
                             :bf=<replaceable>[boot filename]</replaceable>:\
                             :sm=255.255.255.0:\
                             :to=7200:
</programlisting>

<para>
You have to fill in the <replaceable>[hostname]</replaceable>,
<replaceable>[mac address]</replaceable>, and <replaceable>[ip
address]</replaceable> with the appropriate information, of course,
where:
</para>

<itemizedlist>

<listitem><para>
[hostname] is the name of the PA-RISC host
</para></listitem>

<listitem><para>
[mac address] is the ethernet address of the PA-RISC box, which you
obtain by typing <command>lan_address</command> at the
<literal>BOOT_ADMIN></literal> prompt
</para></listitem>

<listitem><para>
[ip address] is the IP address of the PA-RISC system
</para></listitem>

<listitem><para>
[boot file name] is the name of the bootable kernel image.
</para></listitem>

</itemizedlist>

<para>
You'll end up with something like this:
</para>

<programlisting>
vodka:hd=/tftpboot:\
                             :rp=/usr/src/parisc/:\
                             :ht=ethernet:\
                             :ha=080069088717:\
                             :ip=140.244.9.208:\
                             :bf=lifimage:\
                             :sm=255.255.255.0:\
                             :to=7200:
</programlisting>
</listitem>
</orderedlist>
</sect4>
</sect3>

<sect3> 
<title>Booting your PA-RISC/Linux system <emphasis>via</emphasis> network and with serial console</title> 
<para>
To conclude with the development way to boot the kernel, this section will tell you how to boot if you are 
using a server to boot your HP system. But it tends to less and less used. For users, please refer directly to 
<command>PALO</command> section.
</para>

<para> 
Here we are. This is just some tips to get the boot for those who tried the network way. 
You've done everything outlined above, your development machine 
is hooked up to your PA-RISC machine, you've got a bootable 
PA-RISC/Linux kernel image on your boot server, and you're ready to give 
it a try.  If everything is as it should be, the following procedure 
will allow you to boot your PA-RISC system into Linux. 
</para> 
  
<orderedlist numeration="arabic"> 
<listitem> 
<para> 
Make sure your development machine is connected to your PA-RISC machine 
with a serial cable.  Sounds obvious, but check anyway. 
</para> 
</listitem> 
 
<listitem> 
<para> 
Fire up <command>minicom</command> on your development machine. 
</para> 
</listitem> 
 
<listitem> 
<para> 
Start your PA-RISC system up. 
</para> 
</listitem> 
 
<listitem> 
<para> 
Watch your minicom console.  When the following message appears during 
the PA-RISC machine's boot process, press and hold the 
<keycap>Esc</keycap> key: 
</para> 
 
<programlisting> 
Searching for Potential Boot Devices.                                      
To terminate search, press and hold the ESCAPE key.           
</programlisting> 
</listitem> 
 
<listitem> 
<para> 
Select "<literal>a)  Enter Boot Administration mode</literal>" from the 
menu.  This brings up the <literal>BOOT_ADMIN></literal> prompt. 
</para> 
</listitem> 
 
<listitem> 
<para> 
Type the following at the prompt: <command>boot lan</command>. 
</para> 
</listitem> 
 
<listitem> 
<para> 
Watch your PA-RISC system magically become a PA/Linux system.   
Ta dah! 
</para> 
</listitem> 
</orderedlist> 
</sect3> 
</sect2> 
</sect1> 

<sect1 id="vmlinux"> 
<title>Building your own PA-RISC/Linux kernel</title>

<para>
To build a Linux kernel, you need a compiler and the Linux source. The first element is not a trivial thing to find because it depends on how you build your kernel. The second is easier since it lives on <ulink url="http://cvs.parisc-linux.org/"> the official CVS site</ulink>. First, we will discuss about <command>GCC</command> compiler. Then, the configuration of your build will be treated. The last paragraph will deal with the installation of this new kernel.
</para>

<sect2> 
<title><command>GCC</command> compiler</title> 
<para>
You can compile your kernel with your own HP box. But on oldest systems, perhaps, you prefer to use another computer to compile your kernel. Let's see the two alternatives: 
</para>
 
<sect3> 
<title>native build</title> 
<para>
Since Debian is the only distribution supporting PA-RISC architecture, if you want to use the <emphasis>Super Cow</emphasis> powers, you need to have some basic informations about Debian packages system first.
</para>

<sect4> 
<title><command>apt-get</command> and friends</title> 
<para>
<command>apt-get</command> is a simple command line utility that manages your Debian package system. First, Gustavo Noronha Silva
wrote <ulink url="http://www.debian.org/doc/manuals/apt-howto/index.html">APT HOWTO</ulink> that I invite you to read for deeper 
knowledge. Here, we just want to build a kernel. Since hppa port is not out yet, you should be very careful with the mirrors you choose in your <filename>/etc/apt/sources.list</filename>. For example, In Germany, you can use the following settings:
<programlisting>
# non-US packages
deb http://www.ftp.uni-erlangen.de/pub/debian/ unstable/non-US main non-free contrib
# Binary packages
deb http://gluck.debian.org/debian unstable main contrib non-free
# source packages
deb-src http://gluck.debian.org/debian unstable main contrib non-free
</programlisting>
</para>
</sect4> 

<sect4> 
<title>update your <command>gcc</command></title> 
<para>
If you are using your own HP box, you need only the classical <command>GCC</command> compiler. The recommendation is to update to the last version uploaded by the developpers. 
<programlisting>
apt-get update
apt-get upgrade
</programlisting>
If you do not want to upgrade all your system, the package description of kernel-source, you need to get those packages updated:
</para>

<itemizedlist>

<listitem><para>binutils</para></listitem>
<listitem><para>fileutils</para></listitem>
<listitem><para>gcc</para></listitem>
<listitem><para>libc-dev</para></listitem>
<listitem><para>make</para></listitem>

</itemizedlist>

<para>
When you did this step, you can procede to the kernel tweaking.
</para>

</sect3>

<sect3> 
<title>cross compiled build</title> 
<para>
For this way of building your kernel, everything depends on the architecture of your building machine. For PC, you can download an already-made cross compiler on <ulink url="http://ftp.parisc-linux.org/x86-xcompilers/">PA/Linux FTP server</ulink>. For the others architectures or if you want to compile your own toolchain, please refer to <ulink url="http://parisc-linux.org/toolchain/PARISC-Linux-XC-HOWTO.html">Carlos O'Donell's HOWTO</ulink>.
</para>
</sect3>

</sect2>

<sect2> 
<title>Kernel configuration</title> 
<para>
The best way to get performance is to get a well configured kernel. For PA-RISC platform, <command>make oldconfig</command> is a
kind of default setup. If you want to make your own kernel, the first step is to know what is your hardware. The best way is to look at your box and find a maximum of information. Then, you go to the <ulink url="http://hwdb.parisc-linux.org">official hardware database</ulink> or the <ulink url="http://partsurfer.hp.com">HP partsurfer</ulink>.
</para> 
<para>
When you know what is inside your box and what you want to do with your box, just run <command>make menuconfig</command> or another config command. Here is the list of menus you should be going in to see if the value set corresponds with your hardware:
</para>

<itemizedlist>
<listitem><para><emphasis>Processor type</emphasis> indicates your CPU model</para></listitem>
<listitem><para><emphasis>General options</emphasis> tells you what is going to be enable in your kernel</para></listitem>
<listitem><para><emphasis>Network device support</emphasis> is used to set your network card</para></listitem>
<listitem><para><emphasis>Character devices</emphasis> shows your I/O possiblities</para></listitem>
<listitem><para><emphasis>Console drivers</emphasis> is directly related to your console path</para></listitem>
<listitem><para><emphasis>Sound</emphasis> enables your Harmony hardware</para></listitem>
</itemizedlist>

<para>
As you see, menus about HP hardware are not numerous but there is a lot of dependency between them. 
Now, you must configure accordingly to the use you will do of the box.
Here is the list of some menus you should be going in to configure the services you want:
</para>

<itemizedlist>
<listitem><para><emphasis>General setup</emphasis> is responsible for binary formats</para></listitem>
<listitem><para><emphasis>Parallel port support</emphasis> gives you the choice to deactivate parallel port</para></listitem>
<listitem><para><emphasis>Block devices</emphasis> set on the ramdisk and loopback support. You probably won't use them. </para></listitem>
<listitem><para><emphasis>File Systems/Network File Systems</emphasis> is where to go to unset NFS support</para></listitem>
</itemizedlist>

<para>
Once this is done, save your configuration. Everything is written in the .config file. You can backup it because a 
<command>make distclean</command> will remove it. At this stage, you do <command>make dep vmlinux</command> and if everything
goes fine, you have a new kernel.
</para>

</sect2>

<sect2> 
<title>Kernel installation</title> 
<para>
If you made a native build, you backup the last working kernel with an extension like ".bk" and you copy the recent kernel 
with the same name. You reboot and try the new one. If it is not working, you can reboot and using <command>PALO</command>
command, you change the name of th kernel you want to boot. ( See next section for more informations )
</para>

<para>
If you are booting <emphasis>via</emphasis> network, you need to set <command>PALO</command> as it is explained in the next section and run <command>make palo</command>
</para>

</sect2>

</sect1>



<sect1 id="booting"> 
<title>Booting your PA-RISC/Linux system <emphasis>via</emphasis> <command>PALO</command>, the kernel loader</title> 

<sect2> 
<title>What is <command>PALO</command>?</title> 
<para> 
<command>PALO</command> is two programs, a boot loader, which is loaded by the HP firmware into 
memory and then executed, and boot media management tool, which initializes and updates  
bootable media such as disks. The PALO boot loader executable is stored in a file called  
iplboot. "IPL" is HP jargon for Initial Program Loader. 
The boot media management tool is called <command>PALO</command>, just as on x86  
the lilo boot media management tool is called <command>LILO</command>, though it's worth  
noting that <command>PALO</command> doesn't usually need to be used every time you build  
a new kernel, as <command>LILO</command> does.  
</para> 
</sect2> 
 
<sect2> 
<title>What does <command>PALO</command>?</title> 
<para> 
The main idea is to boot a kernel passing all the parameters it needs. The practical  
experience is a little more complicated. Indeed, PALO can transform the classical vmlinux  
into a HP-UX bootable lifimage including a RAMDISK or a NFSROOT redirection.  
However, it could make a hard disk drive bootable specifying the console output and the root device. 
We are going to see all these points precisely. The major point is that lifimage file is a bootable kernel and
vmlinux is the kernel itself and it needs <command>PALO</command> to be bootable.
</para>
</sect2>

<sect2>
<title>How to make a lifimage with <command>RAMDISK</command> ?</title>
<para>
First point is to explain when you should use this way. At an earlier step of PA/Linux project, the lifimage was very useful. In fact, you put this file in the bootp server tree and then you can boot your HP box <emphasis>via</emphasis> boot lan instruction. The advantage of ramdisk is to unpack its own file system and to be completely independant. The main drawback is the fact that you have to build your own ramdisk if you have some memory constraints or some files customized.
Now, let's see how to get a lifimage. So, you get the latest source of PA/Linux. Mainly, you will need a good cross-compiler and the linux and palo directory. Everything you need is at <ulink url="http://www.parisc-linux.org/">http://www.parisc-linux.org/</ulink>. You do your <command>make menuconfig</command>. Then, you just have to do <command>make palo</command>. The point is that in the palo directory, you have the <command>PALO</command> <filename>Makefile</filename> in which you have to select the ramdisk file. So, initially, you can read:
<programlisting>
# RAMDISK = ${PA}/ramdisk.bin
</programlisting>
Thus, if you want to use the <command>RAMDISK</command> support with a file called for example ramdisk.bin and placed in the linux directory, you just have to uncomment it:
<programlisting>
RAMDISK = ${PA}/ramdisk.bin
</programlisting>
After configuring the <filename>Makefile</filename>, you can go into the linux directory and launch your <command>make palo</command>. The result, a lifimage file, is waiting for you in the <command>PALO</command> directory.
</para>
</sect2>

<sect2>
<title>How to make a lifimage with <command>NFSROOT</command> ?</title>
<para>
This method is widely used because the kernel and the file system is visible since your server. It is also very easy to test a new kernel. You just have to generate the kernel and then you put it in the correct directory. After rebooting, the HP box will find <emphasis>via</emphasis> <command>boot lan</command> instruction its new kernel.
Getting the <command>NFSROOT</command> support is easier than the <command>RAMDISK</command>. You edit the <filename>Makefile</filename> of <command>PALO</command> and you specify the tftpboot server IP adress. In fact, if your server has 10.10.10.2 for IP adress, then the default file is ok because we can read into: 
<programlisting>
NFSROOT = 10.10.10.2
</programlisting>
If you have anything else, this field must be completed by the correct data. After configuring the <filename>Makefile</filename>, you can go into the linux directory and launch your <command>make palo</command>. The result, a lifimage file, is waiting for you in the <command>PALO</command> directory.
</para>
</sect2>

<sect2>
<title>How to make bootable a partition ?</title>
<para>
This part is where <command>PALO</command> will be seen as <command>LILO</command>. <command>PALO</command> is mainly a program that enables HP box to boot <emphasis>via</emphasis> a kernel on its own hard disk drive. This section is going to explain you how to make it right. When you install the <command>PALO</command> package, Paul Bame, the author and maintainer, put a copy of the default <filename>/etc/palo.conf</filename> in the <filename>/usr/doc/share/doc/palo/palo.conf</filename>. If you want to understand how <command>PALO</command> works, you just have to read this file!
This sample comes from <filename>palo.conf</filename>. It is the default value. We advice you to stay close to this scheme. However, the parameter <command>recoverykernel</command> is the path to the kernel that you want to boot with in a failsafe session! The next one, <command>bootloader</command>, is the path to this utility which is produced by <command>PALO</command> when you ask for <command>make iplboot</command>. <command>init-partitioned</command> is used to tell on which device you want to write the result. The effect is immediate. It means that <command>PALO</command> is going to write on the first octets of this partition. A good advice will be to check this info with <command>fdisk</command>, in order to be sure to update the good drive. Finally, the last parameter is the <command>commandline</command>! The first number indicates which partition <command>PALO</command> has to mount in order to get the kernel file! Logically, the following string is the absolute path to the kernel. <command>HOME</command> and <command>TERM</command> seem to be some environmental parameters passed to <command>init</command>. They are not compulsory but they can be useful. The <command>root</command> parameter explains to the kernel which partition it must mount for the root file system in read-only while booting. It can be tricky when you plug two disks. You could add some very interesting parameters like <command>console</command> where you can specify the output for the console. You should know that <command>console=ttyS0</command> is for a serial console and <command>console=tty0</command> is for a STI-console. In the latest version of <command>PALO</command>, this path should be added automatically and correctly. If not, please mail to the mailing list.
<programlisting>
# The following arguments are set up for booting from /dev/sda3, specifically
# mounting partition 3 as root, and using /boot/vmlinux as both the
# recovery kernel, and the default dynamically-booted kernel.
# --recoverykernel=/boot/vmlinux
# --bootloader=/boot/iplboot
# --init-partitioned=/dev/sda
# --commandline=3/boot/vmlinux HOME=/ TERM=linux root=/dev/sda3
</programlisting>
</para>
</sect2>

<sect2>
<title>How to use <command>PALO</command> at the boot ?</title>

<sect3>
<title>The theory</title>
<para>
After installing your <command>PALO</command>, you would like to modify the parameters you pass to the kernel. First, you must know how to interact with <command>PALO</command> at the startup. For some old models, you must add ipl to your command in the boot admin console:
<command>BOOT_ADMIN> boot pri ipl</command>
For the recent HP boxes, the system will ask you if you want to interact with IPL. You just have to answer by a "y". Then, you are in <command>PALO</command> with the list of all the parameters and the corresponding number. Then, you enter the number of the parameter you want to change. You hit Enter and you modify it and you validate. The system will redisplay the new list. This modification is not permanent! To write your changes, you have to run <command>/sbin/palo</command> and it will write on the disk all the parameters contained in the default file, eg <filename>/etc/palo.conf</filename>.
If you want to add another parameter, you select one parameter and write yours with a space between the two. If you want to delete one, you select it and erase the complete entry. You will see that the list counts one parameter less.
</para>
<para>
For more informations about <command>PALO</command>, please look at the <ulink url="http://cvs.parisc-linux.org/~checkout~/palo/README.html?rev=HEAD">PALO readme</ulink>. This section is mainly inspired from this Paul Bame's file and my current page about <command>PALO</command> that you can find at <ulink url="http://mkhppa1.esiee.fr/palo.html">http://mkhppa1.esiee.fr/palo.html</ulink>.
</para>
</sect3>

<sect3>
<title>One example</title>
<para>
This example is the work of <emphasis>Michael Damaschke</emphasis>. So, let's go for the story of the happy PA/Linux user booting a kernel, also called <emphasis>I don' t know how I can configure my workstation to boot the right kernel I want ?</emphasis>.
</para>
<para>
After the power on of your workstation and monitor there is a message on the
screen how told you that the workstation wants to start automatically an
bootdevice or you can hold the <keycap>Esc</keycap> key to break up the auto-booting., on
this situation you must hold the <keycap>Esc</keycap> key. 
</para>
<note>
<para>
Depending on your model, you need to press this key during a long time.
Also, your monitor can be too slow to be up while the message is on the screen. So, if you
see your leds on your keyboard blinking, it is the signal to press and hold the <keycap>Esc</keycap> key.
If you still have troubles, please refer to the <emphasis>Consoles</emphasis> section.
</para>
</note>

<para>
Now, there is some little differences about the way to get access to <command>BOOT_ADMIN</command>
If you have an old box, you get a new Information message on your screen where the workstation-firmware
told you that it would like to search for all bootable devices or you can
break this by holding the <keycap>Esc</keycap> key. So you must do the same procedure you
have done before, you must hold the <keycap>Esc</keycap> key.
</para>

<para>
Then you get a menu where you must push the a-key with following ENTER-Key,
so know you are on the <command>BOOT_ADMIN</command> Prompt. First, we must turn off the auto
booting by the following lines on the <command>BOOT_ADMIN</command> Prompt:
<programlisting>
BOOT_ADMIN> autoboot off
</programlisting>
then press the <keycap>ENTER</keycap> key.
</para>

<para>
After that, you must tell the system from wich SCSI boot device you would
like to boot. This device must have the <emphasis>f0</emphasis> type partition where the
<command>PALO</command> loader lives.
</para>

<para>
For this example, the old kernel is <filename>vmlinux-2.4.9-32</filename> and 
the new one for example <filename>vmlinux-2.4.17-pa3</filename>.
The format of the SCSI boot device is:
<computeroutput>
SCSI.X.0           
</computeroutput>
where <emphasis>X</emphasis> is the SCSI-ID of the disk you want.
For example:
<programlisting>
BOOT_ADMIN> boot SCSI.5.0
</programlisting>
After the command <command>boot</command> and the SCSI-ID, you must add <command>IPL</command> if you have 
a HP 9000/7xx to tell that you want to interact with <command>IPL</command>. If you have a more recent hardware, 
the system will ask if you want to interact with <command>IPL</command>:
<programlisting>
Interact with IPL (Y or N)?>
</programlisting>
Now, you can manual configure the <command>PALO</command> booting parameters.
For example:
<programlisting>
BOOT_ADMIN> boot scsi.5.0 ipl
</programlisting>
then press the <keycap>ENTER</keycap> key.
</para>

<para>
Now you can see a new Menu where you can configure on line 0 (default) the
boot partition number, the path and the name where your boot kernel is.
It should looks like this:
<programlisting>
HARD Booted.
palo ipl 0.92 root@spqr Mon Jun 25 23:03:13 CEST 2001
3/vmlinux-2.4.9-32 3585851 bytes @ 0x6d8f800
Current command line:
3/vmlinux-2.4.9-32 root=/dev/sda3 console=ttyS0 TERM=vt102
 0: 3/vmlinux-2.4.9-32
 1: root=/dev/sda3
 2: console=ttyS0
 3: TERM=vt102

Edit which field?
(or 'b' to boot with this command line)? 0
</programlisting>

You are asking <command>PALO</command> to boot the kernel file <filename>vmlinux-2.4.9-32</filename> 
living on the third partition of scsi.5.0.
But you want another kernel this time. So, you press the <keycap>ENTER</keycap> key
and you modify the text to match with your needs, here <filename>vmlinux-2.4.17-pa3</filename>.
You validate your input <emphasis>via</emphasis> the <keycap>ENTER</keycap> key.
Then, it asks you which field you want to edit, just put "b" to boot your new kernel!
After that you must press the <keycap>ENTER</keycap> key, please don't chance other
parameters if you don't know what you do !
Now, <command>PALO</command> has no secret for you :-)
</para>

</sect3>
</sect2>
</sect1>


<sect1 id="bootadmin">
<title>What you need to know about <command>BOOT_ADMIN</command></title>
<para>
<command>BOOT_ADMIN</command> is an early console where you can execute some precise commands. Here, you should find everything you need. On all HP systems using PA-RISC processor, you will find <command>BOOT_ADMIN</command>, the display can be different but the idea remains. That's why the list is not complete but enough. Another major point is for every command, you have a shorter way to invocate them. You can see the shortcut because it is shown by the uppercase letters. I will put the full name for these sections.
</para>
<sect2>
<title>The <command>main</command> commands</title>
<para>
These commands are the basic ones.
<itemizedlist>
<listitem><para>
<command>boot</command> must be followed by an argument which indicates the path you want to boot. The path should be thedefinition of a device like for example <computeroutput>FWSCSI.6.0</computeroutput> or <computeroutput>PRI</computeroutput> if you have initialized this variable correctly.
</para></listitem>

<listitem><para>
<command>path</command> displays or sets the previous path. You just have to type: <computeroutput>path pri fwscsi.6.0</computeroutput>. But, you can set also the paths of the console (graphics/serial) and of the keyboard (ps2/hil).
</para></listitem>

<listitem><para>
<command>search</command> is a very useful command. It checks automatically and displays all the bootable pathes. In the recent versions, it links them to a shortcut. It detects even if the box can do <command>boot lan</command>.
</para></listitem>

<listitem><para>
<command>display</command> redisplays the current menu.
</para></listitem>

<listitem><para>
<command>help</command> gives you an overview of what the command does. By default, you can have all the commands by typing <computeroutput>help main</computeroutput>.
</para></listitem>

<listitem><para>
On approximately every system, you have a <command>reset</command> instruction. It makes the box reboot with the newest parameters you hase set.
</para></listitem>

</itemizedlist>
</para>
</sect2>

<sect2>
<title>The <command>configuration</command> commands</title>
<para>
These commands are available in the configuration menu. So, in order to use them, you must enter this menu with <command>configuration</command> command.
<itemizedlist>
<listitem><para>
<command>auto</command> will show you if the box will boot by default or will do a search. You can influence these parameters with the keywords <parameter>ON</parameter> and <parameter>OFF</parameter>.
</para></listitem>

<listitem><para>
<command>bootinfo</command> lists all the boot parameters of the system.
</para></listitem>

<listitem><para>
<command>default</command> sets back the predefined values.
</para></listitem>

<listitem><para>
<command>monitor</command> sets your display configuration by typing <computeroutput>mo &lt;path&gt; &lt;type&gt;</computeroutput> which indicates your console path and secondly your type. If you do not know your monitor type, <emphasis>via</emphasis> <computeroutput>mo list</computeroutput>, you have all the necessary info.
</para></listitem>

</itemizedlist>
</para>
</sect2>

<sect2>
<title>The <command>information</command> commands</title>
<para>
Here, you will have access to all the informations about your system. Go into the menu is done by asking for <command>information</command>.

<itemizedlist>
<listitem><para>
<command>all</command> should display everything you need. 
</para></listitem>

<listitem><para>
<command>fwrversion</command> gives your fimrware revision. You can check if your firmware is updated with <ulink url="ftp://us-ffs.external.hp.com/firmware_patches/hp/cpu/catalog">this file</ulink>.
</para></listitem>

<listitem><para>
<command>lanaddress</command> contains the MAC address of the system.
</para></listitem>

</itemizedlist>
</para>
</sect2>


<sect2>
<title>The <command>service</command> commands</title>
<para>
It is PA-RISC guru skill menu. You will find nothing really interesting for an end-user. That's why you will find nothing. If you think I should really put something, please mail me.
</para>
</sect2>

</sect1>

<sect1 id="contributors">
<title>HOWTO contributors</title>
<para>
The following people contributed or reviewed the Deb's version of the HOWTO in one way or
another.
</para>

<itemizedlist>

<listitem><para>David Alexander deVries
<email>adevries@thepuffingroup.com</email></para></listitem>

<listitem><para>Philip Imperial Schwan
<email>pschwan@thepuffingroup.com</email></para></listitem>

</itemizedlist>

<para>
For the Thomas' version.</para>

<itemizedlist>

<listitem><para>Michael Damasche 
<email>sps01@uni-koeln.de</email>
Thanks for your example</para></listitem>

<listitem><para>Helge Deller 
<email>deller@gmx.de</email></para></listitem>

<listitem><para>Grant Grundler 
<email>grundler@puffin.external.hp.com</email></para></listitem>

<listitem><para>Richard Hirst 
<email>rhirst@puffin.external.hp.com</email></para></listitem>

</itemizedlist>

</sect1>

</article>





