<!doctype article public "-//OASIS//DTD DocBook V3.1//EN"
 [
<!entity header system "header.sgml">
]>
<ARTICLE ID="INDEX"><ARTHEADER><TITLE>
  HOWTO-HOWTO
 </TITLE>
<PUBDATE>v1.4 12 Jun, 2000</PUBDATE>
<AUTHOR><FIRSTNAME>Mark</FIRSTNAME>
<OTHERNAME>F.</OTHERNAME>
<SURNAME>Komarinski</SURNAME></AUTHOR>
<ABSTRACT><PARA>
  List the tools, procedures, and hints to get HOWTO authors up to speed and writing.
 </PARA></ABSTRACT>
<REVHISTORY><REVISION><REVNUMBER>1.4</REVNUMBER>
<DATE>Jun 12, 2000</DATE>
<AUTHORINITIALS>mfk</AUTHORINITIALS>
<REVREMARK>Documented vim and sgedit.  Spelling and other changes from ldp list.  Also added LDP guidelines under style guide.</REVREMARK></REVISION></REVHISTORY></ARTHEADER>
<SECT1><TITLE>
About this HOWTO
</TITLE>
<SECT2><TITLE>
Purpose / Scope of this HOWTO
</TITLE>
<PARA>
This document was started on Aug 26, 1999 by Mark F. Komarinski after two day's worth of frustration getting tools to work. If even one LDP author is helped by this, then I did my job. 
</PARA>
<PARA>
The newest version of this can be found on my homepage <ULINK URL="http://www.cgipc.com/~markk">http://www.cgipc.com/~markk</ULINK> in its SGML source. Other versions may be found in different formats at the LDP homepage <ULINK URL="http://www.linuxdoc.org/">http://www.linuxdoc.org</ULINK>.  
</PARA>
<PARA>
There are many ways to contribute to the Linux movement without actually
writing code.  One of the most important is writing documentaiton, allowing
each person to share their knowledge with thousands of others
around the world.  This HOWTO is designed to help you get familiar with how
the LDP works, and what tools you'll need to write your own HOWTO.
</PARA></SECT2>
<SECT2><TITLE>
About the LDP
</TITLE>
<PARA>
The following is an excerpt from the LDP Manifesto (<ULINK URL="http://www.linuxdoc.org/manifesto.html">
http://www.linuxdoc.org/manifesto.html</ULINK>
</PARA>
<PARA>
The Linux Documentation Project (LDP) is working on developing free, high
quality documentation for the GNU/Linux operating system.
The overall goal of the LDP is to collaborate in all of the issues of Linux
documentation. This includes the creation of "HOWTOs" and "Guides". We hope to
stablish a system of documentation for Linux that will be easy to use and
search. This includes the integration of the manual pages, info docs, HOWTOs,
and other documents. 
</PARA>
<PARA>
You can find out more about the Linux Documentation Project at <ULINK URL="http://www.linuxdoc.org">
http://www.linuxdoc.org</ULINK>
</PARA></SECT2>
<SECT2><TITLE>
Feedback
</TITLE>
<PARA>
Comments on this HOWTO may be directed to the author (<EMAIL>markk@linuxdoc.org</EMAIL>).  
</PARA></SECT2>
<SECT2><TITLE>
Copyrights and Trademarks
</TITLE>
<PARA>
(c) 1999-2000 Mark F. Komarinski
</PARA>
<PARA>
This manual may be reproduced in whole or in part, without fee, subject to the following restrictions: 
</PARA>
<ITEMIZEDLIST><LISTITEM><PARA>
The copyright notice above and this permission notice must be preserved complete on all complete or partial copies 
</PARA></LISTITEM>
<LISTITEM><PARA>
Any translation or derived work must be approved by the author in writing before distribution. 
</PARA></LISTITEM>
<LISTITEM><PARA>
If you distribute this work in part, instructions for obtaining the complete version of this manual must be included, and a means for obtaining a complete version provided. 
</PARA></LISTITEM>
<LISTITEM><PARA>
Small portions may be reproduced as illustrations for reviews or quotes in other works without this permission notice if proper citation is given. Exceptions to these rules may be granted for academic purposes: Write to the author and ask. These restrictions are here to protect us as authors, not to restrict you as learners and educators. Any source code (aside from the SGML this document was written in) in this document is placed under the GNU General Public License, available via anonymous FTP from the GNU archive. 
</PARA></LISTITEM></ITEMIZEDLIST></SECT2>
<SECT2><TITLE>
Acknowledgements and Thanks
</TITLE>
<PARA>
Thanks to everyone that gave comments as I was writing this. This includes David Lawyer, Deb Richardson, Daniel Barlow, Greg Ferguson, Mark Craig and other members of the <EMAIL>ldp-discuss@lists.linuxdoc.org</EMAIL> list. Some sections I got from the <ULINK URL="http://www.linuxdoc.org/HOWTO/">HOWTO Index</ULINK> (available at many LDP locations) and the sgmltools documentation. The sections on network access to CVS was partially written by Serek (<EMAIL>ser@serek.arch.pwr.wroc.pl</EMAIL>). Sections on DocBook were written by Jorge Godoy (<EMAIL>godoy@conectiva.com.br</EMAIL>). A great deal of thanks to both of them for their help. 
</PARA></SECT2>
<SECT2><TITLE>
Conventions
</TITLE>
<PARA>
Commands that are listed have the following format. Commands are prefaced with the name of the current shell running. This is followed by a $ for commands that should be run as a normal (non-root) user. Shells followed by a # are commands that should be run as a root user.
</PARA></SECT2></SECT1>
<SECT1 ID="INTRODUCTION"><TITLE>
Introduction to the LDP and SGML
</TITLE>
<SECT2><TITLE>
The LDP
</TITLE>
<PARA>
The Linux Documentation Project (LDP) was started to provide new users a way of
getting information quickly about a particular subject. It not only contains a
series of books on administration, networking, and programming, but has a large
number of smaller works on individual subjects, written by those who have used
it. If you want to find out about printing, you get the <ULINK URL="http://www.linuxdoc.org/HOWTO/Printing-HOWTO.html">Printing HOWTO</ULINK>. If you
want to do find out if your Ethernet card works with Linux, grab the <ULINK URL="http://www.linuxdoc.org/HOWTO/Ethernet-HOWTO.html">Ethernet
HOWTO</ULINK>, and so on. At first, many of these works were in text or HTML. As time
went on, there had to be a better way of managing these documents. One that
would let you read it from a web page, a text file on a CD-ROM, or even your
hand-held PDA. The answer, as it turns out, is SGML. 
</PARA></SECT2>
<SECT2><TITLE>
SGML
</TITLE>
<PARA>
The Standard Generalized Markup Language (SGML) is a language that is based on
embedding codes within a document. In this way, it is similar to HTML, but there
is where any similarities end. The power of SGML is that unlike WYSIWYG
(What You See Is What You Get), you don't define things like colors, or font
sizes, or even some kinds of formatting. Instead, you define elements
(paragraph, section, numbered list) and let the SGML processor and the end
program worry about placement, colors, fonts, and so on. HTML does the same
thing, and is actually a subset of SGML. SGML has really three parts that make
it up. First is the Structure, which is what is commonly called the DTD, or
Document Type Definition. The DTD defines the relationship between each of
the elements. The DocBook DTD, used to create this document, is an example of
this. The DTD lists the rules that the content must follow. Second is the DSSSL
or Document Style Semantics and Specification Language.  The DSSSL tells the
program doing the rendering how to convert the SGML into something that a human
can read.  It tells the renderer to convert a &lt;table&gt; tag into 14 point
bold if it is going to RTF format, or to turn it into a &lt;h1&gt; tag if
you're going to HTML.  Finally there is the Content, which is what gets
rendered by the SGML processor and is eventually seen by the user. This
paragraph is content, but so would a graphic image, table, numbered list,
and so on. Content is surrounded by tags to separate out each element. 
</PARA></SECT2>
<SECT2><TITLE>
Why SGML instead of HTML or other formats?
</TITLE>
<PARA>
SGML provides for more than just formatting. You can automatically build
indexes, table of contents, and links within the document or to outside. The
Jade and OpenJade packages also let you export (I'll call it render from here
on) SGML to LaTeX, info, text, HTML, and RTF. From these basic formats, you
can then create other formats such as MS Word, PostScript, PDF and so on.
Programs like LyX allow you to write in TeX format, then export it as SGML
and render from SGML to whatever you chose. In the end, SGML is more concerned
about the way elements work instead of the way they look. A big distinction,
and one that will let you write faster, since you don't have to worry about
placement of paragraphs, font sizes, font types, and so on.
</PARA></SECT2>
<SECT2><TITLE>
For New Authors
</TITLE>
<PARA>
If you are a new to the LDP and want to pick up an unmaintained HOWTO or write a new HOWTO or mini-HOWTO document, contact the HOWTO coordinator at <EMAIL>ldp-discuss@lists.linuxdoc.org</EMAIL>. This is to make sure the HOWTO coordinator can know who is working on what documentation.
</PARA>
<PARA>
Once that part is complete, you may write your documentation in the format
of your choice and submit a draft to <EMAIL>ldp-submit@lists.linuxdoc.org</EMAIL>
and the draft will be reviewed by an LDP volunteer.  In a few short days you'll
get the draft and comments from the volunteer.  After applying the comments,
you may send this version to the ldp-submit list again for final submission
into the LDP.
</PARA>
<PARA>
At this point, another LDP volunteer will translate your document into
DocBook and send you the finished DocBook document.  From here on, all
submissions to the LDP has to be in DocBook format.  If you have markup
questions, you may ask the volunteer who assisted you, or ask the
LDP Docbook list.
</PARA></SECT2>
<SECT2><TITLE>
Mailing Lists
</TITLE>
<PARA>
There are a few mailing lists to subscribe to so you can take part in how the LDP works. First is <EMAIL>ldp-discuss@lists.linuxdoc.org</EMAIL>, which is the main discussion group of the LDP. To subscribe, send a message with the subject reading &quot;subscribe&quot; to <EMAIL>ldp-discuss-request@lists.linuxdoc.org</EMAIL>. To unsubscribe, send an e-mail with the subject of &quot;unsubscribe&quot; to <EMAIL>ldp-discuss-request@lists.linuxdoc.org</EMAIL>. 
</PARA>
<PARA>
Another list is the <EMAIL>ldp-docbook@lists.linuxdoc.org</EMAIL> list, which 
is for markup or other questions about DocBook itself.  If you run into
trouble with a particular markup tag, you can send your question here
for answers.  You can subscribe to the docbook list by sending a "subscribe"
message to <EMAIL>ldp-docbook-request@lists.linuxdoc.org</EMAIL>.
</PARA></SECT2></SECT1>
<SECT1 ID="TOOLS"><TITLE>
The tools
</TITLE>
<PARA>
In this section, we will cover some of the tools that you'll need or want to
use to create your own LDP documentation. I'll describe them here, and better
define them later on, along with how to install them. If you use some other
tool to assist in writing LDP, please let me know and I'll add a blurb here
for it. 
</PARA>
<SECT2><TITLE>
DSSSL
</TITLE>
<PARA>
The Normal Walsh version is required, the LDP is optional.
</PARA>
<SECT3><TITLE>
Norman Walsh DSSSL
</TITLE>
<PARA>
<ULINK URL="http://nwalsh.com/docbook/dsssl/db152.zip">http://nwalsh.com/docbook/dsssl/db152.zip</ULINK> 
</PARA>
<PARA>
The Document Style Semantics and Specification Language tells jade how to
render a SGML document into print or online form. The DSSSL is what converts
a title tag into an &lt;H1&gt; tag in HTML, or bold, 14 point Times Roman for
RTF, for example. Documentation for DSSSL is located at <ULINK URL="http://nwalsh.com/docbook/dsssl/db152d.zip">http://nwalsh.com/docbook/dsssl/db152d.zip</ULINK>.
Note that modifying the DSSSL doesn't modify DocBook itself. It merely changes
the way the rendered text looks. The LDP uses a modified DSSSL that provides
for a table of contents.
</PARA></SECT3>
<SECT3><TITLE>
LDP DSSSL
</TITLE>
<PARA>
<ULINK URL="http://metalab.unc.edu/gferg/ldp/ldp.dsl">http://metalab.unc.edu/gferg/ldp/ldp.dsl</ULINK>
</PARA>
<PARA>
The LDP DSSSL requires the Norman Walsh version (see above) but is a slightly
modified DSSSL to provide things like a table of contents.
</PARA></SECT3></SECT2>
<SECT2><TITLE>
DocBook DTD (version 3.1)
</TITLE>
<PARA>
Required - <ULINK URL="http://www.oasis-open.org/docbook/sgml/3.1/docbk31.zip">http://www.oasis-open.org/docbook/sgml/3.1/docbk31.zip</ULINK>
</PARA>
<PARA>
The DocBook DTD defines the tags and structure of a DocBook SGML document. Modifying the DTD, such as adding a new tag, doesn't make it DocBook anymore.
</PARA></SECT2>
<SECT2><TITLE>
Jade
</TITLE>
<PARA>
Jade and OpenJade are two of the programs that do most of the rendering and
validation of code based off the DTD and DSSSL. One of the following is
required and should be installed after the DTD and DSSSL have been installed.
</PARA>
<SECT3><TITLE>
Jade
</TITLE>
<PARA>
<ULINK URL="ftp://ftp.jclark.com/pub/jade/jade-1.2.1.tar.gz">ftp://ftp.jclark.com/pub/jade/jade-1.2.1.tar.gz</ULINK>
</PARA>
<PARA>
Jade is the front-end processor for SGML. It uses the DSSSL and DocBook DTD to perform the verification and rendering from SGML into the target format.
</PARA></SECT3>
<SECT3><TITLE>
OpenJade
</TITLE>
<PARA>
<ULINK URL="http://openjade.sourceforge.net/">http://openjade.sourceforge.net/</ULINK>
</PARA>
<PARA>
An extension of Jade written by the DSSSL community. Some applications require
jade, but are being updated to support either software package.
</PARA></SECT3></SECT2>
<SECT2><TITLE>
Jade wrappers
</TITLE>
<PARA>
These tools are optional and may be installed after Jade, the DSSSL, and DTD
have been installed.
</PARA>
<SECT3><TITLE>
sgmltools-lite
</TITLE>
<PARA>
<ULINK URL="http://sgmltools-lite.sourceforge.net/">http://sgmltools-lite.sourceforge.net/</ULINK>
</PARA>
<PARA>
This is the successor to the sgmltools project, which has officially been
disbanded for over a year. Since then, Cees de Groot has created a slightly
different project, which acts as a wrapper to the jade SGML processor. It
hides much of the ugliness of syntax. This author was able to install the old
sgmltools package followed by the sgmltools-lite and could format this
document quite easily. There's even a man page for sgmltools showing syntax.
</PARA></SECT3>
<SECT3><TITLE>
Cygnus DocBook Tools
</TITLE>
<PARA>
May be Red Hat specific - <ULINK URL="http://www.redhat.com/">http://www.redhat.com/</ULINK>
</PARA>
<PARA>
Red Hat distributes three packages, starting with the 6.2 release, that include 
DocBook support and some tools. The tools are easily installed, allowing you to
focus more on writing than wrestling with the tools. TeTex, Jade, and
Jadetex must be installed first.  All three of these packages are available on
the installation CD.
</PARA></SECT3></SECT2>
<SECT2><TITLE>
Editing tools
</TITLE>
<PARA>
The following tools may be used to create, edit, or validate your HOWTO.
</PARA>
<SECT3><TITLE>
LyX
</TITLE>
<PARA>
<ULINK URL="http://www.lyx.org/">http://www.lyx.org/</ULINK>
</PARA>
<PARA>
LyX provides the power of writing SGML with the ease-of-use of a regular word processor. It's not a WYSIWYG program, but more WYSIWYM (What You See Is What You Mean) application, since what you see on the screen isn't necessarily what happens after the SGML processor is done with it. The display that LyX provides is similar to, but not exactly like, what the output from jade would look like. However, it's close enough for you to see the flow of the document. Sections and subsections are numbered and put in bold, and different fonts are used to signify things like &lt;code&gt; or &lt;url&gt; tags. Most tags are hidden from the main LyX window while you edit, since LyX writes in TeX, then exports the TeX to SGML.
</PARA>
<FIGURE FLOAT="0"><TITLE>LyX screen shot</TITLE>
<MEDIAOBJECT><IMAGEOBJECT><IMAGEDATA FILEREF="lyx_screenshot.eps" FORMAT="EPS"></IMAGEOBJECT>
<IMAGEOBJECT><IMAGEDATA FILEREF="lyx_screenshot.jpg" FORMAT="JPG"></IMAGEOBJECT>
<TEXTOBJECT><PHRASE>LyX doesn't show tags, but reformats the text based on the tag being used.</PHRASE></TEXTOBJECT></MEDIAOBJECT></FIGURE></SECT3>
<SECT3><TITLE>
Emacs (PSGML)
</TITLE>
<PARA>
Optional - <ULINK URL="http://www.lysator.liu.se/~lenst/about_psgml/">http://www.lysator.liu.se/~lenst/about_psgml/</ULINK>
</PARA>
<PARA>
Emacs has an SGML writing mode called psgml that is a major mode designed for editing SGML and XML documents. It provides &quot;syntax highlighting&quot; or &quot;pretty printing&quot; features that make SGML tags stand out, a way to insert tags other than typing them by hand, and the ability to validate your document while writing.
</PARA>
<PARA>
For users of Emacs, it's a great way to go, and many believe it to allow more
versatility than any other SGML documentation tool. It works with DocBook,
LinuxDoc and other DTDs equally well.
</PARA></SECT3>
<SECT3><TITLE>
VIM
</TITLE>
<PARA>
<ULINK URL="http://www.vim.org">http://www.vim.org</ULINK>
</PARA>
<PARA>
No mention of Emacs is complete without talking about vi.  The VIM (Vi IMproved)
editor has the functionality of regular vi, but also has an SGML mode that will
color-coordinate your screen to show where tags are.
</PARA></SECT3>
<SECT3><TITLE>
WordPerfect 9 (Corel Office 2000)
</TITLE>
<PARA>
<ULINK URL="http://www.corel.com/">http://www.corel.com/</ULINK>
</PARA>
<PARA>
WordPerfect 9 for the MS Windows platform has support for SGML and DocBook 3.0. WordPerfect 9 for Linux has no SGML capabilities. 
</PARA>
<PARA>
This is the least expensive of the commercial applications that support SGML.
</PARA></SECT3>

<SECT3><TITLE>sgedit</TITLE>
<PARA><ULINK URL="http://www.tksgml.de/">http://www.tksgml.de/</ULINK></PARA>
<PARA>The sgedit program allows you to vidually edit SGML files.  It has the advantages of not needing to know Emacs or VI before starting, and is cross-platform, working in both Windows and Linux.  It's a commercial application, but pricing has not been set.  There will be free licenses for private and academic use.</PARA>
<PARA>Along with visual editing, sgedit will also validate documents on loading, and on demand by using the <MENUCHOICE><GUIMENU>Document</GUIMENU><GUIMENUITEM>Validate</GUIMENUITEM></MENUCHOICE> command.</PARA>

<MEDIAOBJECT>
<IMAGEOBJECT><IMAGEDATA FILEREF="sgeditscreenshot.eps" FORMAT="EPS"></IMAGEOBJECT>
<IMAGEOBJECT><IMAGEDATA FILEREF="sgeditscreenshot.jpg" FORMAT="JPG"></IMAGEOBJECT>
<TEXTOBJECT><PHRASE>The screenshot of the sgedit program shows a tree on the left side that has the SGML document in a heirarchy, while the right side shows the document.  Tags are shown with a grey background.</PHRASE></TEXTOBJECT>
</MEDIAOBJECT>
</SECT3></SECT2>
<SECT2><TITLE>
Other/Reference
</TITLE>
<PARA>
The items in this section are reference books or other utilities that can't
quite be catagorized (yet).
</PARA>
<SECT3><TITLE>
DocBook: The Definitive Guide
</TITLE>
<PARA>
<ULINK URL="http://www.docbook.org/">http://www.docbook.org/</ULINK>
</PARA>
<PARA>
This book was released by O'Reilly in October 1999, and is a great reference
to DocBook. I have not found it to be a great practical book, and much of the
emphasis is on XML, but the DocBook tags for version 3.1 are all listed in a
handy format. You can pick it up at the book vendor of choice. The entire book
is also available online (in HTML and SGML formats) at the above URL. 
</PARA></SECT3>
<SECT3><TITLE>
Aspell
</TITLE>
<PARA>
Optional - <ULINK URL="http://aspell.sourceforge.net/">http://aspell.sourceforge.net/</ULINK>
</PARA>
<PARA>
This spell checking application can work around SGML tags, and only spell check the content within the tags. Default spell checkers like ispell will try to spellcheck the tags, causing errors at every new tag.
</PARA></SECT3></SECT2></SECT1>
<SECT1 ID="GETSTARTED"><TITLE>
Getting Started with DocBook
</TITLE>
<PARA>
This section covers the new method of writing LDP documentation, using the DocBook 3.1 DTD. We'll cover getting, installing, and using tools, along with an introduction to DocBook tags. Since there are over 300 DocBook tags, we won't cover them all here. Really interested readers can go to
<ULINK URL="http://www.docbook.org/">http://www.docbook.org</ULINK> for more information.
</PARA>
<SECT2><TITLE>
Downloading and installing the tools
</TITLE>
<SECT3><TITLE>
Manual using jade/openjade
</TITLE>
<PARA>
This is the quick and dirty way that should work for all distributions, no matter what distribution you're using. 
</PARA>
<ORDEREDLIST CONTINUATION="RESTARTS" INHERITNUM="IGNORE"><LISTITEM><PARA>
Create a base directory to store everything such as <FILENAME CLASS="DIRECTORY" MOREINFO="NONE">/usr/local/sgml/</FILENAME>. We'll call this <ENVAR>$_toolroot</ENVAR> from here on.
</PARA></LISTITEM>
<LISTITEM><PARA>
Install Jade, DocBook DTD, and DSSSL such that the base of each is under <ENVAR>$_toolroot</ENVAR> (creating <FILENAME CLASS="DIRECTORY" MOREINFO="NONE">$_toolroot/jade-1.2.1</FILENAME>, <FILENAME CLASS="DIRECTORY" MOREINFO="NONE">$_toolroot/dtd</FILENAME>, <FILENAME CLASS="DIRECTORY" MOREINFO="NONE">$_toolroot/dssl</FILENAME>)
</PARA></LISTITEM>
<LISTITEM><PARA>
You'll need to set the <ENVAR>SGML_CATALOG_FILES</ENVAR> environment
variable to the catalogs that you have under
<FILENAME CLASS="DIRECTORY" MOREINFO="NONE">$_toolroot</FILENAME>. You can do this with the command:
<COMMAND MOREINFO="NONE">bash$ export SGML_CATALOG_FILES = $_toolroot/dtd/docbook.cat:$_toolroot/dsssl/docbook/catalog:$_toolroot/jade-1.2.1/dsssl/catalog</COMMAND>
</PARA></LISTITEM>
<LISTITEM><PARA>
Now you can start using Jade. To create individual HTML files: 
</PARA>
<PARA> <COMMAND MOREINFO="NONE">$_toolroot/jade-1.2.1/jade/jade -t sgml -i html -d $_toolroot/dsssl/docbook/html/docbook.dsl howto.sgml</COMMAND></PARA></LISTITEM>
<LISTITEM><PARA>
To create one large HTML file, add <EMPHASIS>-V nochunks</EMPHASIS> to the jade command.
</PARA></LISTITEM></ORDEREDLIST></SECT3>
<SECT3><TITLE>
sgmltools
</TITLE>
<PARA>
Unlike previous versions of sgmltools, you will require sgmltools version 2.x for use with DocBook. Since the backend programs have all changed, you'll also need to forget the sgml2xxx style of programs (sorry). Since some major distributions ship with sgml 1.x, you'll need to remove the sgml 1.x package and install either a 2.0 version, or a CVS version. To get the latest CVS source code version, you can use the following set of commands: 
</PARA>
<PROGRAMLISTING FORMAT="LINESPECIFIC">
bash$ CVSROOT=:pserver:cvs@cvs.sgmltools.org:/home/cvs
bash$ export CVSROOT
bash$ cvs login
bash$ cvs -z6 get sgmltools
</PROGRAMLISTING>
<PARA>
The CVS password is 'cvs'. Once downloaded, You can just use 
</PARA>
<PROGRAMLISTING FORMAT="LINESPECIFIC">
bash$ ./compile 
bash$ make
bash# make install
</PROGRAMLISTING>
<PARA>
    to install sgmltools. For Red Hat-based systems (using RPM) you can use the rpmfind command to get the latest sgmltools. The rpmfind program is available at
 <ULINK URL="http://www.rpmfind.net">http://www.rpmfind.net/</ULINK>. Make
sure you get sgmltools and not sgml-tools, as the latter is sgml-tools 1.0.9
and only works with LinuxDoc documents. For Debian-based systems, running
2.2 "Potato" and above, apt-get will retrieve the right package for you: 
   </PARA>
<PROGRAMLISTING FORMAT="LINESPECIFIC">
bash# apt-get install sgmltools-2
   </PROGRAMLISTING>
<PARA>
    As with Red Hat Linux, the sgml-tools package is outdated.  Be sure to get
sgmltools-2. 
   </PARA></SECT3>
<SECT3><TITLE>
    Cygnus DocBook Tools
   </TITLE>
<PARA>
    These tools are provided with Red Hat 6.2. Make sure the following packages are installed:
   </PARA>
<ITEMIZEDLIST><LISTITEM><PARA>
    sgml-common
    </PARA></LISTITEM>
<LISTITEM><PARA>
    docbook
    </PARA></LISTITEM>
<LISTITEM><PARA>
    stylesheets
    </PARA></LISTITEM></ITEMIZEDLIST>
<PARA>
    Red Hat has the latest version on their web site: <ULINK URL="http://www.redhat.com/support/errata/RHBA-2000022-01.html">http://www.redhat.com/support/errata/RHBA-2000022-01.html</ULINK>.</PARA>
<PARA>
Download/get/sneakernet the RPMs to your machine and install in the usual manner (become root, then <COMMAND MOREINFO="NONE">rpm -Uvh filename</COMMAND>). Once the RPMs are installed, you can use the following commands to render DocBook:
   </PARA>
<PROGRAMLISTING FORMAT="LINESPECIFIC">
bash$ db2html <EMPHASIS>filename</EMPHASIS>
   </PROGRAMLISTING>
<PARA>
    Renders DocBook into HTML. A subdirectory with the filename (minus the .sgml extension) is created and the HTML files are placed there.
   </PARA>
<PROGRAMLISTING FORMAT="LINESPECIFIC">
bash$ db2pdf <EMPHASIS>filename</EMPHASIS>
   </PROGRAMLISTING>
<PARA>
    Renders DocBook into a PDF file.
   </PARA></SECT3></SECT2>
<SECT2><TITLE>
   Writing SGML by hand
  </TITLE>
<PARA>
   Most of this is covered by Jorge Godoy's Using DocBook document. Those
interested can read it at
<ULINK URL="http://metalab.unc.edu/godoy/using-docbook/using-docbook.html">
http://metalab.unc.edu/godoy/using-docbook/using-docbook.html</ULINK>
for writing DocBook using your favorite text editor.
  </PARA>
<NOTE><TITLE>If you write SGML by hand</TITLE>
<PARA>
  SGML has over 300 tags, and uses tags much more heavily than HTML.  It's
recommended that you use an existing HOWTO as a template and see how
other authors have written.  It's also recommended that you use a user-friendly
editor like PSGML or WordPerfect for Windows, as it lists many of the tags
that are available.
  </PARA></NOTE></SECT2>
<SECT2><TITLE>
   Writing SGML using LyX
  </TITLE>
<SECT3><TITLE>
    New documents
   </TITLE>
<PARA>
    You can easily start a new HOWTO using LyX. Use the
<MENUCHOICE MOREINFO="NONE"><GUIMENU MOREINFO="NONE">File</GUIMENU>
<GUIMENUITEM MOREINFO="NONE">New From Template...</GUIMENUITEM></MENUCHOICE>
menu command to bring up the template listings. Select <EMPHASIS>Templates</EMPHASIS> on the right side of the screen, then select <EMPHASIS>docbook_template.lyx</EMPHASIS> in the file listing. Select OK, and you'll have a new document. Fill in the items, such as title, abstract, and author name, then start writing.
   </PARA>
<FIGURE FLOAT="0"><TITLE>DocBook Template screen from LyX</TITLE>
<MEDIAOBJECT><IMAGEOBJECT><IMAGEDATA FILEREF="docbook_template.eps" FORMAT="EPS"></IMAGEOBJECT>
<IMAGEOBJECT><IMAGEDATA FILEREF="docbook_template.jpg" FORMAT="JPG"></IMAGEOBJECT>
<TEXTOBJECT><PHRASE>You can select the docbook_template.lyx here</PHRASE></TEXTOBJECT></MEDIAOBJECT></FIGURE></SECT3>
<SECT3><TITLE>
    Existing documents
   </TITLE>
<PARA>
    If you have an already-existing LyX, TeX, or text document, you can import it into LyX with the
<MENUCHOICE MOREINFO="NONE"><GUIMENU MOREINFO="NONE">File</GUIMENU>
<GUIMENUITEM MOREINFO="NONE">import</GUIMENUITEM></MENUCHOICE>
 command. Once the file is imported, go to 
<MENUCHOICE MOREINFO="NONE"><GUIMENU MOREINFO="NONE">Layout</GUIMENU>
<GUIMENUITEM MOREINFO="NONE">Document...</GUIMENUITEM></MENUCHOICE>
 In the popup window, under Style, select <EMPHASIS>SGML (DocBook Article)</EMPHASIS>. You'll be asked if you want to convert all text over, and say Yes. You will need to reapply most tags, but it's a fairly simple matter of selecting text and changing the style. Many LyX functions have a keyboard shortcut to assist you.
   </PARA>
<FIGURE FLOAT="0"><TITLE>Document Layout screen</TITLE>
<MEDIAOBJECT><IMAGEOBJECT><IMAGEDATA FILEREF="document_layout.eps" FORMAT="EPS"></IMAGEOBJECT>
<IMAGEOBJECT><IMAGEDATA FILEREF="document_layout.jpg" FORMAT="JPG"></IMAGEOBJECT>
<TEXTOBJECT><PHRASE>Image of the Document Layout Screen from LyX</PHRASE></TEXTOBJECT></MEDIAOBJECT></FIGURE></SECT3>
<SECT3><TITLE>
    Exporting documents to SGML
   </TITLE>
<PARA>
    Once your document is written or converted, save it in LyX format. This will allow you to edit future versions easily. Then, go to
<MENUCHOICE MOREINFO="NONE"><GUIMENU MOREINFO="NONE">File</GUIMENU>
<GUIMENUITEM MOREINFO="NONE">Export</GUIMENUITEM>
<GUIMENUITEM MOREINFO="NONE">as DocBook...</GUIMENUITEM></MENUCHOICE>
 and the file will be exported in DocBook.
   </PARA></SECT3></SECT2>
<SECT2><TITLE>
   Writing SGML using PSGML
  </TITLE>
<SECT3><TITLE>
    Introduction
   </TITLE>
<PARA>
    If you have installed a recent distribution, you may already have PSGML installed for use with Emacs. To check, start Emacs and look for the PSGML documentation (
<KEYCOMBO MOREINFO="NONE"><KEYCAP MOREINFO="NONE">C</KEYCAP>
<KEYCAP MOREINFO="NONE">h</KEYCAP></KEYCOMBO>
<KEYCAP MOREINFO="NONE">i</KEYCAP>
<KEYCAP MOREINFO="NONE">m</KEYCAP>
<KEYCAP MOREINFO="NONE">psgml</KEYCAP>
).
   </PARA>
<PARA>
    From here on, we assume you have PSGML installed for use with a recent version of GNU Emacs. If that all went by too fast for you, see the free chapter from Bob Ducharme's SGML CD book: <ULINK URL="http://www.snee.com/bob/sgmlfree/">http://www.snee.com/bob/sgmlfree/</ULINK>.
   </PARA></SECT3>
<SECT3><TITLE>
    Updating your .emacs to use PSGML
   </TITLE>
<PARA>
    If you want GNU Emacs to enter PSGML mode when you open a <EMPHASIS>.sgml</EMPHASIS> file and be ready for SGML editing, make sure PSGML can find the DocBook DTD. If your distribution already had PSGML set up for use with GNU Emacs, you probably do not have to do anything to get this to work. Otherwise, you may need to set an environment varialbe that tells PSGML where to look for the SGML catalog (the list of DTDs).
   </PARA>
<PARA>
    For example:
   </PARA>
<PROGRAMLISTING FORMAT="LINESPECIFIC">
bash$ export SGML_CATALOG_FILES=/usr/lib/sgml/catalog
   </PROGRAMLISTING>
<PARA>
    Then add something like the following to your .emacs file:
   </PARA>
<PROGRAMLISTING FORMAT="LINESPECIFIC">
;; *******************************************************************
;; set up psgml mode...
;; use psgml-mode instead of emacs native sgml-mode
;; (autoload 'sgml-mode "psgml" "Major mode to edit SGML files." t )
(setq auto-mode-alist
  (append
  (list
    '("\\.sgm$" . sgml-mode)
    '("\\.sgml$" . sgml-mode)
    )
  auto-mode-alist))
;; set some psgml variables

(setq sgml-auto-activate-dtd t)
(setq sgml-omittag-transparent t)
(setq sgml-balanced-tag-edit t)
(setq sgml-auto-insert-required-elements t)
(setq sgml-live-element-indicator t)
(setq sgml-indent-step nil)

;; create faces to assign to markup categories

(make-face 'sgml-comment-face)
(make-face 'sgml-start-tag-face)
(make-face 'sgml-end-tag-face)
(make-face 'sgml-entity-face)
(make-face 'sgml-doctype-face) ; DOCTYPE data
(make-face 'sgml-ignored-face) ; data ignored by PSGML
(make-face 'sgml-ms-start-face) ; marked sections start
(make-face 'sgml-ms-end-face) ; end of marked section
(make-face 'sgml-pi-face) ; processing instructions
(make-face 'sgml-sgml-face) ; the SGML declaration
(make-face 'sgml-shortref-face) ; short references
;; view a list of available colors with the emacs-lisp command:
;;
;; list-colors-display
;;
;; please assign your own groovy colors, because these are pretty bad
(set-face-foreground 'sgml-comment-face "coral"
;(set-face-background 'sgml-comment-face "cornflowerblue")
(set-face-foreground 'sgml-start-tag-face "slateblue")
;(set-face-background 'sgml-start-tag-face "cornflowerblue")
(set-face-foreground 'sgml-end-tag-face "slateblue")
;(set-face-background 'sgml-end-tag-face "cornflowerblue")
(set-face-foreground 'sgml-entity-face "lavender")
;(set-face-background 'sgml-entity-face "cornflowerblue")
(set-face-foreground 'sgml-doctype-face "lavender")
;(set-face-background 'sgml-doctype-face "cornflowerblue")
(set-face-foreground 'sgml-ignored-face "cornflowerblue")
;(set-face-background 'sgml-ignored-face "cornflowerblue")
(set-face-foreground 'sgml-ms-start-face "coral")
;(set-face-background 'sgml-ms-start-face "cornflowerblue")
(set-face-foreground 'sgml-ms-end-face "coral")
;(set-face-background 'sgml-ms-end-face "cornflowerblue")
(set-face-foreground 'sgml-pi-face "coral")
;(set-face-background 'sgml-pi-face "cornflowerblue")
(set-face-foreground 'sgml-sgml-face "coral")
;(set-face-background 'sgml-sgml-face "cornflowerblue")
(set-face-foreground 'sgml-shortref-face "coral")
;(set-face-background 'sgml-shortref-face "cornflowerblue")
;; assign faces to markup categories
(setq sgml-markup-faces '
  (
  (comment . sgml-comment-face)
  (start-tag . sgml-start-tag-face)
  (end-tag . sgml-end-tag-face)
  (entity . sgml-entity-face)
  (doctype . sgml-doctype-face)
  (ignored . sgml-ignored-face)
  (ms-start . sgml-ms-start-face)
  (ms-end . sgml-ms-end-face)
  (pi . sgml-pi-face)
  (sgml . sgml-sgml-face)
  (shortref . sgml-shortref-face)
  )
)
;; tell PSGML to pay attention to face settings
(setq sgml-set-face t)
;; ...done setting up psgml-mode.
;; *******************************************************************
   </PROGRAMLISTING>
<PARA>
    Then restart Emacs
   </PARA></SECT3>
<SECT3><TITLE>
    SGML Smoke Test
   </TITLE>
<PARA>
    Try the following smoke test. Start a new file, <EMPHASIS>/tmp/test.sgml</EMPHASIS> for example, and enter the following:
   </PARA>
<PROGRAMLISTING FORMAT="LINESPECIFIC">
<![CDATA [ 
<!DOCTYPE test [ 
<!ELEMENT test - - (#PCDATA)> 
]> 
]]>
   </PROGRAMLISTING>
<PARA>
    Enter 
<KEYCOMBO MOREINFO="NONE"><KEYCAP MOREINFO="NONE">C</KEYCAP>
<KEYCAP MOREINFO="NONE">c</KEYCAP></KEYCOMBO>
<KEYCOMBO MOREINFO="NONE"><KEYCAP MOREINFO="NONE">C</KEYCAP>
<KEYCAP MOREINFO="NONE">p</KEYCAP></KEYCOMBO>
. If Emacs manages to parse your DTD, you will see <EMPHASIS>Parsing prolog...done</EMPHASIS> in the minibuffer. Try <EMPHASIS>C-c C-e RETURN</EMPHASIS> to insert a <EMPHASIS>&lt;test&gt;</EMPHASIS> element. If things are working correctly, you should see the following in Emacs:
   </PARA>
<PROGRAMLISTING FORMAT="LINESPECIFIC">
<![CDATA [ 
<!DOCTYPE test [ 
<!ELEMENT test - - (#PCDATA)> 
]> 
<test></test> 
]]>
   </PROGRAMLISTING></SECT3>
<SECT3><TITLE>
    Writing a New HOWTO in DocBook
   </TITLE>
<PARA>
    Start a new file for your HOWTO and enter the following:
   </PARA>
<PROGRAMLISTING FORMAT="LINESPECIFIC">
<![CDATA [ 
<!DOCTYPE ARTICLE PUBLIC "-//Davenport//DTD DocBook V3.0//EN"> ]]>
   </PROGRAMLISTING>
<PARA>
    Enter
<KEYCOMBO MOREINFO="NONE"><KEYCAP MOREINFO="NONE">C</KEYCAP>
<KEYCAP MOREINFO="NONE">c</KEYCAP></KEYCOMBO>
<KEYCOMBO MOREINFO="NONE"><KEYCAP MOREINFO="NONE">C</KEYCAP>
<KEYCAP MOREINFO="NONE">p</KEYCAP></KEYCOMBO>
and hold your breath. If everything goes as planned, you will see Emacs chewing for a few seconds and then <EMPHASIS>Parsing prolog...done</EMPHASIS> in the minibuffer.
   </PARA>
<PARA>
    At this point, enter
<KEYCOMBO MOREINFO="NONE"><KEYCAP MOREINFO="NONE">C</KEYCAP>
<KEYCAP MOREINFO="NONE">c</KEYCAP></KEYCOMBO>
<KEYCOMBO MOREINFO="NONE"><KEYCAP MOREINFO="NONE">C</KEYCAP>
<KEYCAP MOREINFO="NONE">e</KEYCAP></KEYCOMBO>
<KEYCAP MOREINFO="NONE">RETURN</KEYCAP>
 to insert an <EMPHASIS>&lt;article&gt;</EMPHASIS> element and proceed to write your HOWTO.
   </PARA></SECT3>
<SECT3><TITLE>
    Quick Reference for Emacs with PSGML
   </TITLE>
<PARA>
    See Nik Clayton's primer for FreeBSD documentation: <ULINK URL="http://www.freebsd.org/tutorials/docproj-primer/psgml-mode.html">http://www.freebsd.org/tutorials/docproj-primer/psgml-mode.html</ULINK>
   </PARA></SECT3></SECT2></SECT1>
<SECT1 ID="STYLE"><TITLE>
   Style guides
  </TITLE>
<PARA>
   This section contains notes on conventions that the LDP has agreed to in order to give all LDP documents a similar look and feel. You should keep these guides in mind when writing.
  </PARA>
<SECT2><TITLE>
    Date formats
   </TITLE>
<PARA>
    The &lt;pubdate&gt; tag in your header should be in the following format:
   </PARA>
<PROGRAMLISTING FORMAT="LINESPECIFIC">
v1.0, 21 April 2000
   </PROGRAMLISTING></SECT2>
<SECT2><TITLE>Graphics formats</TITLE>
<PARA>
   When submitting graphics to the LDP, please submit one set of graphics in
   .eps, and another in either .gif or .jpg.  Be aware of the patent issues with
   .gif, but it makes slightly better pictures then .jpg.
   </PARA></SECT2>

<SECT2>
<TITLE>DocBook Versions</TITLE>
<PARA>Only DocBook 3.1 is supported by the LDP at this time.  DocBook 4.0 is under
consideration.  Many 3.1 documents can be converted to 4.0 easily by avoiding the use of depreciated tags.</PARA>
</SECT2>

<SECT2><TITLE>Depreciated Tags</TITLE>
<PARA>Tags listed in <EMPHASIS>DocBook:  The Definitive Guide</EMPHASIS> as depreciated
are discouraged for use in LDP documentation.  Please use tags that aren't depreciated.  Some ways to use newer tags are listed in the tip and trics section.</PARA></SECT2>

<SECT2><TITLE>Tag Minimization</TITLE>
<PARA>Tag minimization is using &lt;/&gt; instead of the full end of a tag (such as &lt;/para&gt;.  Since this makes the document more confusing for future authors and LDP members, please avoid using this practice.</PARA></SECT2>
<SECT2><TITLE>
    Conventions
   </TITLE>
<PARA>
    Conventions for different kinds of text is as follows:
   </PARA>
<PARA>
If you're going to show the use of a command, format the command so it looks like a user's command line. The prompt must contain the shell type (bash, tcsh, zsh, etc) followed by a $ for commands to be run as a normal (non-root) user or a # for a root user.
   </PARA>
<PARA>
    A command would then look like this:
   </PARA>
<PROGRAMLISTING FORMAT="LINESPECIFIC">
bash$ command "run as a normal user"
bash# command "run as a root user"
tcsh# setenv DISPLAY :0.0
  </PROGRAMLISTING></SECT2>
<SECT2><TITLE>
DocBook release
</TITLE>
<PARA>
The DocBook version used by the LDP is version 3.1.  In order for your SGML
to work with the LDP tools, your header must look like this:
</PARA>
<PROGRAMLISTING FORMAT="LINESPECIFIC">
&lt;!doctype article public "-//OASIS//DTD DocBook V3.1//EN"&gt;
</PROGRAMLISTING></SECT2></SECT1>
<SECT1 ID="TIPS"><TITLE>Tips and Tricks with DocBook</TITLE>
<PARA>
This section covers a few quirks of DocBook that you may run into when writing your documents.
</PARA>
<SECT2><TITLE>Including Images</TITLE>
<PARA>
If you plan on including images in your HOWTOs, you can now do this, as LinuxDoc didn't support images.  Here's a sample way of including an image in your HOWTOS:
</PARA>
<PROGRAMLISTING FORMAT="LINESPECIFIC">
&lt;figure&gt;&lt;title&gt;LyX screen shot&lt;/title&gt;
&lt;mediaobject&gt;
&lt;imageobject>
&lt;imagedata fileref="lyx_screenshot.eps" format="eps">
&lt;/imageobject>
&lt;imageobject&gt;
&lt;imagedata fileref="lyx_screenshot.jpg" format="jpg"&gt;
&lt;/imageobject&gt;
&lt;textobject&gt;
&lt;phrase&gt;Screen shot of the LyX document processing program&lt;/phrase&gt;
&lt;/textobject&gt;
&lt;/mediaobject&gt;
&lt;/figure&gt;
</PROGRAMLISTING>
<PARA>
This is a better way than using &lt;graphic&gt; for two reasons.  First,
&lt;graphic> will be removed in DocBook 5.0 in favor of the &lt;mediaobject&gt;
tag.  So you may as well get started with the right way now.  Second,
&lt;mediaobject&gt; allows for different kinds of media based on what the output is.
In this example, the first &lt;imageobject&gt; is an encapsulated PostScript
(eps) file for use with formats derived from TeX such as DVI, PS, and PDF.  
The second &lt;imageobject> is a JPEG image for visual display, mostly for
HTML output. The &lt;textobject&gt; is presented if the output doesn't support
graphics (TXT).  Think of it as an &lt;alt&gt; tag.
</PARA></SECT2>
<SECT2><TITLE>Naming separate HTML files</TITLE>
<PARA>
By default, when separate HTML files are made, the SGML processor will assign
arbitrary names to the resulting files.  This can be confusing to readers
who may bookmark a page only to have it change, or so you know what files
are what.  Whatever your reasoning, here's how to make separate files named
the way you want:
</PARA>
<PARA>
In your first &lt;article&gt; tag (which should be the only one) include an id
parameter and call it index.  This will make your tag look like this:
</PARA>
<PROGRAMLISTING FORMAT="LINESPECIFIC">
&lt;article id="index"&gt;
</PROGRAMLISTING>
<PARA>
On the first &lt;sect1&gt; tag, do not modify it, as it's usually an
introduction and you want that on the first page.  For each other &lt;sect&gt; tag, include the id parameter and name it.  Names should include only
alpha-numeric characters, and it should be short enough to understand what it
is.
</PARA>
<PROGRAMLISTING FORMAT="LINESPECIFIC">
&lt;sect1 id="tips"&gt;
</PROGRAMLISTING></SECT2>
<SECT2><TITLE>Using ldp.dsl</TITLE>
<PARA>
The LDP uses its own DSSSL file, which adds things like a white background and
automatic generation of the table of contents you see at the beginning of 
HOWTOs.  You can find the latest copy of the file at
<ULINK URL="http://metalab.unc.edu/gferg/ldp/ldp.dsl">http://metalab.unc.edu/gferg/ldp/ldp.dsl</ULINK>.
</PARA>
<PARA>
Once you have the file, you may need to do some editing of the first few lines
based on the location of your DocBook DSSSL files.  My example uses the Cygnus
toolset.
</PARA>
<PARA>
Place the <FILENAME MOREINFO="NONE">ldp.dsl</FILENAME> file in
<FILENAME CLASS="DIRECTORY" MOREINFO="NONE">/usr/lib/sgml/stylesheets</FILENAME>
and bring it up under your favorite text editor.
You should see something like this:
</PARA>
<INFORMALEXAMPLE><SCREEN FORMAT="LINESPECIFIC">
&lt;!DOCTYPE style-sheet PUBLIC "-//James Clark//DTD DSSSL Style Sheet//EN" [
&lt;!ENTITY % html "IGNORE">
&lt;![%html;[
&lt;!ENTITY % print "IGNORE">
&lt;!ENTITY docbook.dsl SYSTEM "docbook.dsl<CO ID="HTML">" CDATA dsssl&gt;
]]&gt;
&lt;!ENTITY % print "INCLUDE">
&lt;![%print;[
&lt;!ENTITY docbook.dsl SYSTEM "docbook.dsl<CO ID="PRINT">" CDATA dsssl>
]]&gt;
]>
</SCREEN>
<CALLOUTLIST><CALLOUT AREAREFS="HTML"><PARA>
Change the first "docbook.dsl" to read <FILENAME MOREINFO="NONE">/usr/lib/sgml/stylesheets/nwalsh-modular/html/docbook.dsl</FILENAME>
</PARA></CALLOUT>
<CALLOUT AREAREFS="PRINT"><PARA>
Change the second "docbook.dsl" to read <FILENAME MOREINFO="NONE">/usr/lib/sgml/stylesheets/nwalsh-modular/print/docbook.dsl</FILENAME>
</PARA></CALLOUT></CALLOUTLIST></INFORMALEXAMPLE>
<PARA>
If you're using another DSSSL, point those two files to the location of the
HTML and print DSSSL files.  They're usually in directories called html and print.
</PARA>
<PARA>
With that complete, you can now generate HTML files:
</PARA>
<PROGRAMLISTING FORMAT="LINESPECIFIC">
bash$ mkdir HOWTO-HOWTO ; cd HOWTO-HOWTO
bash$ jade -t sgml -ihtml -d /usr/lib/sgml/stylesheets/ldp.dsl\#html ../HOWTO-HOWTO.sgml
</PROGRAMLISTING>
<PARA>
The first command creates a new directory to put your files into.  The second command (the jade one) generates individual HTML files for each section of your
document.  If you are going to something like RTF, you can do this:
</PARA>
<PROGRAMLISTING FORMAT="LINESPECIFIC">
bash$ jade -t rtf -d /usr/lib/sgml/stylesheets/ldp.dsl ../HOWTO-HOWTO.sgml
</PROGRAMLISTING>
</SECT2></SECT1>
<SECT1 ID="CVS"><TITLE>
  CVS
 </TITLE>
<PARA>
  The LDP is in the process of providing CVS access to authors. There are a few good reasons for this:
 </PARA>
<ORDEREDLIST CONTINUATION="RESTARTS" INHERITNUM="IGNORE"><LISTITEM><PARA>
  CVS will keep an off-site backup of your documents. In the event that you hand over a document to another author, they can just retrieve the document from CVS and continue on. In the event you need to go back to a previous version of a document, you can retrieve it as well.
  </PARA></LISTITEM>
<LISTITEM><PARA>
  It's great if you have many people working on the same document. You can have CVS tell you what changes were made while you were editing your copy by another author, and integrate those changes in.
  </PARA></LISTITEM>
<LISTITEM><PARA>
  Keeps a log of what changes were made. These logs (and a date stamp) can be placed automatically inside the document when you use some special tags that get processed before the SGML processor.
  </PARA></LISTITEM>
<LISTITEM><PARA>
  Can provide for a way for a program to automatically update the LDP web site with new documentation as it's written and submitted. This is not in place yet, but is a potential goal. Currently, CVS updates signal the HOWTO coordinator to update the LDP web page, meaning that if you use CVS, you're not required to e-mail your SGML code.
  </PARA></LISTITEM></ORDEREDLIST>
<PARA>
  If you're completely new to CVS, there are a few web pages you may want to look at which can help you out:
 </PARA>
<ITEMIZEDLIST><LISTITEM><PARA>
  <ULINK URL="http://www.sourcegear.com/CVS/Docs/blandy">http://www.sourcegear.com/CVS/Docs/blandy</ULINK>
  </PARA></LISTITEM>
<LISTITEM><PARA>
  <ULINK URL="https://wroclaw.art.pl/~ser/docs/cvs.html">https://wroclaw.art.pl/~ser/docs/cvs.html</ULINK>
  </PARA></LISTITEM></ITEMIZEDLIST>
<SECT2><TITLE>
   Getting a CVS account
  </TITLE>
<PARA>
   First you'll need to get an account at the LDP's CVS Repository. This is pretty much the root directory that is used by CVS, with various projects (HOWTOs, mini HOWTOs, etc.) created as subdirectories of that.
  </PARA>
<PARA>
   You will need to create a hashed password and userid for your account. The hashed password allows you to send an encrypted password to the CVS group without them needing to know your password. You can do this with the following command, from bash (or sh): 
  </PARA>
<PROGRAMLISTING FORMAT="LINESPECIFIC">
bash$ echo your_password | perl -e "print crypt(&lt;&gt;,\
join '',('.', '/', 0..9, 'A'..'Z', 'a'..'z')[rand 64, rand 64]),\"\n\"" 
</PROGRAMLISTING>
<PARA>
   Take the output of this command, and send it with your proposed userid to <EMAIL>cvsadmin@cvslist.linuxdoc.org</EMAIL>. Your unique CVSROOT directory will be created and you'll get an e-mail with a response. When you get your response, log into your CVSROOT and make sure everything is set up properly: 
  </PARA>
<PROGRAMLISTING FORMAT="LINESPECIFIC">
bash$ export CVSROOT=:pserver:<EMPHASIS>your_userid</EMPHASIS>@cvs.linuxdoc.org:/cvsroot
bash$ cvs -d $CVSROOT login 
  </PROGRAMLISTING>
<PARA>
   (Replace the <EMPHASIS>your_userid</EMPHASIS> with what you were sent in the response e-mail). 
  </PARA>
<PARA>
   You will be asked for your password, and then given access to the CVS Repository in read-write mode. Once you've used <COMMAND>cvs login</COMMAND> once and have been given access to the system, your password is stored in <FILENAME>.cvsroot</FILENAME> and you will not have to use <COMMAND>cvs login</COMMAND> again. Just set the CVSROOT and continue on. You can get the entire linuxdoc repository with this command:
  </PARA>
<PROGRAMLISTING FORMAT="LINESPECIFIC">
bash$ cvs get LDP
  </PROGRAMLISTING>
<PARA>
   Or you can get the SGML source for your own document with these commands:
  </PARA>
<PROGRAMLISTING FORMAT="LINESPECIFIC">
bash$ cvs get howto/YOUR-HOWTO.sgml
bash$ cvs get minihowto/YOURDOC.sgml
  </PROGRAMLISTING></SECT2>
<SECT2><TITLE>
   Other CVS repository notes
  </TITLE>
<SECT3><TITLE>
    Anonymous CVS access
   </TITLE>
<PARA>
    Anonymous CVS access is available for those who do not require an account (such as those wishing to publish LDP documents). This repository is read-only:
   </PARA>
<PROGRAMLISTING FORMAT="LINESPECIFIC">
bash$ cvs -d :pserver:cvs@anoncvs.linuxdoc.org:/cvsroot login 
   </PROGRAMLISTING>
<PARA>
    As a password, use cvs. You can then get linuxdoc modules as above. Note that changes to the anoncvs site may be a half an hour behind the main site. 
   </PARA></SECT3>
<SECT3><TITLE>
    CVS Files via web
   </TITLE>
<PARA>
    You can access the CVS repository via the web at <ULINK URL="http://cvsweb.linuxdoc.org/index.cgi/linuxdoc">http://cvsweb.linuxdoc.org/index.cgi/linuxdoc</ULINK>.
   </PARA></SECT3>
<SECT3><TITLE>
    Graphical access to CVS
   </TITLE>
<PARA>
    There are graphical interfaces to CVS, and you can get a list of them at <ULINK URL="http://freshmeat.net/appindex">http://freshmeat.net/appindex</ULINK>. Search for CVS. 
   </PARA></SECT3></SECT2>
<SECT2><TITLE>
   Updating files and CVS
  </TITLE>
<PARA>
   CVS has a special tag, <EMPHASIS>$Id</EMPHASIS>, that you can use to automatically insert the date and version directly into the document. After committing, CVS will turn this tag into <EMPHASIS>$Id$</EMPHASIS>. By including this tag in your document, you can have that automatically change each time you change the file, allowing the revision mark to increment each time. 
  </PARA>
<PARA>
   When you're ready to upload changes to the CVS server, use the command <COMMAND MOREINFO="NONE">cvs ci -m &quot;comment&quot; YOUR-HOWTO.sgml</COMMAND>. The -m &quot;comment&quot; isn't necessary, but if you don't include it, you'll be brought into the editor (usually vi, or whatever your <ENVAR>EDITOR</ENVAR> environment variable is) and be given the chance to add a comment about the changes. 
  </PARA>
<PARA>
   You can follow more of the CVS discussion on the ldp-discuss list. For the time being, LDP submissions should still be sent to <EMAIL>ldp-submit@lists.linuxdoc.org</EMAIL>. 
  </PARA></SECT2></SECT1>
<SECT1 ID="DISTRIBUTION"><TITLE>
  Distributing your documentation
 </TITLE>
<SECT2><TITLE>
   Before you distribute
  </TITLE>
<PARA>
   Before you distribute your code to millions of potential readers there are a few things you should do. 
  </PARA>
<PARA>
   First, be sure to spell-check your document. Most utilities that you would use to write SGML have plug-ins to perform a spell check. If not, there's always the aspell program.
  </PARA>
<PARA>
   Second, get someone to review your documentation for comments and factual correctness. The documentation that is published by the LDP needs to be as factually correct as possible, as there are millions of Linux users that may be reading it. If you're part of a larger mailing list talking about the subject, ask others from the list to help you out. 
  </PARA>
<PARA>
   Third, create a web site where you can distribute your documentation. This isn't required, but is helpful for people to find the original location of your document. 
  </PARA>
<SECT3><TITLE>
    Validate your SGML code
   </TITLE>
<PARA>
    Using jade, or really the nsgmls command, you can validate your .sgml code against the DTD to make sure there aren't any errors.
   </PARA>
<PROGRAMLISTING FORMAT="LINESPECIFIC">
bash$ nsgmls -s HOWTO-HOWTO.sgml
   </PROGRAMLISTING>
<PARA>
    If there are no issues, you'll just get your command prompt back.
   </PARA></SECT3></SECT2>
<SECT2><TITLE>
   Copyright and Licensing issues
  </TITLE>
<PARA>
   In order for an LDP document to be accepted by the LDP, it must be licensed
to conform to the "LICENSE REQUREMENTS" section of the LDP Manifesto located
at <ULINK URL="http://www.linuxdoc.org/manifesto.html">http://www.linuxdoc.org/manifesto.html</ULINK>.
As an author, you may retain the copyright and add other restrictions (for
example, you must approve any translations or derivative works). A sample
license is available in the manifesto or at <ULINK URL="http://www.linuxdoc.org/COPYRIGHT.html">http://www.linuxdoc.org/COPYRIGHT.html</ULINK>.
If you choose to use the boilerplate copyright, simply copy it into your
source code under a section called &quot;Copyright and Licenses&quot; or
similar. Also include a copyright statement of your own (since you still own
it). If you are a new maintainer for an already-existing HOWTO, you must
include the previous copyright statements of the previous author(s) and the
dates they maintained that document. 
  </PARA>
<PARA>
You'll note that the licensing for the HOWTO-HOWTO requires notification to the
author of any derivitive works or translations.  I also explicitly place
any source code (aside from the SGML the HOWTO was written in) under the GPL.
If your HOWTO includes bits of source code that you want others to use, you
may do the same.
</PARA></SECT2>
<SECT2><TITLE>
   Submission to LDP
  </TITLE>
<PARA>
   Once your LDP document has been crefully reviewed, you can release your
document to the LDP. Send an e-mail with the SGML source code as an attachment
(you may gzip it if you like) to <EMAIL>ldp-submit@lists.linuxdoc.org</EMAIL>.
  </PARA>
<PARA>
   Be sure to include the name of your HOWTO in the subject line, and use the body to outline changes you've made and attach your HOWTO. This allows the maintainers to do their jobs faster, so you don't have to wait for your HOWTO to be updated on the LDP web site. If you don't hear anything in 7 calendar days, please follow up with an e-mail to make sure things are still in process. 
  </PARA>
<PARA>
If your HOWTO contains extras, such as graphics or a special catalog, create a
.tar.gz file with all the files in it including the .sgml source code and mail
it as an attachment to the ldp-submit list.
</PARA></SECT2>
<SECT2><TITLE>
HOWTO maintenance
</TITLE>
<PARA>
Now that you're a HOWTO author, you should maintain the document and update
it when new versions of software are released.  You should also respond
to reasonable comments and questions from your readers.  You don't have
to help them all, especially if their question is already answered in
your HOWTO.  However, a good experience with the LDP from readers is
one of our goals and a great way of increasing the popularity of Linux
</PARA></SECT2></SECT1>
<SECT1 ID="FAQ"><TITLE>
  FAQs about the LDP
 </TITLE>
<SECT2><TITLE>
   I want to help the LDP. How can I do this?
  </TITLE>
<PARA>
   The easiest way is to find something and document it. Also check the unmaintained HOWTOs and see if there is a subject there that you know about and can continue documenting. 
  </PARA></SECT2>
<SECT2><TITLE>
   I want to publish a collection of LDP documents in a book. How is the LDP content licensed?
  </TITLE>
<PARA>
   Please see <ULINK URL="http://www.linuxdoc.org/COPYRIGHT.html">http://www.linuxdoc.org/COPYRIGHT.html</ULINK>. Note that this is only a guideline to authors. However, the licensing cannot be more restrictive than what is listed in that URL.
  </PARA></SECT2>
<SECT2><TITLE>
   I found an error in an LDP document. Can I fix it?
  </TITLE>
<PARA>
   Contact the author of the document, or the LDP coordinator at <EMAIL>ldp-discuss@lists.linuxdoc.org</EMAIL>and mention the problem and how you think it needs to be fixed.
  </PARA></SECT2>
<SECT2><TITLE>But I don't know SGML/Can't get the tools working/Don't like SGML</TITLE>
<PARA>
  That's okay.  You have the option of writing your first draft of the HOWTO in
the format of your choice, then submit that to the LDP.  An LDP volunteer will
review the document, then convert it into DocBook for you.  Once that's done,
it will be easier for you to maintain the HOWTO.  If you run into questions,
you can always drop a line to the LDP volunteer or the LDP Docbook list at
<EMAIL>ldp-docbook@lists.linuxdoc.org</EMAIL>.
  </PARA></SECT2></SECT1></ARTICLE>

