<!DOCTYPE article PUBLIC "-//OASIS//DTD DocBook V3.1//EN">

<article>
 <artheader>
  <title>Serial Laplink Mini-Howto</title>

 <pubdate>v1.0, 22 Aug 2000</pubdate>
 <date>
  August 2000 
 </date>
 <author>
  <firstname>Willem J.</firstname><surname>Atsma</surname>
 </author>
 <abstract>
 <para>
  How to create a serial connection between two computers? This document details how to setup a &ldquo;laplink&rdquo; connection between two computers. Having had a bit of trouble getting the information to get this to work myself, this document should make it easy for you.
 </para>
 </abstract>
 </artheader>

 <sect1>
  <title>
  Introduction
 </title>
 <para>
  This very brief document describes how to set up a serial &ldquo;laplink&rdquo; connection between two Linux machines or a Linux and a Windows machine. The serial link consists of a &ldquo;null-modem&rdquo; cable and a communication protocol: PPP. I use such a setup to send files to and from my laptop; it can also quite nicely be used to install new software from a cd-rom when a laptop doesn't have one. I had more trouble than I should have had when setting up my serial laplink. Hopefully this document will solve your problems in one go (the ones to do with the serial cable anyways).
 </para>
 <para>
  Both server and client side of the setup I will describe could be either a Linux machine or a different operating system, as long as it supports the PPP protocol on a null-modem. The MS Windows implementation, as it turns out, is slightly different from standard, requiring some special attention. This document has two main sections. The first describes how to setup the server side. This is the main station with a serial port dedicated to a PPP connection. Alternatively the connection can be started when needed from the command line. The second part describes the configuration of the client that connects to the server to retrieve or upload files.
 </para>
 <para>
  This documentation was prepared for pppd version 2.3.11, on a version 2.2.16 kernel.
 </para>
 <para>
  Please let me know if you are having any particular difficulties and suggestions for improvements on this document; my email address is listed at the bottom.
 </para>
  <sect2>
   <title>
   Distribution policy
  </title>
  <para>
   Copyright 2000 Willem J. Atsma
  </para>
  <para>
   This HOWTO is free documentation; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation; either version 2 of the License, or (at your option) any later version. 
  </para>
  <para>
   This document is distributed in the hope that it will be useful, but without any warranty; without even the implied warranty of merchantability or fitness for a particular purpose. See the GNU General Public License for more details.
  </para>
  <para>
   You can obtain a copy of the GNU General Public License by writing to the Free Software Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA. 
  </para>
  </sect2>
 </sect1>
 <sect1>
  <title>
  On the server side
 </title>
  <sect2>
   <title>
   Configure pppd
  </title>
  <para>
   The communication will be through a serial port. On the server we will connect through the &ldquo;/dev/ttyS1&rdquo; (COM2 in DOS/Windows) device. On your computer this may be different and you should modify the examples below accordingly. I force authentication because I use the configuration to provide a way to access files on a file server for a group of people. After logon they can use the Samba file shares to copy files to and from a laptop. If you are not concerned with security you can comment out the relevant options.
  </para>
  <para>
   PPP (Point-to-Point Protocol) communication provides TCP/IP across a serial link. In other words: when you want to do internet-based browsing through a modem, you are likely to be using it. In Linux PPP is implemented by the PPP daemon &ldquo;pppd&rdquo;. Its configuration is done through files in the &ldquo;/etc/ppp/&rdquo; directory. We will be using the following files:
  </para>
  <variablelist>
   <varlistentry>
   <term>
   /etc/ppp/options
</term><listitem><para>contains all general options for PPP connections
   </para>
  </listitem>
  </varlistentry>
   <varlistentry>
   <term>
   /etc/ppp/options.ttyS1
</term><listitem><para>contains PPP options specific to connections through &ldquo;/dev/ttyS1&rdquo;
   </para>
  </listitem>
  </varlistentry>
   <varlistentry>
   <term>
   /etc/ppp/pap-secrets
</term><listitem><para>contains authentication information
   </para>
  </listitem>
  </varlistentry>
   <varlistentry>
   <term>
   /etc/inittab
</term><listitem><para>starts initial system services
   </para>
  </listitem>
  </varlistentry>
  </variablelist>
  <para>
   The &ldquo;/etc/ppp/options&rdquo; file should look more or less like this:

  </para>
  <programlisting>
#/etc/ppp/options
lock
#auth forces authorization from peer
#login makes authentication use the system password file
#NOTE: my pap-secrets allows anyone access, so if this is not specified
#      anyone could connect! If this is a machine on which you dial out
#      as well, then comment auth and login out and move them to
#      /etc/options.ttySn
auth
login	
  </programlisting>
  <para>
   The lines starting with a '#' are comments. The &ldquo;lock&rdquo; parameter indicates that a lock file will be created to ensure exclusive access to the serial device, the &ldquo;auth&rdquo; parameter indicates that the client will need to authenticate itself, and &ldquo;login&rdquo; tells pppd to use the system user names and passwords for authentication. 
  </para>
  <para>
   Note that pppd will still check the &ldquo;/etc/ppp/pap-secrets&rdquo; file for user name and password information. A special, single line entry makes that pppd will only use the system's user information. The &ldquo;/etc/ppp/pap-secrets&rdquo; file looks as follows:

  </para>
  <programlisting>
#/etc/ppp/pap-secrets
# Secrets for authentication using PAP
# client             server            secret             IP addresses
*                        *                      &ldquo;&rdquo;                     *	
  </programlisting>
  <para>
   This is the most unsafe setting you can have in this file: it allows any client (user) connect to the server, without using a password and using any IP address. The &ldquo;login&rdquo; parameter in the &ldquo;/etc/ppp/options&rdquo; file, however, makes that the user name and password supplied by the client for authorization have to match the &ldquo;/etc/ppp/pap-secrets&rdquo; file <emphasis>as well as</emphasis> the system user name and password, so the connection will only succeed after typing in a valid user name and password.
  </para>
  <para>
   Options specific to the serial line you are connecting with are placed in &ldquo;/etc/ppp/options.ttySn&rdquo;, where n is the number of the serial device. My server uses &ldquo;/dev/ttyS1&rdquo;, so the options go into... &ldquo;/etc/ppp/options.ttyS1&rdquo;.

  </para>
  <programlisting>
#/etc/ppp/options.ttyS1
asyncmap 0
crtscts
#local indicates that modem lines are not used
local
#silent causes pppd to wait until a connection is made from the other side
silent
#auth forces authorization from peer
#login makes authentication use the system password file
#NOTE: my pap-secrets allows anyone access, so if this is not specified
#      anyone could connect! If this is a server that will never use ppp
#      for dialing out, you should move auth and login to /etc/ppp/options
#auth
#login
#use PAP, not CHAP for authentication
+pap
-chap
115200
#these are entries that exist in the /etc/hosts file
ppp_laplink_host:serial_laplink_client	
  </programlisting>
  <para>
   All these options are well described in the pppd man page; a few of the key ones are explained with comments in the file. The &ldquo;crtscts&rdquo; parameter tells pppd to use hardware flow control. This is recommended because it is the fastest. Alternatively you could specify &ldquo;xonxoff&rdquo; to use software-based flow control - you would specify this if your null modem cable doesn't connect the RTS/CTS lines (unlikely if you bought your cable in the store). &ldquo;115200&rdquo; specifies the data transmission rate - if you have trouble connecting you might want to try with a lower speed. Note that &ldquo;auth&rdquo; and &ldquo;login&rdquo; options are commented out here, because they were specified in the general options file. If you also use your computer to dial into an ISP, you will want to specify them here rather than in &ldquo;/etc/ppp/options&rdquo;, or you will be asking your ISP to authorize itself when you dial in and that probably won't succeed. The reason why they are not specified in this file by default is because if you have other incoming PPP connections now or in the future, you want to make sure they are always authenticated. Remember that the &ldquo;pap-secrets&rdquo; as presented here gives zero protection. 
  </para>
  <para>
   Finally, the &ldquo;ppp_laplink_host:serial_laplink_client&rdquo; entry specifies the local and remote IP address after the link is up. You can use actual IP numbers here (e.g. 192.168.0.1:192.168.1.1), or entries from the &ldquo;/etc/hosts&rdquo; file, like I have done. The nice thing of doing the latter is that you can use the names to refer to these links later. I also recommend you use IP numbers like the ones I used (192.168.0.1:192.168.1.1). These addresses are set aside for local networks and don't exist on the internet, so you are avoiding possible conflicts. After the link is up, the client can refer to the server with the IP address of ppp_laplink_host (192.168.0.1) and the server refers to the client with serial_laplink_client (192.168.1.1).
  </para>
  <para>
   You could use different entries in &ldquo;/etc/ppp/pap-secrets&rdquo; to only allow select users access. I am using the PAP protocol for authentication; you could use CHAP if you'd like - the setup is much the same, using the &ldquo;chap-secrets&rdquo; file. For these and other options you can consult the man pages and the documentation mentioned at the bottom.
  </para>
  </sect2>
  <sect2>
   <title>
   A getty-like installation of pppd
  </title>
  <para>
   You can have the PPP daemon (pppd) start when you boot the system and have it monitor the serial line of your choice. An elegant way of achieving this is to edit the &ldquo;/etc/inittab&rdquo; file. This file contains information for initializing the system. Add the following to this file:

  </para>
  <programlisting>
# Start pppd for the serial laplink.
pd:345:respawn:/usr/sbin/pppd /dev/ttyS1 -detach	
  </programlisting>
  <para>
   This reads as follows: for run-levels 3, 4 and 5 start &ldquo;/usr/sbin/pppd /dev/ttyS1 -detach&rdquo; and if it dies (at the end of a connection) respawn (start a new one). The -detach option makes that pppd stays connected to the terminal that started it, rather than forking and exiting. This option is necessary because the &ldquo;init&rdquo; process would respawn a new one immediately otherwise. Other entries in the inittab file specify getty processes to run on serial terminals (tty's); their initialization looks a lot like this one.
  </para>
  <para>
   To activate this new configuration type:

  </para>
  <programlisting>
[root@griis /root]# /sbin/init q
  </programlisting>
  </sect2>
  <sect2>
   <title>
   Start the server when needed
  </title>
  <para>
   If it is only occasionally that you want to connect to your server, you might prefer to start the connection manually. All the settings remain the same; you can start the server by simply typing:

  </para>
  <programlisting>
/usr/sbin/pppd /dev/ttyS1 -detach	
  </programlisting>
  <para>
   at the command line. The &ldquo;-detach&rdquo; option is not really necessary, but it makes it easy to kill the connection by pressing &ldquo;ctrl-c&rdquo;.
  </para>
  </sect2>
  <sect2>
   <title>
   Serving MS Windows clients
  </title>
  <para>
   Unfortunately the MS Windows implementation is not quite standard. Before initiating the PPP connection it requires the exchange of the text strings &ldquo;CLIENT&rdquo; (from the client) and &ldquo;CLIENTSERVER&rdquo; (from the server). To accomodate a Windows client the following line has to be added to the &ldquo;/etc/ppp/options.ttyS1&rdquo; file: 

  </para>
  <programlisting>
connect 'chat -v -f /etc/ppp/scripts/winclient.chat'	
  </programlisting>
  <para>
   Then create the scripts directory and the chat file &ldquo;/etc/ppp/scripts/winclient.chat&rdquo;:

  </para>
  <programlisting>
TIMEOUT 3600
CLIENT CLIENTSERVER\c	
  </programlisting>
  <para>
   The connect option allows you to specify a program to deal with the string exchange before the connection. Usually the &ldquo;chat&rdquo; program is used for this; check the manual for more details. The given script deals with the Windows connection issue. You don't need it when connecting a Linux box. 
  </para>
  </sect2>
 </sect1>
 <sect1>
  <title>
  On the client side
 </title>
 <para>
  After having configured the server, the client is easy. The &ldquo;/etc/ppp/options&rdquo; file has a single entry:

 </para>
 <programlisting>
#/etc/ppp/options
lock	
 </programlisting>
 <para>
  The serial port on my client is &ldquo;/dev/ttyS0&rdquo; (COM1), so I also have to create a &ldquo;/etc/ppp/options.ttyS0&rdquo; file:

 </para>
 <programlisting>
#/etc/ppp/options.ttyS0
115200
crtscts
local
name zaphod
noauth	
 </programlisting>
 <para>
  Only a few new options in this file. Note that the speed on server and client has to be the same (here it is 115200). With &ldquo;name zaphod&rdquo; the client name is specified. This name has to correspond to an entry in the &ldquo;/etc/ppp/pap-secrets&rdquo; file of the client and has to be a valid user name on the server. The &ldquo;noauth&rdquo; option specifies that the peer (server) does not have to authenticate itself to the client.
 </para>
 <para>
  The last bit: setting the client name (user name) and its secret (password) in the &ldquo;/etc/ppp/pap-secrets&rdquo; file:

 </para>
 <programlisting>
#/etc/ppp/pap-secrets
# Secrets for authentication using PAP
# client             server            secret             IP addresses
zaphod             *                     gargleBlaster	
 </programlisting>
 <para>
  So user &ldquo;zaphod&rdquo; uses a password &ldquo;gargleBlaster&rdquo;, which should get him into the system. Note that these files contain sensitive information, make sure you set the permissions on them correctly.
 </para>
  <sect2>
   <title>
   Start the client
  </title>
  <para>
   On the command line, type:

  </para>
  <programlisting>
/usr/sbin/pppd /dev/ttyS0 -detach
  </programlisting>
  </sect2>
  <sect2>
   <title>
   Connecting to an MS Windows server
  </title>
  <para>
   What if you want to make a connection to a Windows server? Again we'll need the &ldquo;connect&rdquo; option and a chat script. Add the following line to your &ldquo;/etc/ppp/options.ttyS0&rdquo; file:

  </para>
  <programlisting>
connect chat -v -f /etc/ppp/scripts/winserver.chat	
  </programlisting>
  <para>
   Also create the chat script &ldquo;/etc/ppp/script/winserver.chat&rdquo;:

  </para>
  <programlisting>
TIMEOUT 10
'' CLIENT\c	
  </programlisting>
  <para>
   This makes the client send the &ldquo;CLIENT&rdquo; string before trying to start the PPP connection.
  </para>
  </sect2>
  <sect2>
   <title>
   Oddly enough
  </title>
  <para>
   Oddly enough I created a Linux server that has connect to both Linux and Windows computers, so I found myself with the odd situation of having to setup both Linux systems such that they would connect to Windows servers and clients!
  </para>
  </sect2>
 </sect1>
 <sect1>
  <title>
  Connecting...
 </title>
 <para>
  The moment of truth: connect the computers with the null modem cable, first start the server side (if you are using the &ldquo;/etc/inittab&rdquo; approach it should be up already), then start the client side. You should see something like this on the server:

 </para>
 <programlisting>
[root@griis /root]# pppd /dev/ttyS1 -detach
Using interface ppp0
Connect: ppp0 <--> /dev/ttyS1
user zaphod logged in
Deflate (15) compression enabled
local  IP address 192.168.0.1
remote IP address 192.168.1.1	
 </programlisting>
 <para>
  Note that if you started pppd from the &ldquo;/etc/inittab&rdquo; file these messages will appear in &ldquo;/var/log/messages&rdquo;. On the client side you should see something like this:

 </para>
 <programlisting>
[root@wylg /root]# pppd /dev/ttyS0 -detach
Using interface ppp0
Connect: ppp0 <--> /dev/ttyS0
Remote message: Success
Deflate (15) compression enabled
local  IP address 192.168.1.1
remote IP address 192.168.0.1	
 </programlisting>
 <para>
  On either side you can ping the other computer to see if the connection is active:

 </para>
 <programlisting>
[zaphod@wylg zaphod]$ ping 192.168.0.1
PING 192.168.0.1 (192.168.0.1) from 192.168.1.1 : 56(84) bytes of data.
64 bytes from 192.168.0.1: icmp_seq=0 ttl=255 time=31.7 ms
64 bytes from 192.168.0.1: icmp_seq=1 ttl=255 time=20.3 ms
64 bytes from 192.168.0.1: icmp_seq=2 ttl=255 time=19.2 ms
64 bytes from 192.168.0.1: icmp_seq=3 ttl=255 time=20.3 ms
 
--- 192.168.0.1 ping statistics ---
4 packets transmitted, 4 packets received, 0% packet loss
round-trip min/avg/max = 19.2/22.8/31.7 ms	
 </programlisting>
 <para>
  You can now access the server through any TCP/IP services it might have available, such as FTP, HTTP, TELNET and SAMBA.
 </para>
 </sect1>
 <sect1>
  <title>
  Internet through the serial port
 </title>
 <para>
  Suppose you have a laptop and you want to access the internet occasionally. Also suppose you have a machine that has an ethernet connection and a serial port. You can set the laptop up as a client, the other machine as a server, and use <emphasis>IP masquerading</emphasis> to connect to the internet through the null modem cable. Check the IP-Masquerading-Howto for help on how to do this.
 </para>
 </sect1>
 <sect1>
  <title>
  Other useful documents
 </title>
 <para>
   
 </para>
 <para>
  The pppd and chat manual pages
 </para>
 <para>
  PPP-HOWTO
 </para>
 <para>
  Modem-HOWTO
 </para>
 <para>
  Serial-HOWTO
 </para>
 <para>
  IP-Masquerade-HOWTO
 
 </para>
 <para>
  author: W.J. Atsma 
 </para>
 <para>
  email: watsma@mech.ubc.ca 
 </para>
 <para>
  revision: 22aug2000s
 </para>
 </sect1>


</article>

