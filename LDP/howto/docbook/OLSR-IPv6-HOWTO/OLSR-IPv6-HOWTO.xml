<?xml version="1.0" encoding="UTF-8"?>

<!DOCTYPE article PUBLIC "-//OASIS//DTD DocBook XML V4.2//EN"
   "http://www.oasis-open.org/docbook/xml/4.2/docbookx.dtd">
 
<article>
  <articleinfo>

    <!-- Article Title -->
    <title>Linux Optimized Link State Routing Protocol (OLSR) IPv6
    HOWTO</title> 
    <titleabbrev>OLSR-IPv6</titleabbrev>

    <author>
       <firstname>Lars</firstname>
       <surname>Strand</surname>
       <affiliation>
          <!-- Valid email -->
          <address><email>lars (at) unik no</email></address>
       </affiliation>
     </author>
     <authorinitials>LKS</authorinitials>

     <!-- All dates specified in ISO "YYYY-MM-DD" format -->
     <pubdate>2004-03-08</pubdate>

     <!-- Most recent revision goes at the top; list in descending order -->
     <revhistory>
       <revision>
          <revnumber>0.5</revnumber>
          <date>2004-03-08</date>
          <authorinitials>LKS</authorinitials>
          <revremark>An almost complete rewrite. Adding OLSRd (old
          uOLSR), updated to RFC3626. Removed NROLSR and
          CRCOLSR. Converted to XML Docbook. Changed the license from
          <ulink url="http://www.gnu.org/copyleft/fdl.html"> GFDL
          </ulink> to <ulink
          url="http://www.opencontent.org/openpub/"> OPL </ulink> due
          to some GFDL <ulink 
          url="http://people.debian.org/~srivasta/Position_Statement.xhtml">
          problems.</ulink></revremark>
       </revision>
       <revision>
          <revnumber>0.3</revnumber>
          <date>2003-08-05</date>
          <authorinitials>LKS</authorinitials>
          <revremark>Initial release.</revremark>
       </revision>
     </revhistory>

     <!-- Provide a good abstract; a couple of sentences is sufficient -->
     <abstract>
        <para>
        This document describes the software and procedures to set up
        and use <ulink url="http://www.ietf.org/rfc/rfc3626">Optimized
        Link State Routing Protocol (OLSR)</ulink> with IPv6 for
        Linux. OLSR is used as a routing protocol for 
        Mobile Ad-Hoc Networks (<ulink
        url="http://www.ietf.org/rfc/rfc2501.txt">MANET</ulink>) (also
        called <quote>spontaneous network</quote>).
	</para>
     </abstract>

  </articleinfo>

<!-- ##################################################### -->

<sect1 id="intro">
  <title>Introduction</title>

  <para>
  This document describes the software and procedures to set up
  and use Optimized Link State Routing Protocol (OLSR) with IPv6
  for Linux. 
  </para>

<!-- ################## -->

  <sect2 id="WhyAdHoc">
  <title>Why Ad-Hoc network?</title>

    <para>
    An English translation of <emphasis>ad-hoc</emphasis> is <quote>For a
    particular purpose (improvised, made up in an instant)</quote>
    (source: <ulink
    url="http://en.wikipedia.org/wiki/List_of_Latin_phrases#A">Wikipedia</ulink>).
    Ad-hoc network, or <quote>spontaneous network</quote>, is
    especially useful when dealing with wireless devices in which some
    of the devices are part of the network only for the duration of a
    communications session and the need for a dynamic network topology
    is eminent. A <quote>Mobile Ad hoc Network</quote> is usually
    called a <emphasis>MANET</emphasis>.
    </para>
  </sect2>

<!-- ################## -->

  <sect2 id="WhatMANET">
  <title>What is a MANET?</title>
    <para><quote>
    A MANET consists of mobile platforms (e.g., a router with multiple
    hosts and wireless communications devices)--herein simply referred to
    as <quote>nodes</quote>--which are free to move about
    arbitrarily. The nodes may be located in or on airplanes, ships,
    trucks, cars, perhaps even on people or very small devices, and
    there may be multiple hosts per router. A MANET is an autonomous
    system of mobile nodes.  The system may operate in isolation, or
    may have gateways to and interface with a fixed network.</quote>
    --- <ulink url="http://www.ietf.org/rfc/rfc2501.txt">RFC2501:
    Mobile Ad hoc Networking (MANET), section 3 (page 3).</ulink>
    </para>
  </sect2>

<!-- ################## -->

  <sect2 id="WhatOLSR">
  <title>What is Optimized Link State Routing (OLSR)?</title>
    <para>
    <quote>OLSR is a proactive routing protocol for mobile ad hoc
    networks. The protocol inherits the stability of a link state
    algorithm and has the advantage of having routes immediately
    available when needed due to its proactive nature.  OLSR is an
    optimization over the classical link state protocol, tailored for
    mobile ad hoc networks.</quote>
    </para>

    <para>
    <quote>OLSR is designed to work in a completely distributed manner
    and does not depend on any central entity. The protocol does NOT
    REQUIRE reliable transmission of control messages: each node sends
    control messages periodically, and can therefore sustain a
    reasonable loss of some such messages.  Such losses occur
    frequently in radio networks due to collisions or other
    transmission problems.</quote> --- <ulink
    url="http://www.ietf.org/rfc/rfc3626.txt">RFC3626: OLSR, section
    1.3 (page 8)</ulink>
    </para>
  </sect2>

<!-- ################## -->

  <sect2 id="HowOLSR">
  <title>How does OLSR work?</title>
    <para>    
    <quote>The Optimized Link State Routing Protocol (OLSR) is
    developed for mobile ad hoc networks.  It operates as a table
    driven, proactive protocol, i.e., exchanges topology information
    with other nodes of the network regularly.  Each node selects a
    set of its neighbor nodes as <quote>multipoint relays</quote>
    (MPR).  In OLSR, only nodes, selected as such MPRs, are
    responsible for forwarding control traffic, intended for diffusion
    into the entire network.  MPRs provide an efficient mechanism for
    flooding control traffic by reducing the number of transmissions
    required.</quote> --- <ulink
    url="http://www.ietf.org/rfc/rfc3626.txt">RFC3626: OLSR, section
    1 (page 4)</ulink>
    </para>

  </sect2>

<!-- ################## -->

  <sect2 id="IBSS">
  <title>What about IBSS (IEEE ad-hoc mode)?</title>

    <para>The IEEE 802.11 standard defines two modes: </para>

      <mediaobject id="ieee">
       <imageobject>
         <imagedata fileref="images/802-11.png" format="PNG"
         width="550" align="center" scalefit="1"/> 
       </imageobject>
       <textobject>
         <phrase>801.11</phrase>
       </textobject>
       <caption>
         <para>IEEE 802.11 standard</para>
       </caption>
      </mediaobject>

      <orderedlist>
       <listitem>
       <para><emphasis>Infrastructure mode:</emphasis> The
       wireless network consist of at least one access point (AP)
       connected to the wired network and a set of wireless
       nodes (WN). This configuration is called a <emphasis>Basic Service Set
       (BSS)</emphasis>. Extended Service Set (ESS) is a set of two or
       more BSSs (multiple cells).</para>
       </listitem>
       
       <listitem>
       <para><emphasis>Ad hoc mode:</emphasis> Also called
       <quote>IEEE ad-hoc mode</quote> or <quote>peer-to-peer
       mode</quote>. This configuration is called
       <emphasis>Independent Basic Service Set
       (IBSS)</emphasis> and is useful for establishing a 
       network where wireless infrastructure does not exist or where
       services are not required.</para>
       </listitem>
      </orderedlist>

      <para>
      So why use OLSR when we can use <quote>IEEE ad-hoc
      mode</quote>? <emphasis>IEEE ad-hoc mode does NOT support
      multihop.</emphasis> See <link linkend="multihop">figure
      below</link>
      </para>
     

      <mediaobject id="multihop">
       <imageobject>
         <imagedata fileref="images/multihop.png" format="PNG"
         width="550" align="center" scalefit="1"/> 
       </imageobject>
       <textobject>
         <phrase>Multihop</phrase>
       </textobject>
       <caption>
         <para><quote>IEEE 8102.11 Ad hoc</quote> mode has
         <emphasis>no</emphasis> support for multihop, something OLSR
         have.</para>
       </caption>
      </mediaobject>

  </sect2>

</sect1>

<!-- ##################################################### -->
<sect1 id="IPv6">
<title>IPv6</title>

<para>IP version 6 (IPv6) is a new version of the Internet Protocol, 
designed as the successor to IP version 4 (IPv4) <ulink
url="http://www.ietf.org/rfc/rfc791.txt">[RFC-791]</ulink>. The
changes from IPv4 to IPv6 fall primarily into the following
categories: 
</para>

<itemizedlist>
  <listitem>
    <para>Expanded addressing capabilities </para>
  </listitem>
  <listitem>
    <para>Header format simplification</para>
  </listitem>
  <listitem>
    <para>Improved support for extensions and options</para>
  </listitem>
  <listitem>
    <para>Flow labeling capability</para>
  </listitem>
  <listitem>
    <para>Authentication and privacy capabilities</para>
  </listitem>
</itemizedlist>

<para>For more information on IPv6 in general, visit the <ulink
url="http://www.ietf.org/html.charters/ipv6-charter.html">IETF's IPv6 
Working Group</ulink>.
</para>

</sect1>

<!-- ####################################################### -->

<sect1 id="OLSRLinux">
 <title>OLSR for Linux</title>

 <para>
 There are several OLSR implementation for Linux, but not all of them
 support IPv6. You should know how to enable and use IPv6
 on Linux. Peter Bieringer has written an excellent <ulink
 url="http://ldp.linux.no/HOWTO/Linux+IPv6-HOWTO/">Linux IPv6
 HOWTO</ulink>.
 </para>
  
  <para>
  There is one OLSR implementation that is becoming the
 <quote>standard</quote> and most widely used. It goes by the
 descriptive name <quote>OLSRd</quote> (old Unik-OLSR).
 </para>

 <para>
 OLSRd is an implementation based on the INRA C code, but has been
 almost completely rewritten, so there is not much left of the original
 INRA code (that mean it almost GPL). OLSRd also has a very rapid
 development, and if you report in a bug, it is usually fixed in a
 matter of hours.
 </para>
 
 <para>
 OLSRd <ulink
 url="http://www.olsr.org/index.cgi?action=comp">fully comply</ulink> 
 to the OLSR RFC, and it has an optional GUI interface (to see what's
 going on). The implementation also has a informative
 <quote>up-to-date</quote> <ulink
 url="http://www.olsr.org">web-page</ulink> with mailing lists and papers.
 </para>

<!-- ################## -->
  <sect2 id="installing">
  <title>Installing OLSRd</title>
    <para>There are up-to multiple new releases of OLSRd each month, so
    check the OLSRd <ulink url="http://www.olsr.org">web-site</ulink>
    for the newest release.</para>

  <para>
  <orderedlist>

  <listitem>
    <para> The latest release as of this writing is 0.4.0, but by the
    time you read this there is almost certain a new release. Fetch the
    latest release from <ulink 
    url="http://www.olsr.org/index.cgi?action=download">
    http://www.olsr.org/index.cgi?action=download</ulink>.</para>
  </listitem>

  <listitem>
    <para>Unpack, compile and install the source code:</para>
    <programlisting>
      <prompt># </prompt><userinput><command>tar</command> jxvf uolsrd-x.y.z</userinput>
      <prompt># </prompt><userinput><command>cd</command> unik-olsrd-x.y.z</userinput>
      <prompt># </prompt><userinput><command>make</command></userinput>
      <prompt># </prompt><userinput><command>make install</command></userinput>
    </programlisting>
  </listitem>

  <listitem>
    <para>The <userinput>olsrd</userinput> gets installed to
    <userinput>/usr/bin/</userinput> and a default config file,
    <userinput>olsrd.conf</userinput> can be found under
    <userinput>/etc</userinput></para>
  </listitem>
 
  </orderedlist>
  </para>

  <para>Check out the <userinput>/etc/olsrd.conf</userinput> config
  file, and change values to fit your system. All values in this file
  can be overridden with command line options to
  <userinput>olsrd</userinput>. The main options to change are:</para>

  <para>
    <screen>
    # Debug level(0-9)
    # If set to 0 the daemon runs in the background
    DEBUG           1
    # IP version to use (4 or 6)
    IPVERSION       6
    # A list of whitespace separated interface names
    INTERFACES      eth1
    </screen>
  </para>

  <para>
  Later on, when you know OLSRd is configured correctly, you may set
  <quote>DEBUG</quote> to <userinput>0</userinput> to make it run in
  the background. You may then also add it to your init scripts. But
  to test that everything first, set this to at least
  <userinput>1</userinput> (setting this higher will produce a lot
  more info messages on APM, forwarding, parsing of the config file
  etc.)
  </para>

  </sect2>

<!-- ################## -->
  <sect2 id="using">
  <title>Using OLSRd</title>

<!-- ######### -->
  <sect3 id="onehost">
  <title>On one host</title>

    <para>When OLSRd is installed and configured, it can be started
    as root with:</para>

    <programlisting>
      <prompt># </prompt><userinput><command>olsrd</command></userinput>
    </programlisting>
    
    <para>All the settings in <userinput>/etc/olsrd.conf</userinput>
    can be overridden by command line options:</para>

     <programlisting>
      <prompt># </prompt><userinput><command>olsrd</command> -i eth1 -ipv6 -d 1</userinput>
    </programlisting>

    <para>Would start <userinput>olsrd</userinput> listening on
    interface <userinput>eth1</userinput> using IPv6 and with debug
    messages.</para>

    <para>We start olsrd:</para>

    <screen>
    <prompt># </prompt><userinput><command>olsrd</command> -i eth1 -d 1 -ipv6</userinput>

       *** UniK olsrd-0.4.0 ***   

    hello interval = 2.00       hello int nonwireless: = 4.00 <co id="tuning"/>
    tc interval = 5.00          polling interval = 0.10 
    neighbor_hold_time = 6.00   neighbor_hold_time_nw = 12.00 
    topology_hold_time = 15.00  tos setting = 16 
    hna_interval = 15.00         mid_interval = 5.00
    Willingness set to 3 - next update in 20.000000 secs
    Using IP version 6
    Using multicast address ff05::15

     ---- Interface configuration ---- 

     eth1:                                          <co id="interface"/>
	    Address: fec0:106:2700::10
	    Multicast: ff05::15
	    Interface eth1 set up for use with index 0


     Main address: fec0:106:2700::10                <co id="adr"/>

     NEIGHBORS: l=linkstate, m=MPR, w=willingness   

     Thread created - polling every 0.10 seconds    <co id="list"/>
     neighbor list: 11:43:17.214807
     neighbor list: 11:43:19.194967                
     neighbor list: 11:43:21.395046
     neighbor list: 11:43:23.604800
     neighbor list: 11:43:25.694875
     </screen>

    <calloutlist>

      <callout arearefs="tuning">
        <para>This shows all the settings OLSRd are using. You may
        override these by either specify it in the config file
        (<userinput>/etc/olsrd.conf</userinput>) or specify it at the
        command line. Read the <ulink
        url="http://www.ietf.org/rfc/rfc3626.txt">OLSR RFC</ulink> for a
        description on what all these settings means.</para>
      </callout>

      <callout arearefs="interface">
        <para>OLSRd found our interface. If you are using OLSRd with
        multiple interfaces, <quote>Multiple Interface
        Declaration</quote> (MID) messages will be generated.</para>
      </callout>

      <callout arearefs="adr">
        <para>If you are using OLSRd with multiple interfaces, it will
        pick one as the <quote>main</quote> address (the first
        interface specified).</para>
      </callout>

      <callout arearefs="list">
        <para>Since no other hosts are running OLSRd, this list is
        empty.</para> 
      </callout>

    </calloutlist>

    <para>Another thing worth noticing, is that an entry is added to
    our routing table:</para>

    <screen>
    <prompt>#</prompt> <userinput><command>route</command> -A inet6</userinput>
    Destination:   Next Hop   Flags  Metric  Ref  Use Iface
    ...
    ff05::15/128   ff05::15   UAC    0       1    1   eth1
    ...
    </screen>

    <para>This is the IPv6 multicast address OLSR is using to talk to
    other nodes running OLSR.</para>
  </sect3>

<!-- ######### -->
  <sect3 id="addhosts">
  <title>Adding other hosts</title>

  <para>There is no point in using OLSRd on only one node, so we add
  some nodes. You will then see the <quote>neighbor list</quote> gets
  updated:</para>

  <screen>
  neighbor list: 12:55:14.733586
  neighbor list: 12:55:18.803585
  Willingness for fec0:106:2700::11 changed from 0 to 3 - UPDATING  <co id="will"/>
  neighbor list: 12:55:22.763585
  fec0:106:2700::11:l=0:m=0:w=3[2hlist:]                            <co id="newhost"/>
  neighbor list: 12:55:26.833589
  fec0:106:2700::11:l=1:m=0:w=3[2hlist:]
  Willingness for fec0:106:2700::12 changed from 0 to 2 - UPDATING  <co id="thirdhost"/>
  neighbor list: 12:55:30.903585
  fec0:106:2700::12:l=0:m=0:w=2[2hlist:]
  fec0:106:2700::11:l=1:m=0:w=3[2hlist:]
  neighbor list: 12:55:34.863585
  fec0:106:2700::12:l=0:m=0:w=2[2hlist:]
  fec0:106:2700::11:l=1:m=0:w=3[2hlist:]
  neighbor list: 12:55:39.153586
  fec0:106:2700::12:l=1:m=0:w=2[2hlist:fec0:106:2700::11:]          <co id="triangle"/>
  fec0:106:2700::11:l=1:m=0:w=3[2hlist:fec0:106:2700::12:]          <co id="triangle2"/>
  neighbor list: 12:55:43.443605
  fec0:106:2700::12:l=1:m=0:w=2[2hlist:fec0:106:2700::11:]
  fec0:106:2700::11:l=1:m=0:w=3[2hlist:fec0:106:2700::12:]
  </screen>

  <calloutlist>

   <callout arearefs="will">
     <para>
     Another node detected (node B). This specifies the willingness of a node
     to carry and forward traffic for other nodes. Here the new node
     <userinput>fec0:106:2700::11</userinput> is willing to forward
     traffic. A host with low battery may not be willing to forward
     large amount of traffic, - so it will proclaim a lower
     willingness value.
     </para>
   </callout>

   <callout arearefs="newhost">
     <para>
     The node has been added to our routing table. We can not (yet)
     reach any other node by way of this node, since the 2-hop neighbor
     list (<userinput>[2hlist:]</userinput>) is empty. A 2-hop
     neighbor is a node heard by a neighbor.
     </para>
   </callout>

   <callout arearefs="thirdhost">
     <para>
     Here is a third node (node C) running OLSRd.
     </para>
   </callout>

   <callout arearefs="triangle">
     <para>
     After a short time, when all nodes has been updated and routes
     calculated, we may also reach any of the other nodes via the
     other. The 2-hop neighbor list
     (<userinput>[2hlist:]</userinput>) is populated: We can reach node
     <userinput> B</userinput> via <userinput>C</userinput>.
     </para>
   </callout>

   <callout arearefs="triangle2">
     <para>
     Here we can reach node <userinput>C</userinput> via 
     <userinput>B</userinput>.
     </para>
   </callout>

  </calloutlist>
  
  <para>You will also see the routing table is updated with the new
  hosts:</para>

  <screen>
    <prompt>#</prompt> <userinput><command>route</command> -A inet6</userinput>
    Destination:           Next Hop   Flags  Metric  Ref  Use Iface
    ...
    fec0:106:2700::11/128  ::         UH     1       0    0   eth1
    fec0:106:2700::12/128  ::         UH     1       0    0   eth1
    ...
  </screen>

  <para>
  The real beauty of OLSR is when you add a bunch of nodes and move
  them around. You can still reach each one of them either directly
  (if they are close), or through other nodes.
  </para>

  </sect3>

<!-- ######### -->
 <sect3 id="movement">
  <title>Movement</title>
  
  <para>
  When every node can reach every other node, it's no fun. Lets
  start moving the nodes, so that node <quote>A</quote> and 
  <quote>B</quote> is out of (radio) range of each other. So when 
  we move node <quote>A</quote> far enough away so that
  it can't hear node <quote>C</quote>, all traffic must go through
  node <quote>B</quote>: </para>

  <mediaobject id="moving">
    <imageobject>
      <imagedata fileref="images/movement.png" format="PNG"
       width="450" align="center" scalefit="1"/> 
    </imageobject>
    <textobject>
      <phrase>Movement</phrase>
    </textobject>
      <caption>
      <para>We move our three nodes so that node
       <userinput>A</userinput> and <userinput>C</userinput> must
       speak through node <userinput>B</userinput> to reach each
       other.
      </para>
     </caption>
  </mediaobject>

  <para></para>

  <para>
  Tip: Instead of physically moving the nodes around, you can use
  <userinput>ip6tables</userinput>. You can drop all packet using the
  MAC-address. You just need to block on one node: 
  </para>
  
  <screen>
   <prompt># </prompt><userinput><command>ip6tables</command> -A INPUT -m mac --mac-source XX:XX:XX:XX:XX:XX -j DROP</userinput>
  </screen>

  <para>
  The output from OLSRd on host A is then:
  </para>

  <screen>
  neighbor list: 13:22:35.693587
  fec0:106:2700::11:l=1:m=1:w=3[2hlist:fec0:106:2700::12:]  <co id="onlyone"/>
  neighbor list: 13:22:40.093588
  fec0:106:2700::11:l=1:m=1:w=3[2hlist:fec0:106:2700::12:]
  neighbor list: 13:22:44.053594
  fec0:106:2700::11:l=1:m=1:w=3[2hlist:fec0:106:2700::12:]
  neighbor list: 13:22:48.233594
  fec0:106:2700::11:l=1:m=1:w=3[2hlist:fec0:106:2700::12:]
  neighbor list: 13:22:52.193605
  fec0:106:2700::11:l=1:m=1:w=3[2hlist:fec0:106:2700::12:]
  </screen>

  <calloutlist>
   <callout arearefs="onlyone">
     <para>
     We can reach node <userinput>B</userinput> directly, and via node
     <userinput>B</userinput> we can reach node <userinput>C</userinput>.
     </para>
   </callout>

  </calloutlist>

  <para>
  The routing table also gets updated. For node
  <userinput>A</userinput> to reach node <userinput>C</userinput> it
  must go through node <userinput>B</userinput>:</para>

  <screen>
    <prompt>#</prompt> <userinput><command>route</command> -A inet6</userinput>
    Destination:             Next Hop           Flags  Metric  Ref  Use Iface
    ...
    fec0:106:2700::11/128    ::                 UH      1      1    0   eth1
    fec0:106:2700::12/128    fec0:106:2700::11  UGH     2      0    0   eth1 
    ...
 </screen>

  </sect3>
 </sect2>

<!-- ################## -->
  <sect2 id="hna">
  <title>What about HNA messages?</title>
    
    <para><quote>
    In order to provide this capability of injecting external routing 
    information into an OLSR MANET, a node with such non-MANET interfaces
    periodically issues a Host and Network Association (HNA) message,
    containing sufficient information for the recipients to construct an
    appropriate routing table.</quote> 
    </para>
    
    <para><quote>
    An example of such a situation could be where a node is equipped with
    a fixed network (e.g., an Ethernet) connecting to a larger network as
    well as a wireless network interface running OLSR.</quote> --- <ulink
    url="http://www.ietf.org/rfc/rfc2501.txt">RFC3626: OLSR, section
    12 (page 51).</ulink>
    </para>

  <mediaobject id="HNA">
    <imageobject>
      <imagedata fileref="images/HNA.png" format="PNG"
       width="550" align="center" scalefit="1"/> 
    </imageobject>
    <textobject>
      <phrase>HNA</phrase>
    </textobject>
      <caption>
      <para>OLSR with a gateway (GW), that sends out HNA messages. All
       the other nodes may then be accessing the
       <quote>Internet</quote></para>
     </caption>
  </mediaobject>

    <para>
    To have one node, act as a gateway and send out HNA messages, you
    must change the <userinput>HNA6</userinput> in
    <userinput>/etc/olsrd.conf</userinput>:
    </para>
    
    <screen>
    # HNA IPv6 routes
    # syntax: netaddr prefix
    # Example Internet gateway
    HNA6 :: 0
    </screen>

    <para>
    When you start <userinput>OLSRd</userinput>, you will see the node
    is sending out HNA messages periodically:</para>

    <screen>
    ...
    Sending HNA (48 bytes)...
    ...
    </screen>

    <para>
    When the other nodes receives a HNA message, they update their
    routing table:
    </para>
    
    <screen>
      <prompt>#</prompt> <userinput><command>route</command> -A inet6</userinput>
      Destination:             Next Hop           Flags  Metric  Ref  Use Iface
      ...
      ::/0                     fec0:106:2700::1   UG     1       0    0   eth1 
      ...
    </screen>
    
    <para>
    You may also have multiple nodes in a MANET to act as gateways
    (sending out HNA messages). Each mobile node then use the nearest
    gateway.
    </para>

  </sect2>

<!-- ################## -->
  <sect2 id="gui">
  <title>Optional GUI</title>
    <para>
    OLSRd also has an optional GUI, which can show a list of
    available nodes and grab packets. To compile the GUI front end,
    you must have GTK2. In <userinput>unik-olsrd-x.y.z</userinput>
    directory do: 
    </para> 

    <screen>

     <prompt>#</prompt> <userinput><command>cd</command> front-end</userinput>
     <prompt>#</prompt> <userinput><command>make</command></userinput>
     <prompt>#</prompt> <userinput><command>make</command> install</userinput>
    </screen>

    <para>
    <emphasis>Note! Remember to start OLSRd with the
    <userinput>-ipc</userinput> switch or set
    <userinput>IPC-CONNECT  yes</userinput> in
    <userinput>/etc/olsrd.conf</userinput> to enable the GUI to chat
    with OLSRd.</emphasis>
    </para>

    <para>
    To see some examples of the use of GUI, check out <ulink
    url="http://www.olsr.org/index.cgi?action=gui">
    http://www.olsr.org/index.cgi?action=gui</ulink>
    </para>

  </sect2>

<!-- ################## -->
  <sect2 id="other">
  <title>Other OLSR implementations</title>
    <para>There is also other OLSR implementations, none have gain so
    much popularity as OLSRd, and none of them (expect <ulink
    url="http://qolsr.lri.fr/">QOLSR</ulink>?) are fully RFC
    compliant.</para>  
    
<!-- ######### -->
    <sect3 id="inria">
    <title>INRIA</title>
      <para>INRIA was one of the first(?) implementation of OLSR <ulink
      url="http://hipercom.inria.fr/olsr/#code">http://hipercom.inria.fr/olsr/#code</ulink>.
      Their web-site has not been updated for quite a while, and the
      OLSR code you can download only comply to
      draft-ietf-manet-olsr-03.txt (it's now a RFC). There is suppose to
      be another more up-to-date version of INRIA olsr, but I have not
      found it. INRIA OLSR has not support for IPv6.</para>
      
    </sect3>

<!-- ######### -->
    <sect3 id="nr">
    <title>NROLSR</title>
      <para>The <quote>US Naval Research Laboratory</quote> (NRL) also
      has an OLSR implementation. It is written in C++, and has IPv6
      support. <ulink url="http://pf.itd.nrl.navy.mil/projects/olsr/">
      http://pf.itd.nrl.navy.mil/projects/olsr/</ulink>
      </para>

     </sect3>
     
<!-- ######### -->
     <sect3 id="crc">
     <title>CRCOLSR</title>
       <para>CRCOLSR is a implementation based on the French INRIA
       code. It is is supposed to be maintained by <quote>Communication
       Research Center</quote> (CRC) i Canada. But as of this writing,
       it has been no new releases since April 3, 2003. <ulink
       url="http://pf.itd.nrl.navy.mil/projects/olsr/">
       http://pf.itd.nrl.navy.mil/projects/olsr/</ulink></para>   
     </sect3>

<!-- ######### -->
     <sect3 id="qolsr">
     <title>QOLSR</title>
       <para>QOLSR is aiming to provide <quote>Quality of
       Service</quote> routing in wireless mobile ad hoc
       networks. There is no QoS support at the time of this writing,
       and support for ipv4/ipv6 is triggered at compile time. Written
       in C++.</para>
     </sect3>

  </sect2>


</sect1>

<!-- ##################################################### -->
<sect1 id="faq">
  <title>FAQ</title>

  <para>Some of these question/answers are from the <ulink
  url="http://www.olsr.org">OLSRd</ulink> site.</para> 

  <orderedlist>
    <listitem>
      <para><emphasis>Q: If OLSRd fully RFC3626
      compliant?</emphasis></para> 
      
      <para>A: Yes. It even has implemented some of the extra
      functionality mentioned in the RFC. See the <ulink
      url="http://www.olsr.org/index.cgi?action=comp">
      RFC Compliance</ulink> section for complete list.
      </para>
    </listitem>

    <listitem>
      <para><emphasis>Q: Can i mix site-local and global IPv6
      addresses?</emphasis></para> 
      
      <para>A: Yes. But keep in mind that they intentionally was not
      designed to be used concurrently. The network topology can be
      quite <quote>messy</quote> if you start using these two.
      </para>
    </listitem>

    <listitem>
     <para><emphasis>Q: The GUI front-end failed to
     compile... why?</emphasis></para> 
      
      <para>A: You probably don't have GTK2.0 development libraries
      installed.</para> 
    </listitem>

    <listitem>
    <para><emphasis>Q: If there is multiply gateways present, how does
    the mobile node conclude to use the nearest one?</emphasis></para>

    <para>A: When a new gateway is detected, the Mobile Node check the
    distance (number of hops) to this newly discovered gateway
    compared to the current gateway. If there is a shorter distance,
    this new gateway becomes the current (default) gateway. See
    section 12.6.2 in the OLSR RFC (<ulink
    url="http://www.ietf.org/rfc/rfc3626.txt">RFC3626</ulink>)</para>
    </listitem>

    <listitem>
      <para><emphasis>Q:  I get OLSRd up and running - but the nodes
      don't seem to <quote>hear</quote> each other!</emphasis></para>
      
      <para>A: Most of the time this is a configuration error: Check
      the following:
         
	<itemizedlist>

	  <listitem>
           If using WLAN interfaces make sure the ESSID/key match.
          </listitem>.

	  <listitem>
           Make sure the cards are set in <quote>ad-hoc</quote> mode
          and not <quote>managed</quote>.
          </listitem>

	  <listitem>
            Make sure you are not blocking UDP/698. If using
            netfilter run <userinput>ip6tables -L</userinput> as root
            to see what rules are set. <userinput>ip6tables
            -F</userinput> flushes all rules.
	  </listitem>

	</itemizedlist>	  

      </para> 
    </listitem>

  </orderedlist>

</sect1>

<!-- ##################################################### -->
<sect1 id="resources">
  <title>Useful Resources</title>

  <para>
  <orderedlist>

    <listitem>
      <para>OLSRd (old uOLSR)<ulink
      url="http://www.olsr.org">
      http://www.olsr.org</ulink>
      </para>
    </listitem>

    <listitem>
      <para>Optimized Link State Routing Protocol (OLSR) RFC3626<ulink
      url="http://www.ietf.org/rfc/rfc3626.txt">
      http://www.ietf.org/rfc/rfc3626.txt</ulink>
      </para>
    </listitem>

    <listitem>
      <para>Mobile Ad hoc Networking (MANET) RFC2501<ulink
      url="http://www.ietf.org/rfc/rfc2501.txt">
      http://www.ietf.org/rfc/rfc3626.txt</ulink>
      </para>
    </listitem>

    <listitem>
      <para>Mobile Ad-hoc Networks (manet) Working Group (IETF)<ulink
      url="http://www.ietf.org/html.charters/manet-charter.html">
      http://www.ietf.org/html.charters/manet-charter.html</ulink>
      </para>
    </listitem>

    <listitem>
      <para>Open Shortest Path First IGP (ospf)<ulink
      url="http://www.ietf.org/html.charters/ospf-charter.html">
      http://www.ietf.org/html.charters/ospf-charter.html</ulink>
      </para>
    </listitem>

    <listitem> 
      <para>Protean Forge - OLSR software (CRC and NRL) <ulink
      url="http://pf.itd.nrl.navy.mil/projects/olsr/">
      http://pf.itd.nrl.navy.mil/projects/olsr/</ulink></para> 
    </listitem>
    
    <listitem>
      <para>INRIA OLSR <ulink
      url="http://hipercom.inria.fr/olsr/">
      http://hipercom.inria.fr/olsr/</ulink></para>
    </listitem>

    <listitem>
      <para>QOLSR <ulink
      url="http://qolsr.lri.fr/">
      http://qolsr.lri.fr/</ulink></para>
    </listitem>

    <listitem>
      <para>IPv6 Working Group (IETF) <ulink
      url="http://www.ietf.org/html.charters/ipv6-charter.html">
      http://www.ietf.org/html.charters/ipv6-charter.html </ulink></para>
    </listitem>
   
    <listitem>
      <para>RFC2460 Internet Protocol, Version 6 (IPv6) Specification
      <ulink url="http://www.ietf.org/rfc/rfc2460.txt">
      http://www.ietf.org/rfc/rfc2460.txt </ulink></para>
    </listitem>

    <listitem>
      <para>Peter Bieringer's Linux IPv6 HOWTO (en) <ulink
      url="http://ldp.linux.no/HOWTO/Linux+IPv6-HOWTO/">
      http://ldp.linux.no/HOWTO/Linux+IPv6-HOWTO/ </ulink></para>
    </listitem>

    <listitem>
      <para>Current Status of IPv6 Support for Networking Applications
      <ulink url="http://www.deepspace6.net/docs/ipv6_status_page_apps.html">
      http://www.deepspace6.net/docs/ipv6_status_page_apps.html</ulink></para>
    </listitem>
  
  </orderedlist>
  </para>
</sect1>

<!-- ##################################################### -->

<sect1 id="copyack">
  <title>Copyright, acknowledgments and miscellaneous</title>

<!-- ################## -->

  <sect2 id="copyright">
    <title>Copyright and License</title>
    <para>
     Copyright (c) 2003,2004 by Lars Strand. This material may
     be distributed only subject to the terms and conditions set forth
     in the Open Publication License, v1.0 or later (the latest version
     is presently available at <ulink
     url="http://www.opencontent.org/openpub/">
     http://www.opencontent.org/openpub/ </ulink>).
    </para>

    <para>
     Linux is a registered trademark of Linus Torvalds.
    </para>
  </sect2>

<!-- ################## -->

  <sect2 id="disclaimer">
    <title>Disclaimer</title>

    <para>
     No liability for the contents of this document can be accepted.
     Use the concepts, examples and information at your own risk.
     There may be errors and inaccuracies, that could be damaging to
     your system.  Proceed with caution, and although this is highly
     unlikely, the author(s) do not take any responsibility.
    </para>

    <para>
     All copyrights are held by their by their respective owners,
     unless specifically noted otherwise.  Use of a term in this
     document should not be regarded as affecting the validity of any
     trademark or service mark.  Naming of particular products or
     brands should not be seen as endorsements.
    </para>
  </sect2>

<!-- ################## -->

  <sect2 id="produced">
    <title>How this document was produced</title>
    <para>This document was originally written in LaTeX using
    Emacs. HTML version created with latex2html. Later it was
    converted to DocBook XML.</para>

    <para>An up-to-date version of this document can be found at:</para>

    <para> HTML: <ulink url="http://www.tldp.org/HOWTO/OLSR-IPv6-HOWTO/index.html">
    http://www.tldp.org/HOWTO/OLSR-IPv6-HOWTO/index.html</ulink> </para>
  </sect2>

<!-- ################## -->

  <sect2 id="feedback">
    <title>Feedback</title>
    <para>Suggestions, corrections, additions wanted. Contributors
    wanted and acknowledged. Flames not wanted.</para>

    <para>I can always be reached at <email>lars at unik
    no</email></para>

    <para>Homepage: <ulink
    url="http://www.gnist.org/~lars/">
    http://www.gnist.org/~lars/</ulink></para>
  </sect2>

<!-- ################## -->

  <sect2 id="ack">
    <title>Acknowledgments</title>
    <para>This document was produced as a part of Interoperable
    Networks for Secure Communications <ulink
    url="http://insc.nodeca.mil.no/">(INSC task 6)</ulink></para> 

    <para>Thanks to Andreas Hafslund (andreha [at] unik no) for
    initial support. Also thanks to UniK (University Graduate Center)
    <ulink url="http://www.unik.no">http://www.unik.no</ulink> and FFI
    (Norwegian Defence Research Establishment) <ulink
    url="http://www.ffi.mil.no">http://www.ffi.mil.no</ulink> for
    hardware support.</para>

    <para>Also thanks to Andreas T&#248;nnesen (andreto [at] unik no) for
    technical help updating this howto</para>
    
    <para>Thanks also to the other HOWTO authors whose works I have
    referenced: </para>

    <para><emphasis>Linux IPv6 HOWTO (en)</emphasis> by Peter
    Bieringer</para> 
  </sect2>

</sect1>

</article>
