<?xml version = '1.0' encoding = 'ISO-8859-1' ?>
<sect1 id="whatis">
	<title>What is SquashFS</title>
	<sect2 id="intro">
		<title>Introduction</title>
		<para>
When creating tiny-sized and embedded Linux systems, every byte of the storage device (floppy, flash disk, etc.)
is very important, so compression is used everywhere possible. Also, compressed file systems are frequently needed
for archiving purposes. For huge public archives, as well as for personal media archives, this is essential.
</para>
		<para>
SquashFS brings all this to a new level. It is a read-only file system that lets you compress whole file systems or
single directories, write them to other devices/partitions or to ordinary files, and then mount them directly (if
a device) or using a loopback device (if it is a file). The modular, compact system design of SquashFS is bliss.
For archiving purposes, SquashFS gives you a lot more flexibility and performance speed than a .tar.gz archive.
</para>
		<para>

SquashFS is distributed as a Linux kernel source patch (which enables SquashFS read support in your kernel),
and the 			<command>mksquashfs</command>
 tool, which creates squashed file systems (in a file or on a block device).
		</para>
	</sect2>
	<sect2 id="overview">
		<title>Overview of SquashFS</title>
		<itemizedlist>
			<listitem><para>Data, inodes and directories are compressed
</para></listitem>
			<listitem><para>SquashFS stores full uid/gids (32 bits), and file creation time
</para></listitem>
			<listitem><para>Files up to 2^32 bytes are supported; file systems can be up to 2^32 bytes
</para></listitem>
			<listitem><para>Inode and directory data are highly compacted, and packed on byte
boundaries;  each compressed inode is on average 8 bytes in length
(the exact length varies on file type, i.e. regular file, directory,
symbolic link, and block/character device inodes have different sizes)
</para></listitem>
			<listitem><para>SquashFS can use block sizes up to 32K, which achieves greater
compression ratios than the normal 4K block size
</para></listitem>
			<listitem><para>File duplicates are detected and removed
</para></listitem>
			<listitem><para>Both big and little endian architectures are supported;  SquashFS can
mount file systems created on different byte-order machines
</para></listitem>
		</itemizedlist>
	</sect2>
	<sect2 id="makingclear">
		<title>Making it clear</title>
		<para>
To make further chapters clear, the basic steps of getting SquashFS working that we will discuss are:
</para>
		<orderedlist>
			<listitem><para>Patching and recompiling the Linux kernel to enable SquashFS support
</para></listitem>
			<listitem><para>Compiling the <command>mksquashfs</command> tool
</para></listitem>
			<listitem><para>Creating a compressed file system with <command>mksquashfs</command>
</para></listitem>
			<listitem><para>Testing: mounting a squashed file system to a temporary location
</para></listitem>
			<listitem><para>Modifying the fstab or startup scripts of your Linux system to mount the squashed file system at boot time
</para></listitem>
		</orderedlist>
	</sect2>
</sect1>
