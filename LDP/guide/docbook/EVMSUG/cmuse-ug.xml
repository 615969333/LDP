<chapter id="evmscmuse"><title>Using the EVMS Interfaces</title>
<para>The following chapter explains how to use the EVMS GUI, Ncurses,  CLI interfaces, and the EVMS emulation of the Linux LVM command set . This section includes basic navigation and commands. </para>
<sect1 id="GUI"><title>EVMS GUI</title>
	
	<para>The EVMS GUI provides you with a flexible and easy-to-use
	interface to administer volumes and storage objects. Many users will find the EVMS GUI easy to use because it checks which
	storage objects, actions, and plug-ins are acceptable for each
	task. </para>
		
	<sect2 id="GUITASKS"><title>Using Context Sensitive and Action Menus</title>
		<para>In the EVMS GUI you can accomplish most
		tasks in one of two ways: context sensitive menus and the
		<guimenu>Actions</guimenu> menu.</para>

		<para>Context sensitive menus are available from any
		of the main "views." Each view corresponds to a
		page in a notebook widget located on the EVMS
		GUI main window. These views are made up of different
		trees or lists that visually represent the organization of
		different object types, such as volumes,
		feature objects, regions, containers, segments, or disks. </para>

		<para>You can view the context
		sensitive menu for an object by right-clicking on that
		object. The actions that are available
		for that object will appear on
		the screen. The GUI will present only actions that are acceptable
		for that object at that point in the process. These actions will not always be a complete set. </para>

		<para>To use the <guimenuitem>Actions</guimenuitem> menu
		choose <menuchoice>
			<guimenuitem>Action</guimenuitem>
			<guimenuitem>&lt;the action you want
				to accomplish&gt;</guimenuitem>
			<guimenuitem>&lt;options&gt;</guimenuitem></menuchoice>. 
			The <guimenuitem>Actions</guimenuitem> menu provides a more guided path to
			completing a task than context sensitive menus do. The
			<guimenu>Actions</guimenu> option is similar to the popular wizard or druid
			approach used by many GUI applications.</para>

			<para>All of the operations you need to
			perform as an administrator are available through
			the <guimenuitem>Actions</guimenuitem> menu.</para>
			</sect2>


			
	<sect2 id="COMMIT"><title>Saving Changes</title>
		<para>All changes you make while in the EVMS
		GUI are only in memory until you save the changes.
		In order to make your changes
		permanent, you must save
		all changes before exiting. If you
		forget to save the changes and decide to exit or close the
		EVMS GUI, you will be reminded about
		saving any pending changes.</para>

		<para>To explicitly save all changes you
		made, select <menuchoice><guimenu>Action</guimenu>
		<guimenuitem>Save</guimenuitem></menuchoice>, and click
		the <guibutton>Save</guibutton> button.</para>
	</sect2>
      
<sect2 id="refresh"><title>Refreshing Changes</title>
<para>The <guibutton>Refresh</guibutton> button updates the view but does not cause a rediscover. Clicking 
the <guibutton>Refresh</guibutton> button allows you to see changes, like mount points, that you might have mounted outside of the GUI.</para></sect2></sect1>

<!-- NCurses -->	
      <sect1 id="NCURSES"><title>EVMS Ncurses Interface</title>
	<para>The EVMS Ncurses (evmsn) user interface provides  a menu driven
	interface with similar characteristics to the EVMS GUI. Like the EVMS GUI,
	evmsn can accommodate new plug-ins and features without requiring any code
	changes.</para>

	<para>The availability of an EVMS Ncurses user interface
	allows you to manage volumes on systems that do not have the X
	and GTK+ libraries that are required by the EVMS GUI.</para>

	     <sect2 id="NCURSESOVER"><title>Navigating through EVMS Ncurses</title>
		<para>The EVMS Ncurses user interface initially
	     	displays a list of logical volumes similar to the
	     logical volumes view in the EVMS GUI.</para> 

		<para>A general guide to navigating through the layout of the
		Ncurses screen is listed below:</para>

		<itemizedlist>
			<listitem><para>A menu of key-to-action mappings is
			listed at the bottom of the screen.</para></listitem>
		
			<listitem><para>The <keycap>2</keycap> key returns you to the
			volumes view.</para></listitem> 

			<listitem><para>The <keycap>4</keycap> key displays a menu of
			other views you could switch
			to.</para></listitem>

			<listitem><para>The <keycap>5</keycap> key saves changes made
			during an evmsn session.</para></listitem> 

			<listitem><para>The  <keycap>9</keycap> key exits Ncurses.</para></listitem>
					
			<listitem><para>Status messages and user
			prompts appear on a line located
			between the window frame for the current view and the action 
			keys menu line.</para></listitem>

			<listitem><para>You can select which actions to
			perform by using the <keycap>up</keycap> and
			<keycap>down</keycap> arrow keys to highlight
			an object within the current view. After the
			correct item is highlighted, press the <keycap>Enter</keycap> 
			key. Ncurses will typically provide a context
			sensitive sub-menu of available actions.</para> </listitem> 

			<listitem><para>When navigating from one menu
			to another, the <keycap>Esc</keycap>  (escape) key will return
			you to the previous menu.</para> </listitem>

		</itemizedlist>

		<para>Ncurses allows you to create new
		objects based on your current view. For example, a container can be created
		in the Storage Containers view by selecting any
		container. If the view
		is empty, you can still create a container by pressing the 
		<keycap>Enter</keycap>  key on the 
		"No Storage Containers found" row.</para>

		<para> In order to change or set an option value
		within the configuration options menu, use the <keycap>spacebar</keycap>  key to
		select the value. Press
		<keycap>Enter</keycap>  when you are finished. In order to
		complete most operations you must press <keycap>Enter</keycap>.</para>

	  </sect2>

	<sect2 id="NCURCHANGES"><title>Saving Changes</title>

		<para>All changes you make while in the EVMS
		Ncurses are only in memory until you save the changes.
		In order to make your changes permanent, you must save
		all changes before exiting. If you
		forget to save the changes and decide to exit or close the
		EVMS Ncurses, you will be reminded about
		saving any pending changes.</para>
			
		<para>To explicitly save all changes you
		made,  press the <keycap>5</keycap> key and confirm
		that you want to save changes.</para> 
	 </sect2>

	</sect1>

<!-- CLI Commands -->

     <sect1 id="COMMANDLINE"><title>EVMS Command Line Interpreter</title>
	<para>The EVMS Command Line Interpreter (EVMS CLI) provides a
	command-driven user interface for EVMS. The EVMS CLI is
	designed to help automate volume management tasks. For
	situations where the EVMS GUI is not available, the EVMS CLI
	provides an interactive mode.</para>

	<para>Because the EVMS CLI is an interpreter, it operates
	differently than command line utilities for the
	operating system. The options you specify 
	on the EVMS CLI command line used to invoke the EVMS 
	CLI control how the EVMS CLI operates. For example, the 
	command line options tell the CLI where to go for commands to interpret and how
	often the EVMS CLI should commit changes to disk. 
	When invoked, the EVMS CLI prompts for commands. </para>
	
	<para>The volume management commands the EVMS CLI understands
	are specified in the <filename>/usr/src/evms-1.2.0/engine/UserInterface/commandline/grammar.ps</filename> 
	file that accompanies the EVMS
	package.  These commands are described in detail in the EVMS
	man page, and help on these commands is available from the EVMS
	CLI itself. </para>
	
	<sect2 id="CLITASKS"><title>Using the EVMS CLI</title>
	<para>Use the <command>evms</command> command to start
	  the EVMS CLI. If you do not enter an option with
	  <command>evms</command>, the EVMS CLI will start in
	  interactive mode. In interactive mode, the EVMS CLI prompts
	  you for commands. The results of each command are saved
	  to disk immediately. The EVMS CLI will exit when you type <userinput>exit</userinput>. 
	You can modify this behavior by using
	  the following options with <command>evms</command>: 

	  <variablelist>
		<varlistentry><term>-c</term>
		<listitem><para>This option commits changes to disk
		only when EVMS CLI exits, not after
		each command. </para></listitem></varlistentry>
		<varlistentry><term>-f <replaceable>filename</replaceable></term>
		<listitem><para>This option tells the EVMS CLI to use
		<replaceable>filename</replaceable> as the source of
		commands. The EVMS CLI will exit, when it reaches the
		end of
		<replaceable>filename</replaceable>.
		</para></listitem></varlistentry>
		<varlistentry><term>-p</term>
		<listitem><para>This option parses commands only,
		which means that the commands are not actually
		executed. When combined with the -f option, the -p option
		can be used to catch syntax errors in command files. </para></listitem></varlistentry> 
		<varlistentry><term>-h</term>
		<listitem><para>This option displays help information
		for options used with the <command>evms</command>
		command.</para></listitem> </varlistentry>

		<varlistentry><term>-rl</term>
		<listitem><para>This option tells the CLI that all remaining items on the 
		command line are replacement parameters for use with 
		EVMS commands. </para>

		<note><title>NOTE</title>
		<para>Replacement parameters are accessed in EVMS commands using the 
		<option>$(x)</option> notation, where <replaceable>x</replaceable> is the number identifying which 
		replacement parameter to use. Replacement parameters are assigned 
		numbers (starting with 1) as they are encountered on the command line. 
		Substitutions are not made within comments or quoted strings. </para>

		<para>An example would be :
		<programlisting>evms -c -f testcase -rl sda sdb</programlisting>
		where <option>sda</option> is the replacement for <replaceable>parameter1</replaceable> and 
		<option>sdb</option> is the replacement for <replaceable>parameter2</replaceable></para></note>
		</listitem></varlistentry>
		</variablelist></para>

		<note><title>NOTE</title>
		<para>Information on less commonly used options is available in the EVMS man
		page. </para></note>

		<para>When the EVMS CLI has been invoked, it processes
		the commands or command file you provide.  </para>
		</sect2>
	<sect2 id="NOTECOMMAND"><title>Notes on Commands and Command Files</title>

		<para>The EVMS CLI allows multiple commands to appear
		on a command line.  When using multiple commands on a
		single command line, the commands must be separated by
		a colon ( : ) .  This is
		important for command files because the EVMS CLI sees
		a command file as a single long command line.  The
		EVMS CLI has no concept of lines in the file and
		ignores spaces. These features allow a command in
		a command file to span several lines and use whatever
		indentation, or margins that are convenient. The only
		requirement is that the command separator (the colon) appear
		between commands.</para> 

		<para>The EVMS CLI ignores spaces unless the spaces
		appear within quote marks. Any name that contains
		spaces or other non-printable or control characters
		should be placed in quotation marks.  If the name
		contains a quotation mark as part of the name, the
		quotation mark must be "doubled" as in the following example:</para>

<programlisting>"This is a name containing ""embedded"" quote marks."</programlisting>

		<para>EVMS CLI keywords are not case sensitive, but EVMS
		names are case sensitive. Sizes can be input in any units with a unit label, such as KB, MB, GB, or TB.</para>

		<para>Finally, C programming language style comments
		are supported by the EVMS CLI.  Comments can begin and
		end anywhere except within a quoted string, as in the
		following example:</para> 

<programlisting>/* This is a comment */
Create:Vo/*This is a silly place for a comment, but it is
allowed.*/lume,"lvm/Sample Container/My LVM
Volume",compatibility</programlisting>
		</sect2>


			
	</sect1>
<!-- LVM Utilities -->
<sect1 id="lvm"><title>Linux LVM IEmulation Tools</title>
	<para>You can administer 
	Linux LVM volumes through a set of command line utilities that emulate the Linux LVM 
	command set, using the EVMS Engine APIs.</para>

	<para>The Linux LVM is based on the concept of volume groups. A volume group (VG) is
	a collection of physical volumes (PVs). All PVs in one group have their storage
	space subdivided into small, fixed-sized sections called physical extents (PEs).
	The default size for a PE is 4 MB. Logical volumes (LVs) are created by
	allocating one or more PEs to the new LV. When I/O requests come in for a
	volume, the LVM code determines which PV and which PE the request lies
	on, and passes the request down the stack to the appropriate device.</para>

	<para>As noted in <xref linkend="terminology"/>, EVMS uses different terms than those used
	in Linux LVM. However, the two sets of terms are comparable. Volume groups (VGs)
	from Linux LVM are called containers in EVMS. Because the LVM plug-in is an EVMS
	Region Manager, its output objects (LVs in LVM) are called regions. The input
	objects (PVs in LVM) are called segments, even though region
	managers can actually take disks and other regions as inputs as well. These
	command line utilities will often use the Linux LVM and EVMS terminology interchangeably.</para>

	<para>The options for the EVMS emulation of the Linux LVM command set are the same as the
	options for the Linux LVM commands. However, some options now have slightly
	different meanings. For instance, the verbose option (-v) displays additional
	information about the command to the user, but also opens the Engine with DEBUG
	level messaging, so that additional information is written to the Engine log
	(<filename>/var/log/evmsEngine.log</filename>). The debug option (-d) displays the
	same amount of info to the user as the verbose option, but opens the Engine with
	ENTRY_EXIT level messaging, which causes detailed trace information to be
	written to the Engine log. Also, some options are currently silently ignored,
	because their functionality has not been implemented yet, or because that
	functionality is not necessary in EVMS. For instance, the auto-backup option (<option>-A</option>)
	is ignored because the LVM plug-in
	does not yet make metadata backups.</para> 

	<para>The following commands are available
	in the command line utilities. The
	options are generally identical to those available from
	the Linux LVM commands. Use the <option>--help</option> option for each
	command to learn more about that command.</para>

	<glosslist>
		<glossentry><glossterm><command>evms_vgcreate</command></glossterm>
		<glossdef><para>Creates a new LVM volume group
		with the given list of PVs. VG commands no longer require the user to prepare objects
 	               	with <command>evms_pvcreate</command>. Any available object in EVMS can now
 	              	be used directly by these commands. Similarly, the
  	              	<command>evms_pvremove</command> command is no longer necessary to release
   	             	PVs back to available EVMS
		objects.</para></glossdef></glossentry>

		<glossentry><glossterm><command>evms_vgremove</command></glossterm>
		<glossdef><para>Deletes an existing volume
		group.</para></glossdef></glossentry>
	
		<glossentry><glossterm><command>evms_vgextend</command></glossterm>
		<glossdef><para>Adds new PVs to an existing
		volume group.</para></glossdef></glossentry>

		<glossentry><glossterm><command>evms_vgreduce</command></glossterm>
		<glossdef><para>Takes PVs out of an existing
		volume group.</para></glossdef></glossentry>

		<glossentry><glossterm><command>evms_vgscan</command></glossterm>
		<glossdef><para>Lists all current LVM
		VGs. This command also contains a new option
		(-c) to force a commit, and the creation of
		all necessary device files in
		<filename>/dev</filename>. This creation of
		files is necessary for existing LVM setups
		that have not created any new LVs using the
		EVMS tools (unless devfs is enabled). The same
		results can also be accomplished by by saving in any of the EVMS interfaces.</para></glossdef></glossentry>

		<glossentry><glossterm><command>evms_vgdisplay</command></glossterm>
<glossdef><para>Displays extra information
		about the specified VG.</para></glossdef></glossentry>


		<glossentry><glossterm><command>evms_lvcreate</command></glossterm>
		<glossdef><para>Creates a new LVM logical
		volume. <command>evms_lvcreate</command> supports creating normal (linear) LVs as
		well as striped LVs. Linear LVs can be specified as being contiguous. The LVM
  	              	plug-in defines contiguous to mean the LV must reside on a
   	             	single PV in a contiguous run of PEs. </para>
		</glossdef></glossentry>

		<glossentry><glossterm><command>evms_lvremove</command></glossterm>
		<glossdef><para>Deletes an LVM logical
		volume. </para></glossdef></glossentry>

		<glossentry><glossterm><command>evms_lvextend</command></glossterm>
		<glossdef><para>Expands an existing LV by
		adding extents. You must expand the file system
		after expanding the LV. This command currently
		does not support expanding snapshots or
		snapshot originals. The Engine will coordinate the expanding and shrinking of the file system
		if the FSIM (file system interface module) for the file system is installed.</para></glossdef></glossentry>
			
		<glossentry><glossterm><command>evms_lvreduce</command></glossterm>
		<glossdef><para>Shrinks an existing LV by
		removing extents. You must shrink the file
		system before shrinking the LV. Do not shrink
		the LV first, or you will risk losing data
		from the file system. This command does not currently
		support shrinking snapshots or snapshot
		originals. The Engine will coordinate the expanding and shrinking of the file system
		if the FSIM (file system interface module) for the file system is installed.</para></glossdef></glossentry>

		<glossentry><glossterm><command>evms_lvscan</command></glossterm>
		<glossdef><para>Lists all current LVM
		LVs. When an LV is listed as inactive that LV does not appear as a
		compatibility volume in EVMS, and it is not
		available for use through EVMS. The
		only way this can occur is if the LV was
		created in the EVMS GUI and a compatibility
		volume was not added. Use
		the GUI to perform the task of adding a
		compatibility volume to an inactive LV. </para></glossdef></glossentry>

		<glossentry><glossterm><command>evms_lvdisplay</command></glossterm>
		<glossdef><para>Displays extra information
		about the specified LV.</para></glossdef></glossentry>		

		<glossentry><glossterm><command>evms_pvscan</command></glossterm>
		<glossdef><para>Lists all current LVM
		PVs. This command also lists all other EVMS
		disks, segments, and regions, and marks each
		as "available" or "unavailable." Available
		objects can be used directly to create or
		extend volume groups. </para></glossdef></glossentry>

		<glossentry><glossterm><command>evms_pvdisplay</command></glossterm>
		<glossdef><para>Displays extra information about the
		specified PV.</para></glossdef></glossentry>

		</glosslist>

	<para>Two commands have been removed from the set of LVM utilities.
	<command>evms_pvcreate</command> and
	<command>evms_pvremove</command> are no longer
	necessary. The <command>evms_pvscan</command> command
	will now display all LVM PVs as well as all other
	disks, segments, and regions in EVMS, and label them
	as available or unavailable. Objects that are marked as
	available can be used by <command>evms_vgcreate</command>
	without needing to call <command>evms_pvcreate</command>.</para>


	</sect1>



</chapter>








