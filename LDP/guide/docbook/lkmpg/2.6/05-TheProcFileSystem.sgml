<sect1><title>The /proc File System</title>

	<indexterm><primary><filename role=directory>/proc</filename> filesystem</primary></indexterm>
	<indexterm><primary>filesystem</primary><secondary><filename role=directory>/proc</filename></secondary></indexterm>

	<para>In Linux there is an additional mechanism for the kernel and kernel modules to send information to processes --- the
	<filename role="directory">/proc</filename> file system.  Originally designed to allow easy access to information about
	processes (hence the name), it is now used by every bit of the kernel which has something interesting to report, such as
	<filename>/proc/modules</filename> which has the list of modules and <filename>/proc/meminfo</filename> which has memory usage
	statistics.</para>

	<indexterm><primary><filename>/proc/modules</filename></primary></indexterm>
	<indexterm><primary><filename>/proc/meminfo</filename></primary></indexterm>

	<para>The method to use the proc file system is very similar to the one used with device drivers --- you create a structure
	with all the information needed for the <filename role="directory">/proc</filename> file, including pointers to any handler
	functions (in our case there is only one, the one called when somebody attempts to read from the <filename
	role="directory">/proc</filename> file). Then, <function>init_module</function> registers the structure with the kernel and
	<function>cleanup_module</function> unregisters it.</para>

	<para>The reason we use <function>proc_register_dynamic</function><footnote><para>In version 2.0, in version 2.2 this is done
	for us automatically if we set the inode to zero.</para></footnote> is because we don't want to determine the inode number
	used for our file in advance, but to allow the kernel to determine it to prevent clashes. Normal file systems are located on a
	disk, rather than just in memory (which is where <filename role="directory">/proc</filename> is), and in that case the inode
	number is a pointer to a disk location where the file's index-node (inode for short) is located. The inode contains
	information about the file, for example the file's permissions, together with a pointer to the disk location or locations
	where the file's data can be found.</para>

	<indexterm><primary><function>proc_register_dynamic</function></primary></indexterm>
	<indexterm><primary><function>proc_register</function></primary></indexterm>
	<indexterm><primary>inode</primary></indexterm>

	<para>Because we don't get called when the file is opened or closed, there's no where for us to put
	<varname>try_module_get</varname> and <varname>try_module_put</varname> in this module, and if the file is opened and
	then the module is removed, there's no way to avoid the consequences. In the next chapter we'll see a harder to implement, but
	more flexible, way of dealing with <filename role="directory">/proc</filename> files which will allow us to protect against
	this problem as well.</para>



<example><title>procfs.c</title><programlisting><inlinegraphic fileref="lkmpg-examples/05-TheProcFileSystem/procfs.c" format="linespecific"/></inlinegraphic></programlisting></example>

</sect1>



<!--
vim:textwidth=128
-->
