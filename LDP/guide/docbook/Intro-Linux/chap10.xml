<?xml version='1.0' encoding='ISO8859-1'?>
<chapter id="chap_10"><title>Networking</title>
<abstract>
<para>When it comes to networking, Linux is your operating system of choice, not only because networking is tightly integrated with the OS itself and a wide variety of free tools and applications are available, but for the robustness under heavy loads that can only be achieved after years of debugging and testing in an Open Source project.</para>
<para>Bookshelves full of information have been written about Linux and networking, but we will try to give an overview in this chapter.  After completing this, you will know more about</para>
<para>
<itemizedlist>
<listitem><para>Supported networking protocols</para></listitem>
<listitem><para>File sharing and printing</para></listitem>
<listitem><para>Other common Internet/Intranet services</para></listitem>
<listitem><para>Remote execution of commands and applications</para></listitem>
<listitem><para>Basic network interconnection</para></listitem>
<listitem><para>Networking tools</para></listitem>
</itemizedlist>
</para>
</abstract>
<sect1 id="sect_10_01"><title>General networking</title>
<sect2 id="sect_10_01_01"><title>Networking protocols</title>
<para>Linux supports many different networking protocols.  We list only the most important:</para>
<sect3 id="sect_10_01_01_01"><title>TCP/IP</title>
<para>The Internet was originally developed three decades ago for the United States Department of Defense (DoD), mainly for the purpose of interconnecting different-brand computers. The TCP/IP suite of protocols allowed, through its layered structure, to insulate applications from networking hardware.
</para>
<para>Although it is based on a layered model, it is focused more on delivering interconnectivity than on rigidly adhering to functional layers. This is one of the reasons why TCP/IP has become the de facto standard internetworking protocol as opposed to OSI.
</para>
<para>TCP/IP networking has been present in Linux since its beginnings. It has been implemented from scratch. It is one of the most robust, fast and reliable implementations and is one of the key factors of the success of Linux.  In fact, a Linux system expects to be networked.
</para>
</sect3>
<sect3 id="sect_10_01_01_02"><title>TCP/IPv6</title>
<para>IPv6, sometimes also referred to as IPng (IP Next Generation) is an upgrade to the IPv4 protocol in order to address many issues. These issues include a shortage of available IP addresses, lack of mechanisms to handle time-sensitive traffic, lack of network layer security, and so forth.
</para>
<para>The larger name space is accompanied by an improved addressing scheme, which has great impact on routing performance.</para>

</sect3>
<sect3 id="sect_10_01_01_03"><title>PPP, SLIP, PLIP, PPPOE</title>
<para>The Linux kernel has built-in support for PPP (Point-to-Point-Protocol), SLIP (Serial Line IP) and PLIP (Parallel Line IP). PPP is the most popular way individual users access their ISP (Internet Service Provider), although (in Belgium) it is currently being replaced by PPPOE, PPP over Ethernet, the protocol used in cable modem connections.</para>
</sect3>
<sect3 id="sect_10_01_01_04"><title>ISDN</title>
<para>The Linux kernel has built-in ISDN capabilities. Isdn4linux controls ISDN PC cards and can emulate a modem with the Hayes command set (<quote>AT</quote> commands). The possibilities range from simply using a terminal program to full connection to the Internet.</para>
<para>Check your system documentation.</para>
</sect3>
<sect3 id="sect_10_01_01_05"><title>AppleTalk</title>
<para>Appletalk is the name of Apple's internetworking stack. It allows a peer-to-peer network model which provides basic functionality such as file and printer sharing. Each machine can simultaneously act as a client and a server, and the software and hardware necessary are included with every Apple computer.</para>
<para>Linux provides full Appletalk networking. Netatalk is a kernel-level implementation of the AppleTalk Protocol Suite, originally for BSD-derived systems. It includes support for routing AppleTalk, serving UNIX and AFS file systems using AppleShare and serving UNIX printers and accessing AppleTalk printers.</para>
</sect3>
<sect3 id="sect_10_01_01_06"><title>IPX/SPX</title>
<para>IPX/SPX (Internet Packet Exchange/Sequenced Packet Exchange) is a proprietary protocol stack developed by Novell and based on the Xerox Network Systems (XNS) protocol. IPX/SPX became prominent during the early 1980s as an integral part of Novell, Inc.'s NetWare. NetWare became the standard network operating system (NOS) of first generation LANs. Novell complemented its NOS with a business-oriented application suite and client-side connection utilities.</para>
<para>Linux has a very clean IPX/SPX implementation, allowing it to be configured as an IPX router/bridge, NCP client and/or server and Novel Print client or server.  It enables PPP/IPX and IPX tunneling through IP.</para>
</sect3>
<sect3 id="sect_10_01_01_07"><title>SMB/NMB</title>
<para>For compatibility with MS Windows environments, the Samba suite, including support for the NMB and SMB protocols, can be installed on any UNIX-like system.  The Server Message Block protocol (also called Session Message Block, NetBIOS or LanManager protocol) is used on MS Windows 3.11, NT, 95/98, 2K and XP to share disks and printers.</para>
<para>The basic functions of the Samba suite are:  sharing Linux drives with Windows machines, accessing SMB shares from Linux machines, sharing Linux printers with Windows machines and sharing Windows printers with Linux machines.</para>
<para>Most Linux distributions provide a <emphasis>samba</emphasis> package, which does most of the server setup and starts up <command>smbd</command>, the Samba server, and <command>nmbd</command>, the netbios name server, at boot time by default.  Example sections for use in various situations are provided.</para>  
<para>More information can be found in the <filename>smb.conf</filename> man page or in the <ulink url="http://www.redhat.com/support/resources/print_file/samba.html">Samba</ulink> section of the RedHat Support Resources on Printing and File Services.  The <ulink url="http://ftp.easynet.be/samba/docs/Samba-HOWTO-Collection.html">Samba Project Documentation</ulink> contains an easy to read installation and testing guide, which also explains how to configure your Samba server as a Primary Domain Controller.  The <ulink url="http://www.samba.org">Samba website</ulink> contains more documentation, including a troubleshooting guide.</para>
</sect3>
<sect3 id="sect_10_01_01_08"><title>Miscellaneous protocols</title>
<para>Linux also has support for Amateur Radio, WAN internetworking (X25, Frame Relay, ATM), but since these protocols usually require special hardware, we won't discuss them in this document.</para>
</sect3>
</sect2>
<sect2 id="sect_10_01_02"><title>General networking tools</title>
<sect3 id="sect_10_01_02_01"><title>Configuration of local network interfaces</title>
<para>To obtain the graphical configuration tools for networking devices, routes, hosts and so on, refer to the distribution-specific documentation.  The graphical tool RedHat 7.2 currently offers is called <command>neat</command>, which allows easy configuration of network interfaces, routes, gateways and DNS without requiring much knowledge about the actual configuration files, among others in <filename>/etc/sysconfig/network-scripts</filename>.</para>
<para>Configuration on the command line used to be done using the <command>ifconfig</command> command, but this is being deprecated and replaced with <command>ip</command>, which can handle different protocols easier and allows for flexible configuration.  The most up to date documentation can be found in <filename>/usr/share/doc/iproute-&lt;version&gt;</filename>; the command has extended help features for short hints as well.  Setting the IP address on a network interface, for instance, can be done like this:</para>
<screen>
[root@blob network-scripts] ip addr add 192.168.30.2 dev eth0
</screen>
<para>On most Linux distributions, direct manipulation of the network configuration is not recommended.  The suggested way to change the network configuration is to change the configuration files for the shell scripts used on the Linux distribution to manage the networking.</para>
<para>For example, on RedHat 7.2 systems, the network configuration scripts are configured with interface-specific configuration files <filename>/etc/sysconfig/network-scripts/ifcfg-&lt;interfacename&gt;</filename>:</para>
<screen>
[root@blob network-scripts] cat ifcfg-eth0
DEVICE=eth0
ONBOOT=yes
BOOTPROTO=static
IPADDR=192.168.30.2
NETMASK=255.255.255.0
BROADCAST=192.168.30.255
NETWORK=192.168.30.0
IPV6INIT=yes
</screen>
<para>General activation of the network facilities is configured in <filename>/etc/sysconfig/network</filename>:</para>
<screen>
jenny@blob /etc/sysconfig&gt; cat network
NETWORKING=yes
NETWORKING_IPV6=yes
HOSTNAME=blob.hq.somewhere.org
GATEWAY=192.168.30.1
</screen>
<para>The distribution-specific scripts use <command>ip</command> (or <command>ifconfig</command> and <command>route</command> on older systems) to configure the kernel's networking configuration.</para>
<para>The <command>ip</command> command can also be used to display network information.  Below are some examples, displaying IP address configuration, routes and neighbouring proxies:</para>

<screen>
benny@home benny&gt; ip addr show
1: lo: &lt;LOOPBACK,UP&gt; mtu 16436 qdisc noqueue 
    link/loopback 00:00:00:00:00:00 brd 00:00:00:00:00:00
    inet 127.0.0.1/8 brd 127.255.255.255 scope host lo
    inet6 ::1/128 scope host 
2: eth0: &lt;BROADCAST,MULTICAST,UP&gt; mtu 1500 qdisc pfifo_fast qlen 100
    link/ether 00:50:bf:7e:54:9a brd ff:ff:ff:ff:ff:ff
    inet 192.168.42.15/24 brd 192.168.42.255 scope global eth0
    inet6 fe80::250:bfff:fe7e:549a/10 scope link 

benny@home benny&gt; ip route show
192.168.42.0/24 dev eth0  scope link 
127.0.0.0/8 dev lo  scope link 
default via 192.168.42.1 dev eth0 

benny@home benny&gt; ip neigh
192.168.42.1 dev eth0 lladdr 00:50:bf:7e:54:99 nud reachable
</screen>
  
<para>For displaying the network configuration, there's the common <command>netstat</command> command which has a lot of options and is generally useful on any UNIX system.  Use the <option>-i</option> option to display information about network interfaces:</para>
<screen>
bob:~&gt;netstat -i
Kernel Interface table
Iface MTU Met RXOK RXERR RX-DRP RX-OVR TX-OK TX-ERR TX-DRP TX-OVR Flg
eth0 1500   0 58459   0      0      0  63865     0      0      0 BMRU
lo  16436   0 24060   0      0      0  24060     0      0      0 LRU
</screen>
<para>Routing information is displayed with the <option>-nr</option> option:</para>
<screen>
bob:~&gt;netstat -nr
Kernel IP routing table
Destination  Gateway      Genmask       Flags MSS Window irtt Iface
192.168.42.0 0.0.0.0      255.255.255.0 U      40 0         0 eth0
127.0.0.0    0.0.0.0      255.0.0.0     U      40 0         0 lo
0.0.0.0      192.168.42.1 0.0.0.0       UG     40 0         0 eth0
</screen>
<para>This is a typical client machine in an IP network. It only has one network device, <emphasis>eth0</emphasis>.  The <emphasis>lo</emphasis> interface is the local loop.</para>
<para>Information about name resolvers and when to contact which is stored in the <filename>/etc/nsswitch.conf</filename> file, the system databases and name service switch configuration file.  It usually looks something like this:</para>
<screen>
#
# /etc/nsswitch.conf
#

passwd:     files ldap
shadow:     files ldap
group:      files ldap
hosts:      files dns
bootparams: nisplus [NOTFOUND=return] files
ethers:     files
netmasks:   files
networks:   files
protocols:  files ldap
rpc:        files
services:   files ldap
netgroup:   files ldap
publickey:  nisplus
automount:  files ldap
aliases:    files 
</screen>
<para>This file tells the system to resolve host names first looking in the local databases (such as <filename>/etc/hosts</filename>), and when these don't recognize the host name, to look it up using the DNS service (<emphasis>hosts</emphasis> entry).</para>
</sect3>
<sect3 id="sect_10_01_02_02"><title>Other hosts</title>
<para>An impressive amount of tools is focused on network management and remote administration of Linux machines.  Your local Linux software mirror will offer plenty of those.  It would lead us too far to discuss them in this document, so please refer to the program-specific documentation.</para>
<para>We will only discuss common UNIX/Linux text tools in this section.</para>
<para>To display information on hosts or domains, use the <command>host</command> command:</para>
<screen>
[emmy@pc10 emmy]$ host www.eunet.be
www.eunet.be. has address 193.74.208.177

[emmy@pc10 emmy]$ host -t any eunet.be
eunet.be. SOA dns.eunet.be. hostmaster.Belgium.EU.net. 
  2002021300 28800 7200 604800 86400
eunet.be. mail is handled by 50 pophost.eunet.be.
eunet.be. name server ns.EU.net.
eunet.be. name server dns.eunet.be.
</screen>
<para>Similar information can be displayed using the <command>dig</command> command.  To check if a host is alive, use <command>ping</command>.  If your system is configured to send more than one packet, interrupt <command>ping</command> with the <keycap>Ctrl</keycap>+<keycap>C</keycap> key combination:</para>
<screen>
[emmy@pc10 emmy]$ ping a.host.be 
PING a.host.be (1.2.8.3) from 80.20.84.26: 56(84) bytes of data.
64 bytes from a.host.be(1.2.8.3):icmp_seq=0 ttl=244 time=99.977msec
--- a.host.be ping statistics ---
1 packets transmitted, 1 packets received, 0% packet loss
round-trip min/avg/max/mdev = 99.977/99.977/99.977/0.000 ms
</screen>
<para>To check the route that packets follow to a network host, use the <command>traceroute</command> command:</para>
<screen>
[emmy@pc10 emmy]$ /usr/sbin/traceroute www.eunet.be
traceroute to www.eunet.be(193.74.208.177),30 hops max,38b packets
1 blob (10.0.0.1)  
       0.297ms  0.257ms  0.174ms
2 adsl-65.myprovider.be (217.136.111.1) 
       12.120ms 13.058ms 13.009ms
3 194.78.255.177 (194.78.255.177)  
       13.845ms 14.308ms 12.756ms
4 gigabitethernet2-2.intl2.gam.brussels.skynet.be (195.238.2.226)
       13.123ms 13.164ms 12.527ms
5 pecbru2.car.belbone.be (194.78.255.118) 
       16.336ms 13.889ms 13.028ms
6 ser-2-1-110-ias-be-vil-ar01.kpnbelgium.be (194.119.224.9)
       14.602ms 15.546ms 15.959ms
7 unknown-195-207-939.eunet.be (195.207.93.49) 
       16.514ms 17.661ms 18.889ms
8 S0-1-0.Leuven.Belgium.EU.net (195.207.129.1) 
       22.714ms 19.193ms 18.432ms
9 dukat.Belgium.EU.net (193.74.208.178) 22.758ms * 25.263ms
</screen>
<para>The <command>mtr</command> program gives streaming information about reachability of remote hosts, but you need to be <emphasis>root</emphasis> to run it.</para>
<para>Specific domain name information can be queried using the <command>whois</command> command, as is explained by many <command>whois</command> servers, like the one below:</para>
<screen>
[emmy@pc10 emmy]$ whois cnn.com
[whois.crsnic.net]

Whois Server Version 1.3

	$&lt;--snap server message--&gt;

   Domain Name: CNN.COM
   Registrar: NETWORK SOLUTIONS, INC.
   Whois Server: whois.networksolutions.com
   Referral URL: http://www.networksolutions.com
   Name Server: TWDNS-01.NS.AOL.COM
   Name Server: TWDNS-02.NS.AOL.COM
   Name Server: TWDNS-03.NS.AOL.COM
   Name Server: TWDNS-04.NS.AOL.COM
   Updated Date: 12-mar-2002
&gt;&gt;&gt; Last update of whois database: Fri, 5 Apr 2002 05:04:55 EST &lt;&lt;&lt;

The Registry database contains ONLY .COM, .NET, .ORG, .EDU domains
and Registrars.

[whois.networksolutions.com]

        $&lt;--snap server message--&gt;

Registrant:
Turner Broadcasting (CNN-DOM)
   1 CNN Center
   Atlanta, GA 30303

   Domain Name: CNN.COM

   Administrative Contact:
        $&lt;--snap contactinfo--&gt;   
   Technical Contact:
        $&lt;--snap contactinfo--&gt;   
   Billing Contact:
	$&lt;--snap contactinfo--&gt;
   Record last updated on 12-Mar-2002.
   Record expires on 23-Sep-2009.
   Record created on 22-Sep-1993.
   Database last updated on 4-Apr-2002 20:10:00 EST.

   Domain servers in listed order:

   TWDNS-01.NS.AOL.COM		149.174.213.151
   TWDNS-02.NS.AOL.COM		152.163.239.216
   TWDNS-03.NS.AOL.COM		205.188.146.88
   TWDNS-04.NS.AOL.COM		64.12.147.120
</screen>
<para>For Belgian domain names, specify the whois server:</para>
<cmdsynopsis><command>whois <parameter>domain.be@whois.dns.be</parameter></command></cmdsynopsis>
</sect3>
</sect2>
</sect1>
<sect1 id="sect_10_02"><title>Internet/Intranet applications</title>
<para>The Linux system is a great platform for offering networking services.  In this section, we will try to give an overview of most common network servers and applications.</para>
<note><title>Connecting to the Internet</title>
<para>Internet connections can be arranged in many different ways; we can not decribe them all in this document, all the more because the connection type is often country or region specific.  Check your system documentation and contact your local Internet provider, a local fellow Linux user or your local Linux User Group, see <ulink url="http://www.ssc.com:8080/glue/groups/">GLUE</ulink> (<emphasis>Groups of Linux Users Everywhere</emphasis>).</para>
</note>
<sect2 id="sect_10_02_01"><title>Server types</title>
<sect3 id="sect_10_02_01_01"><title>Standalone server</title>
<para>Offering a service to users can be approached in two ways.  A daemon or service can run in standalone mode, or it can be dependent on another service to be activated.</para>
<para>Network services that are heavily and/or continuously used, usually run in the standalone mode: they are independent program daemons that are always running.  They are most likely started up at system boot time, and they wait for requests on the specific connection points or ports for which they are set up to listen.  When a request comes, it is processed, and the listening continues until the next request.  A web server is a typical example: you want it to be available 24 hours a day, and if it is too busy it should create more listening instances to serve simultaneous users.  Other examples are the large software archives such as <ulink url="http://sourceforge.net">Sourceforge</ulink> or <ulink url="http://tucows.com">your Tucows mirror</ulink>, which must handle thousands of FTP requests per day.</para>
<para>An example of a standalone network service on your home computer might be the <command>named</command>, a caching name server.  Standalone services have there own processes running, you can check any time using <command>ps</command>:</para>
<screen>
bob:~&gt; ps auxw | grep named
named   908  0.0  1.0 14876 5108 ?   S  Mar14  0:07 named -u named
</screen>
<para>Most services on your home PC, such as the FTP service, don't have a running daemon, yet you can use them:</para>
<screen>
bob:~&gt; ps auxw | grep ftp
bob     738   690  0 16:17 pts/6    00:00:00 grep ftp

bob:~&gt; ncftp localhost
NcFTP 3.1.3 (Mar 27, 2002) by Mike Gleason (ncftp@ncftp.com).
Connecting to localhost(127.0.0.1)...
octarine.hq.soti.org FTP server (Version wu-2.6.2-8) ready.
Logging in...
Guest login ok, access restrictions apply.
Logged in to localhost.
ncftp / >
</screen>
<para>Let's see in the next section how this is arranged.</para>
</sect3>
<sect3 id="sect_10_02_01_02"><title>(x)inetd</title>
<para>On your home PC, things are usually a bit calmer.  You may have a small network, for instance, and you may have to transfer files from one PC to another from time to time, using FTP or Samba (for connectivity with MS Windows machines).  In those cases, starting all the services which you only need occasionally and having them run all the time would be a waste of resources.  So in smaller setups, you will find the necessary daemons dependent on a central program, that listen on all the ports of the services for which it is responsible.</para>  
<para>This super-server, the Internet services daemon, is started up at system initialization time.  There are two common implementations: <command>inetd</command> and <command>xinetd</command> (the extended Internet services daemon).  One or the other is usually running on every Linux system:</para>
<screen>
bob:~&gt; ps -ef | grep inet
root  926   1 0 Mar14 ?   00:00:00 xinetd-ipv6 -stayalive -reuse \
-pidfile /var/run/xinetd.pid
</screen>
<para>The services for which the Internet daemon is responsible, are listed in its configuration file, <filename>/etc/inetd.conf</filename>, for <command>inetd</command>, and in the directory <filename>/etc/xinetd.d</filename> for <command>xinetd</command>.  Commonly managed services include file share and print services, SSH, FTP, telnet, the Samba configuration daemon, talk and time servcies.</para>
<para>As soon as a connection request is received, the central server will start an instance of the required server.  Thus, in the example below, when user <emphasis>bob</emphasis> starts an FTP session to the local host, an FTP daemon is running as long as the session is active:</para>
<screen>
bob:~&gt; ps auxw | grep ftp
bob     793  0.1  0.2  3960 1076 pts/6    S    16:44   0:00 ncftp localhost
ftp     794  0.7  0.5  5588 2608 ?        SN   16:44   0:00 ftpd: 
localhost.localdomain: anonymous/bob@his.server.com: IDLE
</screen>
<para>Of course, the same happens when you open connections to remote hosts: either a daemon answers directly, or a remote <command>(x)inetd</command> starts the service you need and stops it when you quit.</para>
</sect3>
</sect2>

<sect2 id="sect_10_02_02"><title>Mail</title>
<sect3 id="sect_10_02_02_01"><title>Servers</title>
<para><emphasis>Sendmail</emphasis> is the standard mail server program or Mail Transport Agent for UNIX platforms.  It is robust, scalable, and when properly configured with appropriate hardware, handles thousands of users without blinking.  More information about how to configure Sendmail is included with the sendmail and sendmail-cf packages, you may want to read the <filename>README</filename> and <filename>README.cf</filename> files in <filename>/usr/share/doc/sendmail</filename>.  The <command>man <parameter>sendmail</parameter></command> and <command>man <parameter>aliases</parameter></command> are also useful.</para>
<para>Qmail is another mail server, gaining popularity because it claims to be more secure than Sendmail.  While Sendmail is a monolithic program, Qmail consists of smaller interacting program parts that can be better secured.</para>
<para>These servers handle mailing lists, filtering, virus scanning and much more.  Free and commercial scanners are available for use with Linux.  Examples of mailing list software are Mailman, Listserv, Majordomo and EZmlm.  See the web page of your favorite virus scanner for information on Linux client and server support.</para>
</sect3>
<sect3 id="sect_10_02_02_02"><title>Remote mail servers</title>
<para>The most popular protocols to access mail remotely are <emphasis>POP3</emphasis> and <emphasis>IMAP4</emphasis>.  IMAP and POP both allow offline operation, remote access to new mail and they both rely on an SMTP server to send mail.</para>
<para>While POP is a simple protocol, easy to implement and supported by almost any mail client, IMAP is to be preferred because:</para>
<itemizedlist>
<listitem><para>It can manipulate persistent message status flags.</para></listitem>
<listitem><para>It can store as well as fetch mail messages.</para></listitem>
<listitem><para>It can access and manage multiple mailboxes.</para></listitem>
<listitem><para>It supports concurrent updates and shared mailboxes.</para></listitem>
<listitem><para>It is also suitable for accessing Usenet messages and other documents.</para></listitem>
<listitem><para>IMAP works both on-line and off-line.</para></listitem>
<listitem><para>it is optimized for on-line performance, especially over low-speed links.</para></listitem>
</itemizedlist>

</sect3>
<sect3 id="sect_10_02_02_03"><title>Mail user-agents</title>
<para>There are plenty of both text and graphical E-mail clients, we'll just name a few of the common ones.  Pick your favorite.</para>
<para>The UNIX <command>mail</command> command has been around for years, even before networking existed.  It is a simple interface to send messages and small files to other users, who can then save the message, redirect it, reply to it and such.</para>
<para>While it is not commonly used as a client anymore, the <command>mail</command> program is still useful, for example to mail the output of a command to somebody:</para>
<cmdsynopsis><command>mail <email>future.employer@whereIwant2work.com</email> &lt; <filename>cv.txt</filename></command></cmdsynopsis>
<para>The <command>elm</command> mail reader is a much needed improvement to <command>mail</command>, and so is <command>pine</command> (Pine Is Not ELM).  The <command>mutt</command> mail reader is even more recent and offers features like threading.</para>
<para>For those users who prefer a graphical interface to their mail (and a tennis elbow or a mouse arm), there are hundreds of options.  The most popular for new users are Mozilla Mail and Ximian's MS Exchange clone, Evolution, of which you can see a screenshot below:</para>

  
<figure><title>Evolution mail and news reader</title>
<mediaobject>
<imageobject>
<imagedata fileref="images/evolution.eps" format="EPS"></imagedata></imageobject><imageobject>
<imagedata fileref="images/evolution.png" format="PNG"></imagedata>
</imageobject>
</mediaobject>
</figure>

<para>There are also tens of webmail applications available.</para>
<para>An overview is available via the <ulink url="http://www.ibiblio.org/mdw/HOWTO/Mail-User-HOWTO/index.html">Linux Mail User HOWTO</ulink>.</para>

<para>Most Linux distributions include <command>fetchmail</command>, a mail-retrieval and forwarding utility.  It fetches mail from remote mail servers (POP, IMAP and some others) and forwards it to your local delivery system.  You can then handle the retrieved mail using normal mail clients.  It can be run in daemon mode to repeatedly poll one or more systems at a specified interval.  Information and usage examples can be found in the Info pages; the directory <filename>/usr/share/doc/fetchmail-&lt;version&gt;</filename> contains a full list of features and a FAQ for beginners.</para>

<para>The <command>procmail</command> filter can be used for filtering incoming mail, to create mailing lists, to pre-process mail, to selectively forward mail and more.  The accompanying <command>formail</command> program, among others, enables generation of auto-replies and splitting up mailboxes.  Procmail has been around for years on UNIX and Linux machines and is a very robust system, designed to work even in the worst circumstances.  More information may be found in the <filename>/usr/share/doc/procmail-&lt;version&gt;</filename> directory and in the man pages.</para>

</sect3>

</sect2>
<sect2 id="sect_10_02_03"><title>Web</title>
<sect3 id="sect_10_02_03_01"><title>The Apache Web Server</title>
<para>Apache is by far the most popular web server, used on more than half of all Internet web servers.  Most Linux distributions include Apache.  Apache's advantages include its modular design, SSL support, stability and speed. Given the appropriate hardware and configuration it can support the highest loads.</para>
<para>On Linux systems, the server configuration is usually done in the <filename>/etc/httpd</filename> directory.  The most important configuration file is <filename>httpd.conf</filename>; it is rather self-explanatory.  Should you need help, you can find it in the <command>httpd</command> man page or on the <ulink url="http://www.apache.org">Apache website</ulink>.</para>
</sect3>
<sect3 id="sect_10_02_03_02"><title>Web browsers</title>
<para>A number of web browsers, both free and commercial, exist for the Linux platform.  Netscape Navigator has long been the only decent option, but with Mozilla a competitive alternative is available.</para>
<para>Amaya is the W3C browser.  Opera is a commercial browser, compact and fast.  Many desktop managers offer web browsing features in their file manager, like <command>nautilus</command>.</para>
<para>Among the popular text based browsers are <command>lynx</command> and <command>links</command>.  You may need to define proxy servers in your shell, by setting the appropriate variables.</para>
<para>Text browsers are fast and handy when no graphical environment is available, such as when used in scripts.  Below is an excerpt from a shell script that acts as a network worm probing available services:</para>
<screen>
# Is a webserver running on port 80 ?  Which version ?
tcpcheck 80
if [ -z "$RESULT" ] ; then
  HTTP="$(lynx -dump -head http://$SERVERIP/|grep '^Server'|\
  cut -d" " -f2-)"
else
  HTTP=$(echo "no")
fi
</screen>
<para>For www.eunet.be, for instance, the result of this <command>lynx</command> probe would be:</para>
<screen>
eve:~&gt;lynx -dump -head http://www.eunet.be |grep '^Server' |\
cut -d" " -f2
Apache/1.3.14
</screen> 
</sect3>
</sect2>
<sect2 id="sect_10_02_04"><title>File Transfer Protocol</title>
<sect3 id="sect_10_02_04_01"><title>FTP servers</title>
<para>On a Linux system, an FTP server is typically run from <command>xinetd</command>, using the <emphasis>WU-ftpd</emphasis> server, although the FTP server may be configured as a stand-alone server on systems with heavy FTP traffic.  See the exercises.</para>
<para>Other FTP servers include among others <emphasis>Ncftpd</emphasis> and <emphasis>Proftpd</emphasis>.</para>
<para>Most Linux distributions contain the <emphasis>anonftp</emphasis> package, which sets up an anonymous FTP server tree and accompanying configuration files.</para>
</sect3>
<sect3 id="sect_10_02_04_02"><title>FTP clients</title>
<para>Most Linux distributions include <command>ncftp</command>, an improved version of the common UNIX <command>ftp</command> command, which you may also know from the Windows command line.  The <command>ncftp</command> program offers extra features such as a nicer and more comprehensible user interface, file name completion, append and resume functions, bookmarking, session management and more:</para>
<screen>
thomas:~&gt;ncftp blob
NcFTP 3.0.3 (April 15, 2001) by Mike Gleason (ncftp@ncftp.com).
Connecting to blubber...
blubber.soti.org FTP server (Version wu-2.6.1-20) ready.
Logging in...
Guest login ok, access restrictions apply.
Logged in to blob.
ncftp / &gt; help
Commands may be abbreviated.  'help showall' shows hidden and 
unsupported commands.  
'help &lt;command&gt;' gives a brief description of &lt;command&gt;.

ascii      cat      help      lpage     open     quote    site     
bgget      cd       jobs      lpwd      page     rename   type     
bgput      chmod    lcd       lrename   pdir     rhelp    umask    
bgstart    close    lchmod    lrm       pls      rm       version  
binary     debug    lls       lrmdir    put      rmdir      
bookmark   dir      lmkdir    ls        pwd      set        
bookmarks  get      lookup    mkdir     quit     show       
ncftp / > 

</screen>
<para>Excellent help with lot of examples can be found in the man pages.  And again, a number of GUI applications are available.</para> 
<note><title>FTP is insecure!</title>
<para>Don't use the File Transfer Protocol for non-anonymous login unless you know what you are doing.  Your user name and password might be captured by malevolent fellow network users!  Use secure FTP instead; the <command>sftp</command> program comes with the Secure SHell suite, see <xref linkend="sect_10_03_04" />.</para></note>
</sect3>
</sect2>
<sect2 id="sect_10_02_05"><title>Chatting and conferencing</title>
<para>Various clients and systems are available in each distribution.  A short and incomplete list of the most popular programs:</para>
<itemizedlist>
<listitem><para><command>gaim</command>: multi-protocol instant messaging client for Linux, Windows and Mac, compatible with MSN Messenger, ICQ, IRC and much more; see the Info pages or <ulink url="http://gaim.sourceforge.net">the Gaim site</ulink> for more.</para></listitem>
<listitem><para><command>xchat</command>: IRC client for the X window system:</para>
<figure><title>X-Chat</title>
<mediaobject>
<imageobject>
<imagedata fileref="images/xchat.eps" format="EPS"></imagedata></imageobject><imageobject>
<imagedata fileref="images/xchat.png" format="PNG"></imagedata>
</imageobject>
</mediaobject>
</figure>
<para>The home page is at <ulink url="http://sourceforge.net/projects/xchat/">SourceForge</ulink>.</para>
</listitem>
<listitem><para>JMSN: Java MSN Messenger clone with many features that the original does not have.</para></listitem>
<listitem><para><command>Konversation</command>, <command>KVIrc</command> and many other K-tools from the KDE suite.</para></listitem>
<listitem><para><command>gnomemeeting</command>: videoconferencing program for UNIX.</para></listitem>

</itemizedlist>


</sect2>
<sect2 id="sect_10_02_06"><title>News services</title>
<para>Running a Usenet server involves a lot of expertise and fine-tuning, so refer to the <ulink url="http://www.isc.org">INN homepage</ulink> for more information.</para>
<para>There are a couple of interesting newsgroups in the <emphasis>comp.*</emphasis> hierarchy, which can be accessed using a variety of text and graphical clients.  A lot of mail clients support newsgroup browsing as well, check your program or see your local Open Source software mirror for text clients such as <command>tin</command>, <command>slrnn</command> and <command>mutt</command>, or download Mozilla or one of a number of other graphical clients.</para>
<para><ulink url="http://deja.com">Deja.com</ulink> keeps a searchable archive of all newsgroups, powered by Google.  This is a very powerful instrument for getting help: chances are very high that somebody has encountered your problem, found a solution and posted it in one of the newsgroups.</para>
</sect2>
<sect2 id="sect_10_02_07"><title>The Domain Name System</title>
<para>All these applications need DNS services to match IP addresses to host names and vice versa.  A DNS server does not know all the IP addresses in the world, but networks with other DNS servers which it can query to find an unknown address.  Most UNIX systems can run <command>named</command>, which is part of the bind (Berkeley Internet Name Domain) package distributed by the Internet Software Consortium.  It can run as a stand-alone caching <emphasis>nameserver</emphasis>, which is often done on Linux systems in order to speed up network access.</para>
<para>Your main client configuration file is <filename>/etc/resolv.conf</filename>, which determines the order in which Domain Name Servers are contacted:</para>
<screen>
search somewhere.org
nameserver 192.168.42.1
nameserver 193.74.208.137
</screen>
<para>More information can be found in the Info pages on <command>named</command>, in the <filename>/usr/share/doc/bind-&lt;version&gt;</filename> files and on the <ulink url="http://www.isc.org/products/BIND">Bind project</ulink> homepage.  The <ulink url="http://www.ibiblio.org/mdw/HOWTO/DNS-HOWTO.html">DNS HOWTO</ulink> covers the use of BIND as a DNS server.</para>
</sect2>
<sect2 id="sect_10_02_08"><title>DHCP</title>
<para>DHCP is the Dynamic Host Configuration Protocol, which is gradually replacing good old <command>bootp</command> in larger environments.  It is used to control vital networking parameters such as IP addresses and name servers of hosts.  DHCP is backward compatible with <command>bootp</command>.  For configuring the server, you will need to read the HOWTO.</para>
<para>DHCP client machines will usually be configured using a GUI that configures the <command>dhcpcd</command>, the DHCP client daemon.  Check your system documentation if you need to configure your machine as a DHCP client.</para>
</sect2>
<sect2 id="sect_10_02_09"><title>Authentication services</title>
<sect3 id="sect_10_02_09_01"><title>Traditional</title>
<para>Traditionally, users are authenticated locally, using the information stored in <filename>/etc/passwd</filename> and <filename>/etc/shadow</filename> on each system.  But even when using a network service for authenticating, the local files will always be present to configure system accounts for administrative use, such as the root account, the daemon accounts and often accounts for additional programs and purposes.</para>
<para>These files are often the first candidates for being examined by hackers, so make sure the permissions and ownerships are strictly set as should be:</para>
<screen>
bob:~&gt; ls -l /etc/passwd /etc/shadow
-rw-r--r--    1 root     root         1803 Mar 10 13:08 /etc/passwd
-r--------    1 root     root         1116 Mar 10 13:08 /etc/shadow
</screen>
</sect3>
<sect3 id="sect_10_02_09_02"><title>PAM</title>
<para>Linux can use PAM, the Pluggable Authentication Module, a flexible method of UNIX authentication.  Advantages of PAM:</para>
<itemizedlist>
<listitem><para>A common authentication scheme that can be used with a wide variety of applications.
</para></listitem>
<listitem><para>PAM can be implemented with various applications without having to recompile the applications to specifically support PAM.</para></listitem>
<listitem><para>Great flexibility and control over authentication for the administrator and application developer.
</para></listitem>
<listitem><para>Application developers do not need to develop their program to use a particular authentication scheme. Instead, they can focus purely on the details of their program.</para></listitem>
</itemizedlist>
<para>The directory <filename>/etc/pam.d</filename> contains the PAM configuration files (used to be <filename>/etc/pam.conf</filename>).  Each application or service has its own file.  Each line in the file has four elements:</para>
<itemizedlist>
<listitem><para><emphasis>Module</emphasis>:</para>
<itemizedlist>
<listitem><para><option>auth</option>: provides the actual authentication (perhaps asking for and checking a password) and sets credentials, such as group membership or Kerberos tickets.</para></listitem>
<listitem><para><option>account</option>: checks to make sure that access is allowed for the user (the account has not expired, the user is allowed to log in at this time of day, and so on).</para></listitem>
<listitem><para><option>password</option>: used to set passwords.</para></listitem>
<listitem><para><option>session</option>: used after a user has been authenticated.  This module performs additional tasks which are needed to allow access (for example, mounting the user's home directory or making their mailbox available).</para>
</listitem>
</itemizedlist>

<para>The order in which modules are stacked, so that multiple modules can be used, is very important.</para>

</listitem>
<listitem><para><emphasis>Control Flags</emphasis>: tell PAM which actions to take upon failure or success.  Values can be <option>required</option>, <option>requisite</option>, <option>sufficient</option> or <option>optional</option>.</para></listitem>
<listitem><para><emphasis>Module Path</emphasis>: path to the pluggable module to be used, usually in <filename>/lib/security</filename>.</para></listitem>
<listitem><para><emphasis>Arguments</emphasis>: information for the modules</para></listitem>
</itemizedlist>
<para>Shadow password files are automatically detected by PAM.</para>
<para>More information can be found in the <command>pam</command> man pages or at <ulink url="http://www.kernel.org/pub/linux/libs/pam">the Linux-PAM project</ulink> homepage.</para>
</sect3>
<sect3 id="sect_10_02_09_03"><title>LDAP</title>
<para>The Lightweight Directory Access Protocol is a client-server system for accessing global or local directory services over a network.  On Linux, the OpenLDAP implementation is used.  It includes <command>slapd</command>, a stand-alone server; <command>slurpd</command>, a stand-alone LDAP replication server; libraries implementing the LDAP protocol and a series of utilities, tools and sample clients.</para>
<para> The main benefit of using LDAP is the consolidation of certain types of information within your organization. For example, all of the different lists of users within your organization can be merged into one LDAP directory. This directory can be queried by any LDAP-enabled applications that need this information. It can also be accessed by users who need directory information.
</para><para>
Other LDAP or X.500 Lite benefits include its ease of implementation (compared to X.500) and its well-defined Application Programming Interface (API), which means that the number of LDAP-enabled applications and LDAP gateways should increase in the future.
</para><para>
On the negative side, if you want to use LDAP, you will need LDAP-enabled applications or the ability to use LDAP gateways. While LDAP usage should only increase, currently there are not very many LDAP-enabled applications available for Linux. Also, while LDAP does support some access control, it does not possess as many security features as X.500.
</para>
<para> Since LDAP is an open and configurable protocol, it can be used to store almost any type of information relating to a particular organizational structure.  Common examples are mail address lookups, central authentication in combination with PAM, telephone directories and machine configuration databases.</para>
<para>RedHat comes with a slightly improved OpenLDAP version.  See the system specific information and the man pages for related commands such as <command>ldapmodify</command> and <command>ldapsearch</command> for details.  More information can be found in the <ulink url="http://www.ibiblio.org/mdw/HOWTO/LDAP-HOWTO.html">LDAP Linux HOWTO</ulink>, which discusses installation, configuration, running and maintenance of an LDAP server on Linux.  The <ulink url="http://www.ibiblio.org/mdw/HOWTO/LDAP-Implementation-HOWTO/index.html">LDAP Implementation HOWTO</ulink> describes the technical aspects of storing application data in an LDAP server.</para>
</sect3>
</sect2>
</sect1>
<sect1 id="sect_10_03"><title>Remote execution of applications</title>
<sect2 id="sect_10_03_01"><title>Introduction</title>
<para>There are a couple of different ways to execute commands or run programs on a remote machine and have the output, be it text or graphics, sent to your workstation.  The connections can be secure or insecure.  While it is of course advised to use secure connections instead of transporting your password over the network unencrypted, we will discuss some practical applications of the older (unsafe) mechanisms, as they are still useful in a modern networked environment, such as for troubleshooting or running exotic programs.</para>
</sect2>
<sect2 id="sect_10_03_02"><title>Rsh, rlogin and telnet</title>
<para>The <command>rlogin</command> and <command>rsh</command> commands for remote login and remote execution of commands are inherited from UNIX.  While seldom used because they are blatantly insecure, they still come with almost every Linux distribution for backward compatibility with UNIX programs.</para>
<para>Telnet, on the other hand, is still commonly used, often by system and network administrators.  Telnet is one of the most powerful tools for remote access to files and remote administration, allowing connections from anywhere on the Internet.  Combined with an X server, remote graphical applications can be displayed locally.  There is no difference between working on the local machine and using the remote machine.</para>
<para>Because the entire connection is unencrypted, allowing <command>telnet</command> connections involves taking high security risks.  For normal remote execution of programs, Secure SHell or <command>ssh</command> is advised.  We will discuss the secure method later in this section.</para>
<para>However, <command>telnet</command> is still used in many cases.  Below are some examples in which a mail server and a web server are tested for replies:</para>
<screen>
[jimmy@blob ~] telnet mailserver 25
Trying 192.168.42.1...
Connected to mailserver.
Escape character is '^]'.
220 m1.some.net ESMTP Sendmail 8.11.6/8.11.6; 200302281626
ehlo some.net
250-m1.some.net Hello blob.some.net [10.0.0.1], pleased to meet you
250-ENHANCEDSTATUSCODES
250-8BITMIME
250-SIZE
250-DSN
250-ONEX
250-ETRN
250-XUSR
250 HELP
mail from: jimmy@some.net
250 2.1.0 jimmy@some.net... Sender ok
rcpt to: davy@some.net
250 2.1.5 davy@some.net... Recipient ok
data
354 Enter mail, end with "." on a line by itself
test
.
250 2.0.0 g2MA1R619237 Message accepted for delivery
quit
221 2.0.0 m1.some.net closing connection
Connection closed by foreign host.

[jimmy@blob ~] telnet www.some.net 80
Trying 64.39.151.23...
Connected to www.some.net.
Escape character is '^]'.
HEAD / ;HTTP/1.0

HTTP/1.1 200 OK
Date: Fri, 22 Mar 2002 10:05:14 GMT
Server: Apache/1.3.22 (UNIX) (Red-Hat/Linux) 
 mod_ssl/2.8.5 OpenSSL/0.9.6
 DAV/1.0.2 PHP/4.0.6 mod_perl/1.24_01
Last-Modified: Fri, 04 Jan 2002 08:21:00 GMT
ETag: "70061-68-3c3565ec"
Accept-Ranges: bytes
Content-Length: 104
Connection: close
Content-Type: text/html

Connection closed by foreign host.

[jimmy@blob ~] 
</screen>
</sect2>
<sect2 id="sect_10_03_03"><title>The X Window System</title>
<sect3 id="sect_10_03_03_01"><title>X features</title>
<para>As we already explained in Chapter 7 (see <xref linkend="sect_07_03_03" />), the X Window system comes with an X server which serves graphics to clients that need a display.</para>
<para>It is important to realize the distinction between the X server and the X client application(s).  The X server controls the display directly and is responsible for all input and output via keyboard, mouse and display.  The X client, on the other hand, does not access the input and output devices directly.  It communicates with the X server which handles input and output.  It is the X client which does the real work, like computing values, running applications and so forth.  The X server only opens windows to handle input and output for the specified client.</para>
<para>In normal operation (runlevel five, graphical mode), every Linux workstation is an X server to itself, even if it only runs client applications.  All the applications you are running (for example, Gimp, a terminal window, your browser, your office application, your CD playing tool, and so on) are clients to your X server.  Server and client are running on the same machine in this case.</para>
<para>This client/server nature of the X system makes it an ideal environment for remote execution of applications and programs.  Because the process is actually being executed on the remote machine, very little CPU power is needed on the local host.  Such machines, purely acting as servers for X, are called X terminals and were once very popular.  More information may be found in the <ulink url="http://www.ibiblio.org/mdw/HOWTO/mini/Remote-X-Apps.html">Remote X applications mini-HOWTO</ulink>.</para>
</sect3>
<sect3 id="sect_10_03_03_02"><title>Telnet and X</title>
<para>If you would want to use <command>telnet</command> to display graphical applications running on a remote machine, you first need to give the remote machine access to your display (to your X server!) using the <command>xhost</command> command, by typing a command similar to the one below in a terminal window on your local machine:</para>
<screen>
davy:~&gt;xhost +remote.machine.com
</screen>
<para>After that, connect to the remote host and tell it to display graphics on the local machine by setting the environment variable <varname>DISPLAY</varname>:</para>
<screen>
[davy@remote ~] export DISPLAY="local.host.com:0.0"
</screen>
<para>After completing this step, any application started in this terminal window will be displayed on your local desktop, using remote resources for computing, but your local graphical resources (your X server) for displaying the application.</para>
<para>This procedure assumes that you have some sort of X server (XFree86, Exceed, Cygwin) already set up on the machine where you want to display images.  The architecture and operating system of the client machine are not important as long as they allow you to run an X server on it.</para>
<para>Mind that displaying a terminal window from the remote machine is also considered to be a display of an image.</para>
</sect3>
</sect2>
<sect2 id="sect_10_03_04"><title>The SSH suite</title>
<sect3 id="sect_10_03_04_01"><title>Introduction</title>
<para>Most UNIX and Linux systems now run Secure SHell in order to leave out the security risks that came with <command>telnet</command>.  Most Linux systems will run a version of OpenSSH, an Open Source implementation of the SSH protocol, providing secure encrypted communications between untrusted hosts over an untrusted network.  In the standard setup X connections are automatically forwarded, but arbitrary TCP/IP ports may also be forwarded using a secure channel.</para>
<para>The <command>ssh</command> client connects and logs into the specified host name.  The user must provide his identity to the remote machine as specified in the <filename>sshd_config</filename> file, which can usually be found in <filename>/etc/ssh</filename>.  The configuration file is rather self-explanatory and by defaults enables most common features.  Should you need help, you can find it in the <command>sshd</command> man pages.</para>
<para>When the user's identity has been accepted by the server, the server either executes the given command, or logs into the machine and gives the user a normal shell on the remote machine.  All communication with the remote command or shell will be automatically encrypted.</para>
<para>The session terminates when the command or shell on the remote machine exits and all X11 and TCP/IP connections have been closed.</para>
<para>When connecting to a host for the first time, using any of the programs that are included in the SSH collection, you need to establish the authenticity of that host and acknowledge that you want to connect:</para>
<screen>
lenny ~&gt; ssh blob
The authenticity of host 'blob (10.0.0.1)' can't be established.
RSA fingerprint is 18:30:50:46:ac:98:3c:93:1a:56:35:09:8d:97:e3:1d.
Are you sure you want to continue connecting (yes/no)? yes
Warning: Permanently added 'blob,192.168.30.2' (RSA) to the list of 
known hosts.
Last login: Sat Dec 28 13:29:19 2002 from octarine
This space for rent.

lenny is in ~
</screen>
<para>It is important that you type <quote>yes</quote>, in three characters, not just <quote>y</quote>.  This edits your <filename>~/.ssh/known_hosts</filename> file, see <xref linkend="sect_10_03_04_03" />.</para>
</sect3>
<sect3 id="sect_10_03_04_02"><title>X11 and TCP forwarding</title>
<para>If the <varname>X11Forwarding</varname> entry is set to <emphasis>yes</emphasis> and the user is using X applications, the <varname>DISPLAY</varname> environment variable is set, the connection to the X11 display is automatically forwarded to the remote side in such a way that any X11 programs started from the shell will go through the encrypted channel, and the connection to the real X server will be made from the local machine.  The user should not manually set <varname>DISPLAY</varname>.  Forwarding of X11 connections can be configured on the command line or in the <command>sshd</command> configuration file.</para>
<para>The value for <varname>DISPLAY</varname> set by <command>ssh</command> will point to the server machine, but with a display number greater than zero.  This is normal, and happens because <command>ssh</command> creates a <emphasis>proxy</emphasis> X server on the server machine (that runs the X client application) for forwarding the connections over the encrypted channel.</para>
<para>This is all done automatically, so when you type in the name of a graphical application, it is displayed on your local machine and not on the remote host.  We use <command>xclock</command> in the example, since it is a small program which is generally installed and ideal for testing:</para>
<figure><title>SSH X11 forwarding</title>
<mediaobject>
<imageobject>
<imagedata fileref="images/ssh_X11.eps" format="EPS"></imagedata></imageobject>
<imageobject>
<imagedata fileref="images/ssh_X11.png" format="PNG"></imagedata>
</imageobject>
</mediaobject>
</figure>
<para>SSH will also automatically set up Xauthority data on the server machine.  For this purpose, it will generate a random authorization cookie, store it in <filename>Xauthority</filename> on the server, and verify that any forwarded connections carry this cookie and replace it by the real cookie when the connection is opened.  The real authentication cookie is never sent to the server machine (and no cookies are sent in the plain).</para>
<para>Forwarding of arbitrary TCP/IP connections over the secure channel can be specified either on the command line or in a configuration file.</para>  
<note><title>The X server</title>
<para>This procedure assumes that you have a running X server on the client where you want to display the application from the remote host.  The client may be of different architecture and operating system than the remote host, as long as it can run an X server, such as Cygwin (which implements an XFree86 server for e.g. MS Windows clients) or Exceed, it should be possible to set up a remote connection with any Linux or UNIX machine.</para></note>
</sect3>
<sect3 id="sect_10_03_04_03"><title>Server authentication</title>
<para>The <command>ssh</command> client/server system automatically maintains and checks a database containing identifications for all hosts it has ever been used with.  Host keys are stored in <filename>$HOME/.ssh/known_hosts</filename> in the user's home directory.  Additionally, the file <filename>/etc/ssh/ssh_known_hosts</filename> is automatically checked for known hosts.  Any new hosts are automatically added to the user's file.  If a host's identification ever changes, <command>ssh</command> warns about this and disables password authentication to prevent a Trojan horse from getting the user's password.  Another purpose of this mechanism is to prevent man-in-the-middle attacks which could otherwise be used to circumvent the encryption.  In environments where high security is needed, <command>sshd</command> can even be configured to prevent logins to machines whose host keys have changed or are unknown.</para>
</sect3>
<sect3 id="sect_10_03_04_04"><title>Secure remote copying</title>
<para>The SSH suite provides <command>scp</command> as a secure alternative to the <command>rcp</command> command that used to be popular when only <command>rsh</command> existed.  <command>scp</command> uses <command>ssh</command> for data transfer, uses the same authentication and provides the same security as <command>ssh</command>.  Unlike <command>rcp</command>, <command>scp</command> will ask for passwords or passphrases if they are needed for authentication:</para>
<screen>
lenny /var/tmp&gt; scp Schedule.sdc.gz blob:/var/tmp/
lenny@blob's password:
Schedule.sdc.gz  100% |*****************************| 100 KB 00:00

lenny /var/tmp&gt;
</screen>
<para>Any file name may contain a host and user specification to indicate that the file is to be copied to/from that host.  Copies between two remote hosts are permitted.  See the Info pages for more information.</para>
<para>If you would rather use an FTP-like interface, use <command>sftp</command>:</para>
<screen>
lenny /var/tmp&gt; sftp blob
Connecting to blob...
lenny@blob's password:

sftp>cd /var/tmp

sftp> get Sch*
Fetching /var/tmp/Schedule.sdc.gz to Schedule.sdc.gz

sftp>bye

lenny /var/tmp&gt;
</screen>
</sect3>
<sect3 id="sect_10_03_04_05"><title>Authentication keys</title>
<para>The <command>ssh-keygen</command> command generates, manages and converts authentication keys for <command>ssh</command>.  It can create RSA keys for use by SSH protocol version 1 and RSA or DSA keys for use by SSH protocol version 2.</para>
<para>Normally each user wishing to use SSH with RSA or DSA authentication runs this once to create the authentication key in <filename>$HOME/.ssh/identity</filename>, <filename>id_dsa</filename> or <filename>id_rsa</filename>.  Additionally, the system administrator may use this to generate host keys for the system.</para>
<para>Normally this program generates the key and asks for a file in which to store the private key.  The public key is stored in a file with the same name but <emphasis>.pub</emphasis> appended.  The program also asks for a passphrase.  The passphrase may be empty to indicate no passphrase (host keys must have an empty passphrase), or it may be a string of arbitrary length.</para>
<para>There is no way to recover a lost passphrase.  If the passphrase is lost or forgotten, a new key must be generated and copied to the corresponding public keys.</para>
<para>We will study SSH keys in the exercises.  All information can be found in the man or Info pages.</para>
</sect3>
</sect2>
<sect2 id="sect_10_03_05"><title>VNC</title>
<para>VNC or Virtual Network Computing is in fact a remote display system which allows viewing a desktop environment not only on the local machine on which it is running, but from anywhere on the Internet and from a wide variety of machines and architectures, including MS Windows and several UNIX distributions.  You could, for example, run MS Word on a Windows NT machine and display the output on your Linux desktop.  VNC provides servers as well as clients, so the opposite also works and it may thus be used to display Linux programs on Windows clients.  VNC is probably the easiest way to have X connections on a PC.  The following features make VNC different from a normal X server or commercial implementations:</para>
<itemizedlist>
<listitem><para>No state is stored at the viewer side:  you can leave your desk and resume from another machine, continuing where you left.  When you are running a PC X server, and the PC crashes or is restarted, all remote applications that you were running will die.  With VNC, they keep on running.</para></listitem>
<listitem><para>It is small and simple, no installation needed, can be run from a floppy if needed.</para></listitem>
<listitem><para>Platform independent with the Java client, runs on virtually everything that supports X.</para></listitem>
<listitem><para>Sharable:  one desktop may be displayed on multiple viewers.</para></listitem>
<listitem><para>Free (GNU Public License).</para></listitem>
</itemizedlist>
<para>More information can be found in the VNC client man pages (<command>man <parameter>vncviewer</parameter></command>) or on the <ulink url="http://www.uk.research.att.com/vnc/">VNC website</ulink>.</para>
</sect2>

</sect1>
<sect1 id="sect_10_04"><title>Linux as a network appliance</title>
<sect2 id="sect_10_04_01"><title>Router</title>
<para>IP Routing is the process by which a host with multiple network connections decides where to deliver the IP datagrams that it has received.</para>
<para>While this is a fairly simple sentence, routing is a topic on which large volumes of text have been written.  Most people have fairly simple routing requirements, but get mixed up easily enough.  Detailed information can be found in the <ulink url="http://www.ibiblio.org/mdw/HOWTO/Net-HOWTO/index.html">Linux Networking HOWTO.</ulink>  For now, remember that you need at least two network interfaces for building a router.  While it is a sensible thing to install a firewall on every machine, hosts with only one network interface should never be configured as a router.</para>
<para>The Linux kernel has built-in support for routing functions. A Linux box can act either as an IP or IPX router for a fraction of the cost of a commercial router. Recent kernels include special options for machines acting primarily as routers, such as multi-casting and IP policy routing.</para>
<para>As with some other special functions, there is a project for running a Linux router off a floppy disk.  More information may be found at the <ulink url="http://www.linuxrouter.org">Linux router project homepage</ulink>.</para>
</sect2>
<sect2 id="sect_10_04_02"><title>Bridge</title>
<para>An Ethernet bridge is a device that controls data packets within a subnet in an attempt to cut down the amount of traffic. A bridge is usually placed between two separate groups of computers that talk within themselves, but not so much with the computers in the other group. A good example of this is to consider a cluster of MacIntoshes and a cluster of UNIX machines. Both of these groups of machines tend to be quite chatty among themselves, and the traffic they produce on the network causes collisions for the other machines who are trying to speak to one another. A bridge would be placed between these groups of computers. The job of the bridge is then to examine the destination of the data packets one at a time and decide whether or not to pass the packets to the other side of the Ethernet segment. The result is a faster, quieter network with less collisions.</para>
 
<para>The Linux kernel has built-in support for acting as an Ethernet bridge, which means that the different Ethernet segments it is connected to will appear as one Ethernet to the participants. Several bridges can work together to create even larger networks.  Linux bridges will inter-operate properly with other third party bridge products. Additional packages allow filtering based on IP, IPX or MAC addresses.</para>
<para>Additional information can be found in the <ulink url="http://www.ibiblio.org/mdw/HOWTO/mini/Bridge+Firewall.html">Linux Bridge+Firewall Mini-HOWTO</ulink> or in the <ulink url="http://www.ibiblio.org/mdw/HOWTO/mini/Bridge.html">Bridging mini-HOWTO</ulink>.</para>
</sect2>
<sect2 id="sect_10_04_03"><title>IP Masquerading and IP aliasing</title>
<para>With the appropriate modules loaded, the Linux kernel will act as the official connection point for hosts without an officially assigned IP address connecting to that machine, as with a workstation with the unresolvable IP address of 10.0.0.10.  This means cost reductions, since a lot of hosts may be connected to the Internet using a single connection.  Since the masquerading machine will not accept direct connections for the machines with the unresolvable addresses, it also contributes to increase security.</para>
<para>Extended information can be found in the <ulink url="http://www.ibiblio.org/mdw/HOWTO/IP-Masquerade-HOWTO/">IP Masquerade HOWTO</ulink>.</para>
<para>The IP aliasing feature of the Linux kernel provides the possibility of setting up multiple network addresses on the same network interface.  This is typically used for services that behave differently based on the address they listen on (for example, virtual domains).</para>
</sect2>
<sect2 id="sect_10_04_04"><title>Firewall and IP accounting</title>
<para>A firewall is a device that protects a private network from the public part (the Internet as a whole). It is designed to control the flow of packets based on the source, destination, port and packet type information contained in each packet.  In combination with the IP accounting features, the Linux kernel can perform packet logging.  A series of rules may be defined to have the firewall take actions upon a pattern match, such as increasing a counter or accepting or rejecting the packet.</para>
<para>Different firewall toolkits exist for Linux as well as built-in support in the kernel.  More information can be found in the <ulink url="http://www.ibiblio.org/mdw/HOWTO/Firewall-HOWTO.html">Firewall and Proxy Server HOWTO</ulink>.</para>
</sect2>
<sect2 id="sect_10_04_05"><title>Port forwarding</title>
<para>An increasing number of web sites are becoming interactive by having cgi-bins or Java applets that access some database or other service. Since this access may pose a security problem, the machine containing the database should not be directly connected to the Internet.</para>
<para>Port forwarding can provide an almost ideal solution to this access problem. On the firewall, IP packets that come in to a specific port number can be rewritten and forwarded to the internal server providing the actual service. The reply packets from the internal server are rewritten to make it appear that they came from the firewall.</para>
</sect2>
<sect2 id="sect_10_04_06"><title>Load balancing</title>
<para>Load balancing is achieved using the Network Address Translation features provided in the Linux kernel.  Network administrators can replace a single server that provides things like Web services with a logical pool of servers sharing a common IP address. Incoming connections are directed to a particular server using one load-balancing algorithm. The virtual server rewrites incoming and outgoing packets to give clients the appearance that only one server exists.</para>
<para>The Apache webserver itself comes with several modules that allow distribution of requests among servers, for redundancy, increased availability and so on.  One technique is the reverse proxy, which consists of having an Apache front-end server acting as a proxy for the back-end servers.  Another method allows seamless redirection of HTTP requests from one server to another.  This redirection can be used to target machines with under-utilized resources, thus providing fine-tuned, per-request balancing.  Detailed documentation is on the <ulink url="http://apache.org">Apache Web site</ulink>.</para>
</sect2>
<sect2 id="sect_10_04_07"><title>Proxy</title>
<para>The term proxy means <quote>to do something on behalf of someone else.</quote> In networking terms, a proxy server computer can act on the behalf of several clients. An HTTP proxy is a machine that receives requests for web pages from another machine (Machine A). The proxy gets the page requested and returns the result to Machine A. The proxy may have a cache containing the last <emphasis>n</emphasis> megabytes of requested pages, so if Machine B asks for the same page as Machine A, the copy in the cache will be returned instead. This allows efficient use of bandwidth resources and reduces response time. As a side effect, as client machines are not directly connected to the outside world this is a way of securing the internal network. A well-configured proxy can be as effective as a good firewall.</para>
<para>The two best known proxy server solutions for Linux are Squid and the Apache proxy module.  More information is located at the <ulink url="http://www.squid-cache.org">Squid</ulink> and <ulink url="http://www.apache.org">Apache</ulink> web sites.</para>
</sect2>
<sect2 id="sect_10_04_08"><title>Dial on demand</title>
<para>The purpose of dial on demand is to make it transparently appear that the users have a permanent connection to a remote site. Usually, there is a daemon who monitors the traffic of packets and where an interesting packet (interesting is defined usually by a set of rules/priorities/permissions) arrives it establishes a connection with the remote end. When the channel is idle for a certain period of time, it drops the connection.</para>
<para>Full information is in the <ulink url="http://www.ibiblio.org/mdw/HOWTO/Diald-HOWTO.html">Diald HOWTO</ulink>.</para>
</sect2>
<sect2 id="sect_10_04_09"><title>Tunneling, mobile IP and VPNs</title>
<para>The Linux kernel allows the tunneling (encapsulation) of protocols. It can do IPX tunneling through IP, allowing the connection of two IPX networks through an IP-only link. It can also do IP-IP tunneling, which it is essential for mobile IP support, multi-cast support and amateur radio.</para>
<para>Mobile IP specifies enhancements that allow transparent routing of IP datagrams to mobile nodes in the Internet. Each mobile node is always identified by its home address, regardless of its current point of attachment to the Internet. While situated away from its home, a mobile node is also associated with a care-of address, which provides information about its current point of attachment to the Internet. The protocol provides for registering the care-of address with a home agent. The home agent sends datagrams destined for the mobile node through a tunnel to the care-of address. After arriving at the end of the tunnel, each datagram is then delivered to the mobile node.</para>
<para>Point-to-Point Tunneling Protocol (PPTP) is a networking technology that allows the use of the Internet as a secure virtual private network (VPN). PPTP is integrated with the Remote Access Services (RAS) server which is built into Windows NT Server. With PPTP, users can dial into a local ISP or connect directly to the Internet, and access their network as if they were at their desks. PPTP is a closed protocol and its security has recently been compromised. It is highly recommended that you use other Linux based alternatives, since they rely on open standards which have been carefully examined and tested.</para>
<para>Detailed information can be found at the <ulink url="http://pptpclient.sourceforge.net/">PPTP Client Project homepage</ulink>, in the <ulink url="http://www.radio.org/linux/">Linux HAM HOWTO</ulink> and in the <ulink url="http://www.ibiblio.org/mdw/HOWTO/mini/VPN.html">VPN HOWTO</ulink>.</para>
</sect2>
<sect2 id="sect_10_04_10"><title>Network management station</title>
<para>There is a huge amount of tools available for network management, remote administration, monitoring, traffic analysis, security, backup and so forth.  An archive of the most important tools is kept at <ulink url="http://www.ibiblio.org/pub/Linux/system/network/">Metalab</ulink>.  Your local provider probably also has a mirror of one of the many sites providing Free/Open Source software.</para>
<para>Most Linux distributions support SNMP, the Simple Network Management Protocol.  Here, too, a lot of applications are available.  More information can be found on the <ulink url="http://linas.org/linux/NMS.html">Linux SNMP Network Management Tools site</ulink>.</para>
</sect2>
</sect1>
<sect1 id="sect_10_05"><title>Security</title>
<sect2 id="sect_10_05_01"><title>Introduction</title>
<para>As soon as a computer is connected to the network, all kinds of abuse becomes possible, be it UNIX-based or any other system.  Admittedly, mountains of papers have been spilled on this subject and it would lead us too far to discuss the subject of security in detail, but there are a couple of fairly logical things even a novice user can do to obtain a very secure system, because most break-ins are the result of ignorant or careless users.</para>
<para>Maybe you are asking yourself if this all applies to you, using your computer at home or working at your office on a desktop in a fairly protected environment.  The questions you should be asking yourself, however, are more on the lines of:</para>
<itemizedlist>
<listitem><para>Do you want to be in control of your own system?</para></listitem>
<listitem><para>Do you want to (unwittingly) participate in criminal activities?</para></listitem>
<listitem><para>Do you want your equipment to be used by someone else?</para></listitem>
<listitem><para>Do you want to take risks on losing your Internet connection?</para></listitem>
<listitem><para>Do you want to rebuild your system every time it has been hacked?</para></listitem>
<listitem><para>Do you want to risk personal or other data loss?</para></listitem>
</itemizedlist>
<para>Presuming you don't, we will quickly list the steps you can take to secure your machine.  Extended information can be found in the <ulink url="http://www.ibiblio.org/mdw/HOWTO/Security-HOWTO.html">Linux Security HOWTO</ulink>.</para>
</sect2>
<sect2 id="sect_10_005_02"><title>Services</title>
<para>The goal is to run as few services as possible.  If the number of ports that are open for the outside world are kept to a minimum, this is all the better to keep an overview.  If services can't be turned off for the local network, try to at least disable them for outside connections.</para>
<para>A rule of thumb is that if you don't recognize a particular service, you probably won't need it anyway.  Also keep in mind that some services are not really meant to be used over the Internet.  Don't rely on what <emphasis>should</emphasis> be running, check which services are listening on what TCP ports using the <command>netstat</command> command:</para>
<screen>
[elly@mars ~] netstat -l | grep tcp
tcp     0      0 *:32769                 *:*      LISTEN
tcp     0      0 *:32771                 *:*      LISTEN
tcp     0      0 *:printer               *:*      LISTEN
tcp     0      0 *:kerberos_master       *:*      LISTEN
tcp     0      0 *:sunrpc                *:*      LISTEN
tcp     0      0 *:6001                  *:*      LISTEN
tcp     0      0 *:785                   *:*      LISTEN
tcp     0      0 localhost.localdom:smtp *:*      LISTEN
tcp     0      0 *:ftp                   *:*      LISTEN
tcp     0      0 *:ssh                   *:*      LISTEN
tcp     0      0 ::1:x11-ssh-offset      *:*      LISTEN
</screen>
<para>Things to avoid:</para>
<itemizedlist>
<listitem><para><command>exec</command>, <command>rlogin</command> and <command>rsh</command>, and <command>telnet</command> just to be on the safe side.</para></listitem>
<listitem><para>X11 on server machines.</para></listitem>
<listitem><para>No lp if no printer is physically attached.</para></listitem>
<listitem><para>No MS Windows hosts in the network, no Samba required.</para></listitem>
<listitem><para>Don't allow FTP unless an FTP server is required.</para></listitem>
<listitem><para>Don't allow NFS and NIS over the Internet, disable all related services on a stand-alone installation.</para></listitem>
<listitem><para>Don't run an MTA if you're not actually on a mail server.</para></listitem>
<listitem><para>...</para></listitem>
</itemizedlist>
<para>Stop running services using the <command>chkconfig</command> command, the initscripts or by editing the <command>(x)inetd</command> configuration files.
</para>
</sect2>
<sect2 id="sect_10_05_03"><title>Update regularly</title>
<para>Its ability to adapt quickly in an ever changing environment is what makes Linux thrive.  But it also creates a possibility that security updates have been released even while you are installing a brand new version, so the first thing you should do (and this goes for about any OS you can think of) after installing is getting the updates as soon as possible.  After that, update <emphasis>all</emphasis> the packages you use regularly.</para>
<para>RedHat provides the <command>up2date</command> utility to automatically keep all packages current with the release.  See <xref linkend="chap_07" /> for more on installing packages.</para>
<para>Some updates may require new configuration files, and old files may be replaced.  Check the documentation, and ensure that everything runs normal after updating.</para>
<para>Most Linux distributions provide mailing list services for security update announcements.  General Linux only security issues are reported among others at <ulink url="http://linuxsecurity.com">Linuxsecurity.com</ulink>.</para>
<para>Updating is an ongoing process, so it should be an almost daily habit.</para>
</sect2>
<sect2 id="sect_10_05_04"><title>Firewalls and access policies</title>
<sect3 id="sect_10_05_04_01"><title>What is a firewall?</title>
<para>In the previous section we already mentioned firewall capabilities in Linux.  While firewall administration is one of the tasks of your network admin, you should know a couple of things about firewalls.</para>
<para><emphasis>Firewall</emphasis> is a vague term that can mean anything that acts as a protective barrier between us and the outside world, generally the Internet.  A firewall can be a dedicated system or a specific application that provides this functionality. Or it can be a combination of components, including various combinations of hardware and software. Firewalls are built from <quote>rules</quote> that are used to define what is allowed to enter and/or exit a given system or network.</para>
<para>After disabling unnecessary services, we now want to restrict accepted services as to allow only the minimum required connections.  A fine example is working from home: only the specific connection between your office and your home should be allowed, connections from other machines on the Internet should be blocked.</para>
</sect3>
<sect3 id="sect_10_05_04_02"><title>Packet filters</title>
<para>The first line of defense is a <emphasis>packet filter</emphasis>, which can look inside IP packages and make decisions based on the content.  RedHat provides the <command>firewall-config</command> tool as a front-end for systems running the <command>ipchains</command> (2.2 kernel).  Newer systems (2.4 kernel) use <command>iptables</command>, a next generation packet filter for Linux, and the Gnome Lokkit tool.  This tool was only created to provide an easy interface for normal users.  It sets up a basic firewall configuration for a desktop, a dial-up or cable modem connection, and that's about it.  It should not be used in larger environments.</para>
<para>One of the most noteworthy enhancements in the newer kernels is the <emphasis>stateful inspection</emphasis> feature, which not only tells what is inside a packet, but also detects if a packet belongs or is related to a new or existing connection.</para>
<para>Development is ongoing, so it is best to check with each new version of a distribution which system is being used.</para>
</sect3>
<sect3 id="sect_10_05_04_03"><title>TCP wrappers</title>
<para>TCP wrapping provides much the same results as the packet filters, but works differently.  The wrapper actually accepts the connection attempt, then examines configuration files and decides whether to accept or reject the connection request.  It controls connections at the application level rather than at the network level.</para>
<para>TCP wrappers are typically used with <command>xinetd</command> to provide host name and IP-address-based access control.  In addition, these tools include logging and utilization management capabilities that are easy to configure.</para>
<para>The advantages of TCP wrappers are that the connecting client is unaware that wrappers are used, and that they operate separately from the applications they protect.</para>
<para>The host based access is controlled in the <filename>hosts.allow</filename> and <filename>hosts.deny</filename> files.  More information can be found in the TCP wrapper documentation files and in the man pages for these files, which contain examples.</para>
</sect3>
<sect3 id="sect_10_05_04_04"><title>Proxies</title>
<para>Proxies can perform various duties, not all of which have much to do with security. But the fact that they are an intermediary make proxies a good place to enforce access control policies, limit direct connections through a firewall, and control how the network behind the proxy looks to the Internet.</para>
<para>Usually in combination with a packet filter, but sometimes all by themselves, proxies provide an extra level of control.  More information can be found in the <ulink url="http://www.tldp.org/HOWTO/Firewall-HOWTO.html">Firewall HOWTO</ulink> or on the Squid website.</para>
</sect3>
<sect3 id="sect_10_05_04_05"><title>Access to individual applications</title>
<para>Some servers may have their own access control features.  Common examples include Samba, X11, Bind, Apache and CUPS.  For every service you want to offer check which configuration files apply.</para>
</sect3>
<sect3 id="sect_10_05_04_06"><title>Log files</title>
<para>If anything, the UNIX way of logging all kinds of activities into all kinds of files confirms that <quote>it is doing something.</quote>  Of course, log files should be checked regularly, manually or automatically.  Firewalls and other means of access control tend to create huge amounts of log files, so the trick is to try and only log abnormal activities.</para></sect3>
</sect2>
<sect2 id="sect_10_05_05"><title>Intrusion detection</title>

<para> Intrusion Detection Systems are designed to catch what might have gotten past the firewall. They can either be designed to catch an active break-in attempt in progress, or to detect a successful break-in after the fact. In the latter case, it is too late to prevent any damage, but at least we have early awareness of a problem.  There are two basic types of IDS:  those protecting networks, and those protecting individual hosts.</para>
<para> For host based IDS, this is done with utilities that monitor the file system for changes. System files that have changed in some way, but should not change, are a dead give-away that something is amiss. Anyone who gets in and gets root access will presumably make changes to the system somewhere. This is usually the very first thing done, either so he can get back in through a backdoor, or to launch an attack against someone else, in which case, he has to change or add files to the system.  Some systems come with the <command>tripwire</command> monitoring system, which is documented at the <ulink url="http://www.tripwire.org">Tripwire Open Source Project</ulink> website.</para> 
<para>Network intrusion detection is handled by a system that sees all the traffic that passes the firewall (not by portscanners, which advertise usable ports).  <ulink url="http://www.snort.org">Snort</ulink> is an Open Source example of such a program.  Whitehats.com features an open Intrusion detection database, <ulink url="http://www.whitehats.com">arachNIDS</ulink>.  </para>
</sect2>
<sect2 id="sect_10_05_06"><title>More tips</title>
<para>Some general things you should keep in mind:</para>
<itemizedlist>
<listitem><para>Do not allow root logins.  UNIX developers came up with the <command>su</command> over two decades ago for extra security.</para></listitem>
<listitem><para>Take passwords seriously.  Use shadow passwords.  Change your passwords regularly.</para></listitem>
<listitem><para>Try to always use SSH.  Avoid <command>telnet</command>, FTP clients, and other client programs, such as a POP3 mail client, which send unencrypted passwords over the network.</para></listitem>
<listitem><para>Limit resources using <command>quota</command> and/or <command>ulimit</command>.</para></listitem>
<listitem><para>The mail for root should be delivered to, or at least read by, an actual person.</para></listitem>
<listitem>
<para>The <ulink url="http://www.sans.org">SANS institute</ulink> has more tips and tricks, sorted per distribution, with mailing list service.  They advertise the use of the <ulink url="http://www.bastille-linux.org">Bastille hardening system</ulink> for RedHat users.</para></listitem>
<listitem><para>Check the origin of new software, get it from a trusted place/site.  Verify new packages before installing.</para></listitem>
<listitem><para>When using a non-permanent Internet connection, shut it down as soon as you don't need it anymore.</para></listitem>
<listitem><para>Run private services on odd ports instead of the ones expected by possible hackers.</para></listitem>
<listitem><para>Know your system.  After a while, you can almost feel when something is happening.</para></listitem>
</itemizedlist>
</sect2>
<sect2 id="sect_10_05_07"><title>Have I been hacked?</title>
<para>How can you tell?  This is a checklist of suspicious events:</para>
<itemizedlist>
<listitem><para>Mysterious open ports, strange processes.</para></listitem>
<listitem><para>System utilities (common commands) behaving strange.</para></listitem>
<listitem><para>Login problems.</para></listitem>
<listitem><para>Unexplained bandwidth usage.</para></listitem>
<listitem><para>Damaged or missing log files, syslog daemon behaving strange.</para></listitem>
<listitem><para>Interfaces in unusual modes.</para></listitem>
<listitem><para>Unexpectedly modified configuration files.</para></listitem>
<listitem><para>Strange entries in shell history files.</para></listitem>
<listitem><para>Unidentified temporary files.</para></listitem>
</itemizedlist>
</sect2>
<sect2 id="sect_10_05_08"><title>Recovering from intrusion</title>
<para>In short, stay calm.  Then take the following actions in this order:</para>
<itemizedlist>
<listitem><para>Disconnect the machine from the network.</para></listitem>
<listitem><para>Try to find out as much as you can about how your security was breached.</para></listitem>
<listitem><para>Backup important non-system data.</para></listitem>
<listitem><para>Re-install the system.</para></listitem>
<listitem><para>Use new passwords.</para></listitem>
<listitem><para>Restore from system and data backups.</para></listitem>
<listitem><para>Apply all available updates.</para></listitem>
<listitem><para>Re-examine the system:  block off unnecessary services, check firewall rules and other access policies.</para></listitem>
<listitem><para>Reconnect.</para></listitem>
</itemizedlist>
</sect2>
</sect1>
<sect1 id="sect_10_06"><title>Summary</title>
<para>Linux and networking go hand in hand.  The Linux kernel has support for all common and most uncommon network protocols.  The standard UNIX networking tools are provided in each distribution.  Next to those, most distributions offer tools for easy network installation and management.</para>
<para>Linux is well know as a stable platform for running various Internet services, the amount of Internet software is endless.  Like UNIX, Linux can be just as well used and administered from a remote location, using one of several solutions for remote execution of programs.</para>
<para>We briefly touched the subject of security.  Linux is an ideal firewall system, light and cheap, but can be used in several other network functions such as routers and proxy servers.</para>
<para>Increasing network security is mainly done by applying frequent updates and common sense.</para>
</sect1>
<sect1 id="sect_10_07"><title>Exercises</title>

<sect2 id="sect_10_07_01"><title>General networking</title>
<itemizedlist>
<listitem><para>Display network information for your workstation: IP address, routes, name servers.</para></listitem>
<listitem><para>Suppose no DNS is available.  What would you do to reach your neighbour's machine without typing the IP address all the time?</para></listitem>
<listitem><para>How would you permanently store proxy information for a text mode browser such as <command>links</command>?</para></listitem>
<listitem><para>Which name servers handle the redhat.com domain?</para></listitem>
<listitem><para>Send an E-mail to your local account.  Try two different ways to send and read it.  How can you check that it really arrived?</para></listitem>
<listitem><para>Does your machine accept anonymous FTP connections?  How do you use the <command>ncftp</command> program to authenticate with your user name and password?</para></listitem>
<listitem><para>Does your machine run a web server?  If not, make it do so.  Check the log files!</para></listitem>
</itemizedlist>
</sect2>

<sect2 id="sect_10_07_02"><title>Remote connections</title>
<itemizedlist>
<listitem><para>From your local workstation, display a graphical application, such as <command>xclock</command> on your neighbour's screen.  The necessary accounts will have to be set up.  Use a secure connection!</para></listitem>
<listitem><para>Set up SSH keys so you can connect to your neighbour's machine without having to enter a password.</para></listitem>
<listitem><para>Make a backup copy of your home directory in <filename>/var/tmp</filename> on your neighbour's <quote>backup server,</quote> using <command>scp</command>.  Archive and compress before starting the data transfer!  Connect to the remote host using <command>ssh</command>, unpack the backup, and put one file back on the original machine using <command>sftp</command>.</para></listitem>
</itemizedlist>
</sect2>

<sect2 id="sect_10_07_03"><title>Security</title>
<itemizedlist>
<listitem><para>Make a list of open (listening) ports on your machine.</para></listitem>
<listitem><para>Supposing you want to run a webserver.  Which services would you deactivate?  How would you do that?</para></listitem>
<listitem><para>Install available updates.</para></listitem>
<listitem><para>How can you see who connected to your system?</para></listitem>
<listitem><para>Make a repetitive job that reminds you to change your password every month, and preferably the <emphasis>root</emphasis> password as well.</para></listitem>
</itemizedlist>

</sect2>
</sect1>
</chapter>
