<?xml version ='1.0' encoding='ISO-8859-1'?>
<chapter id="chap_09">
<title>Fundamental Backup Techniques</title>
<abstract><para>Accidents will happen sooner or later.  In this chapter, we'll discuss how to get data to a safe place using other hosts, floppy disks, CD-ROMs and tapes.  We will also discuss the most popular compressing and archiving commands.</para>
<para>Upon completion of this chapter, you will know how to:</para>
<para>
<itemizedlist>
<listitem><para>Make, query and unpack file archives</para></listitem>
<listitem><para>Handle floppy disks and make a boot disk for your system</para></listitem>
<listitem><para>Write CD-ROMs</para></listitem>
<listitem><para>Find documentation to use other backup devices</para></listitem>
</itemizedlist>
</para>

</abstract>

<sect1><title>Introduction</title>
<para>Although Linux is one of the safest operating systems in existence, and even if it is designed to keep on going, data can get lost.  Data loss is most often the consequence of user errors, but occasionally a system fault, such as a power failure, is the cause, so it's always a good idea to keep an extra copy of sensitive and/or important data.</para>
<sect2><title>Preparing your data</title>
<sect3><title>Compressing with <command>tar</command></title>
<para>In some cases, you will want to compress your data so that they don't take up more space than usual.  In Linux, this is commonly done with the <command>tar</command> command.  <command>tar</command> was originally designed to archive tapes, but it can also make a <emphasis>tarball</emphasis>, a file containing other compressed files.</para>
<para><command>tar</command> has many options, the most important ones cited below:</para>
<itemizedlist>
<listitem><para>v: verbose</para></listitem>
<listitem><para>t: test, shows content of a tarball</para></listitem>
<listitem><para>x: extract archive</para></listitem>
<listitem><para>c: create archive</para></listitem>
<listitem><para>-f <filename>archivedevice</filename>: use <filename>archivedevice</filename> as source/destination for the tarball, the device defaults to the first tape device (usually <filename>/dev/st0</filename> or something similar)</para></listitem>
</itemizedlist>
<para>Refer to the <command>tar</command> man page for more information.</para>
<note><title>Use GNU tar for compatibility</title>
<para>The archives made with a proprietary <command>tar</command> version on one system, may be incompatible with <command>tar</command> on another proprietary system.  This may cause much headaches, such as if the archive needs to be recovered on a system that doesn't exist anymore.  Use the GNU <command>tar</command> version on all systems to prevent your system admin from bursting into tears.  Linux always uses GNU tar.  When working on other UNIX machines, enter <command>tar --help</command> to find out which version you are using.  Contact your system admin if you don't see the word GNU somewhere.</para></note>
<para>In the example below, an archive is created and unpacked.</para>
<screen>
gaby:~&gt;ls images/
me+tux.jpg  nimf.jpg

gaby:~&gt;tar cvf images-in-a-dir.tar images/
images/
images/nimf.jpg
images/me+tux.jpg

gaby:~&gt;cd images

gaby:~/images&gt;tar cvf images-without-a-dir.tar *.jpg
me+tux.jpg
nimf.jpg

gaby:~/images&gt;cd

gaby:~&gt;ls */*.tar
images/images-without-a-dir.tar

gaby:~&gt;ls *.tar
images-in-a-dir.tar 

gaby:~&gt;tar xvf images-in-a-dir.tar 
images/
images/nimf.jpg
images/me+tux.jpg

gaby:~&gt;tar tvf images/images-without-dir.tar 
-rw-r--r-- gaby/gaby  42888 1999-06-30 20:52:25 me+tux.jpg
-rw-r--r-- gaby/gaby   7578 2000-01-26 12:58:46 nimf.jpg

gaby:~&gt;tar xvf images/images-without-a-dir.tar 
me+tux.jpg
nimf.jpg

gaby:~&gt;ls *.jpg
me+tux.jpg  nimf.jpg
</screen>
<para>This example also illustrates the difference between a tarred directory and a bunch of tarred files.  It is advisable to only compress directories, so files don't get spread all over when unpacking the tarball (which may be on another system, where you may not know which files where already there and which are the ones from the archive).</para>
<para>When a tape drive is connected to your machine and configured by your system administrator, the file names ending in <filename>.tar</filename> are replaced with the tape device name, for example:</para>
<para><command>tar cvf <filename>/dev/tape</filename> mail/</command></para>
<para>The directory <filename>mail</filename> and all the files it contains are compressed into a file that is written on the tape immediately.  A content listing is displayed because we used the verbose option.</para>
</sect3>
<sect3><title>Compressing with <command>gzip</command> or <command>bzip2</command></title>
<para>
Data, including tarballs, can be compressed using zip tools.  The <command>gzip</command> command will add the suffix .gz to the file name and remove the original file.
</para>
<screen>
jimmy:~&gt;ls -la | grep tar
-rw-rw-r--    1 jimmy  jimmy	61440 Jun  6 14:08 images-without-dir.tar

jimmy:~&gt;gzip images-without-dir.tar 

jimmy:~&gt;ls -la images-without-dir.tar.gz 
-rw-rw-r--    1 jimmy  jimmy	50562 Jun  6 14:08 images-without-dir.tar.gz
</screen>
<para>Uncompress gzipped files with the <command>-d</command> option.</para>
<para><command>bzip</command> works in a similar way, but uses an improved compression algorithm, thus creating smaller files.</para>

<para>Linux software packages are often distributed in a gzipped tarball.  The sensible thing to do after unpacking that kind of archives is find the <filename>README</filename> and read it.  It will generally contain guidelines to installing the package.</para>
<para>The GNU <command>tar</command> command is aware of gzipped files.  Use the command</para>
<para><cmdsynopsis><command>tar zxvf <filename>file.tar.gz</filename></command></cmdsynopsis></para>
<para>for unzipping and untarring <filename>.tar.gz</filename> or <filename>.tgz</filename> files.</para> 
</sect3>
<sect3><title>Transporting your data</title>
<para>Saving copies of your data on another host is an accurate way of making backups.  See <xref linkend="chap_10" />, Communications, for more information.</para>
</sect3>
</sect2>
</sect1>
<sect1>
<title>Moving your data to a backup device</title>
<sect2><title>Making a copy on a floppy disk</title>
<sect3><title>Formatting the floppy</title>
<para>On most Linux systems, users have access to the floppy disk device.  The name of the device may vary depending on the size and number of floppy drives, contact your system admin if you are unsure.  On sensibly administered systems, there will likely be a link <filename>/dev/floppy</filename> pointing to the right device, probably <filename>/dev/fd0</filename> (the auto-detecting floppy device) or <filename>/dev/fd0H1440</filename> (set for 1,44MB floppies).</para>
<para>
<command>fdformat</command> is the low-level floppy disk formatting tool.  It has the device name of the floppy disk as an option.  <command>fdformat</command> will display an error when the floppy is read-protected.
</para>
<screen>
emma:~&gt;fdformat /dev/fd0H1440
Double-sided, 80 tracks, 18 sec/track. Total capacity 1440 kB.
Formatting ... done
Verifying ... done
emma:~&gt;
</screen>
<para>The <command>mformat</command> command (from the mtools package) is used to create DOS-compatible floppies which can then be accessed using the <command>mcopy</command>, <command>mdir</command> and other m-commands.</para>
<para>Graphical tools are also available.</para>
<figure><title>Floppy formatter</title>
<mediaobject>
<imageobject>
<imagedata fileref="images/formatfloppy.eps" format="EPS"></imagedata></imageobject><imageobject>
<imagedata fileref="images/formatfloppy.jpg" format="JPG"></imagedata>
</imageobject>
</mediaobject>
</figure>
<para>After the floppy is formatted, it can be mounted into the file system and accessed as a normal, be it small, directory, usually via the <filename>/mnt/floppy</filename> entry.</para>
<para>Almost every Linux distribution provides the <command>mkbootdisk</command> utility, which makes a floppy from which the current system can boot.</para>
</sect3>
<sect3><title>Using the <command>dd</command> command to dump data</title>
<para>The <command>dd</command> command can be used to put data on a disk, or get it off again, depending on the given input and output devices.  An example:</para>
<screen>
gaby:~&gt;dd if=images-without-dir.tar.gz of=/dev/fd0H1440
98+1 records in
98+1 records out

gaby~&gt;dd if=/dev/fd0H1440 of=/tmp/images.tar.gz
2880+0 records in
2880+0 records out

gaby:~&gt;ls /tmp/images*
/tmp/images.tar.gz

</screen>
<para>Note that the dumping is done on an unmounted device.  Floppies created using this method will not be mountable in the file system, but it is of course the way to go for creating boot or rescue disks.  For more information on the possibilities of <command>dd</command>, read the man pages.</para>
<note><title>Dumping disks</title>
<para>The <command>dd</command> command can also be used to make a raw dump of an entire hard disk.</para></note>
</sect3>
</sect2>
<sect2><title>Making a copy with a CD-writer</title>
<para>On some systems users are allowed to use the CD-writer device.  Your data will need to be formatted first.  Use the <command>mkisofs</command> command to do this in the directory containing the files you want to backup.  Check with <command>df</command> that enough disk space is available, because a new file about the same size as the entire current directory will be created:</para>
<screen>
[rose@blob recordables] df -h .
Filesystem            Size  Used Avail Use% Mounted on
/dev/hde5              19G   15G  3.2G  82% /home

[rose@blob recordables] du -h -s .
325M    .

[rose@blob recordables] mkisofs -J -r -o cd.iso .
&lt;--snap--&gt;
making a lot of conversions
&lt;--/snap--&gt;
98.95% done, estimate finish Fri Apr  5 13:54:25 2002
Total translation table size: 0
Total rockridge attributes bytes: 35971
Total directory bytes: 94208
Path table size(bytes): 452
Max brk space used 37e84
166768 extents written (325 Mb)
</screen>
<para>The <option>-J</option> and <option>-r</option> options are used to make the CD-ROM mountable on different systems, see the man pages for more.  After that, the CD can be created using the <command>cdrecord</command> tool with appropriate options:</para>
<screen>
[rose@blob recordables] cdrecord -dev 0,0,0 -speed=8 cd.iso
Cdrecord 1.10 (i686-pc-linux-gnu) (C) 1995-2001 Joerg Schilling
scsidev: '0,0,0'
scsibus: 0 target: 0 lun: 0
Linux sg driver version: 3.1.20
Using libscg version 'schily-0.5'
Device type    : Removable CD-ROM
Version        : 0
Response Format: 1
Vendor_info    : 'HP      '
Identifikation : 'CD-Writer+ 8100 '
Revision       : '1.0g'
Device seems to be: Generic mmc CD-RW.
Using generic SCSI-3/mmc CD-R driver (mmc_cdr).
Driver flags   : SWABAUDIO
Starting to write CD/DVD at speed 4 in write mode for single session.
Last chance to quit, starting real write in 0 seconds. Operation starts.
</screen>
<para>Depending on your CD-writer, you now have the time to smoke a cigarette and/or get a cup of coffee.  Upon finishing the job, you will get a confirmation message:</para>
<screen>
Track 01: Total bytes read/written: 341540864/341540864 (166768 sectors).
</screen>
<para>There are some graphical tools available to make it easier on you.  One of the popular ones is <command>xcdroast</command>, which is freely available.  Both the KDE and Gnome desktop managers have facilities to make your own CDs.</para>
<figure><title>Xcdroast</title>
<mediaobject>
<imageobject>
<imagedata fileref="images/xcdroast.eps" format="EPS"></imagedata></imageobject>
<imageobject>
<imagedata fileref="images/xcdroast.png" format="PNG"></imagedata>
</imageobject>
</mediaobject>
</figure>



</sect2>
<sect2><title>Backups on/from jazz drives, USB devices and such</title>
<para>These devices are usually mounted into the file system.  After the mount procedure, they are accessed as normal directories, so you can use the standard commands for manipulating files.</para>
<para>In the example below, images are copied from a USB camera to the hard disk:</para>
<screen>
robin:~&gt;mount /mnt/camera

robin:~&gt;mount | grep camera
/dev/sda1 on /mnt/camera type vfat (rw,nosuid,nodev)

robin:~&gt;cp -R /mnt/camera/* images/

robin:~&gt;umount /mnt/camera
</screen>
<para>Likewise, a jazz drive may be mounted on <filename>/mnt/jazz</filename>.</para>
<para>Appropriate lines should be added in <filename>/etc/modules.conf</filename> and <filename>/etc/fstab</filename> to make this work.  Refer to specific hardware HOWTOs for more information.</para> 
</sect2>
<sect2><title>Backing up data using a tape device</title>
<para>This is done using <command>tar</command> (see above).  The <command>mt</command> tool is used for controlling the magnetic tape device, like <filename>/dev/st0</filename>.  Entire books have been written about tape backup, therefore, refer to our reading-list in <xref linkend="app2" /> for more information.  Keep in mind that databases might need other backup procedures because of their architecture.</para>
<para>The appropriate backup commands are usually put in one of the <emphasis>cron</emphasis> directories in order to have them executed on a regular basis.  In larger environments, the freely available <ulink url="http://www.amanda.org">Amanda</ulink> backup suite or a commercial solution may be implemented to back up multiple machines.  Working with tapes, however, is a system administration task beyond the scope of this document.</para>
</sect2>
</sect1>
<sect1><title>Summary</title>
<para>Here's a list of the commands involving file backup:</para>
<table frame="all"><title>Backup commands</title>
<tgroup cols="2" align="left" colsep="1" rowsep="1">
<thead>
<row><entry>Command</entry><entry>Meaning</entry></row>
</thead>
<tbody>
<row><entry><command>bzip2</command></entry><entry>A block-sorting file compressor.</entry></row>
<row><entry><command>cdrecord</command></entry><entry>Record audio or data Compact Disks from a master.</entry></row>
<row><entry><command>dd</command></entry><entry>Convert and copy a file</entry></row>
<row><entry><command>fdformat</command></entry><entry>Low-level formats a floppy disk.</entry></row>
<row><entry><command>gzip</command></entry><entry>Compress or expand files.</entry></row>
<row><entry><command>mcopy</command></entry><entry>Copy MSDOS files to/from UNIX.</entry></row>
<row><entry><command>mdir</command></entry><entry>Display an MSDOS directory.</entry></row>
<row><entry><command>mformat</command></entry><entry>Add an MSDOS file system to a low-level formatted floppy disk.</entry></row>
<row><entry><command>mkbootdisk</command></entry><entry>Creates a stand-alone boot floppy for the running system.</entry></row>
<row><entry><command>mount</command></entry><entry>Mount a file system (integrate it with the current file system by connecting it to a mount point).</entry></row>
<row><entry><command>tar</command></entry><entry>Tape archiving utility, also used for making archives on disk instead of on tape.</entry></row>
<row><entry><command>umount</command></entry><entry>Unmount file systems.</entry></row>
</tbody>
</tgroup>
</table>
</sect1>
<sect1><title>Exercises</title>
<itemizedlist>
<listitem><para>Make a backup copy of your home directory in <filename>/var/tmp</filename> using the <command>tar</command> command.  Then further compress the file using <command>gzip</command> or <command>bzip2</command>.  Make it a clean tarred file, one that doesn't make a mess when unpacking.</para></listitem>
<listitem><para>Format a floppy and put some files from your home directory on it.  Switch floppies with another trainee and recover his/her floppy in your home directory.</para></listitem>
<listitem><para>DOS format the floppy.  Use the <emphasis>mtools</emphasis> to put and delete files on it.</para></listitem>
<listitem><para>What happens to an unformatted floppy when you want to mount it into the file system?</para></listitem>
</itemizedlist>
</sect1>
</chapter>
