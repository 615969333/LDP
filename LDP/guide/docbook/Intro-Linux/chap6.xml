<?xml version='1.0' encoding='ISO-8859-1'?>
<chapter id="chap_06">
<title>Text editors</title>
<abstract>
<para>In this chapter, we will discuss the importance of mastering an editor.  We will focus mainly on the Improved <command>vi</command> editor.</para>
<para>After finishing this chapter, you will be able to:</para>
<para>
<itemizedlist>
<listitem><para>Open and close files in text mode</para></listitem>
<listitem><para>Edit files</para></listitem>
<listitem><para>Search text</para></listitem>
<listitem><para>Undo errors</para></listitem>
<listitem><para>Merge files</para></listitem>
<listitem><para>Recover lost files</para></listitem>
</itemizedlist>
</para>
</abstract>
<sect1 id="sect_06_01"><title>Text editors</title>
<sect2 id="sect_06_01_01"><title>Why should I use an editor?</title>
<para>It is very important to be able to use at least one text mode editor.  Knowing how to use an editor on your system is the first step to independence.</para>
<para>We will need to master an editor by the next chapter as we need it to edit files that influence our environment.  As an advanced user, you may want to start writing scripts, or books, develop websites or new programs.  Mastering an editor will immensely improve your productivity as well as your capabilities.</para>
</sect2>
<sect2 id="sect_06_01_02"><title>Which editor should I use?</title>
<para>Since graphical editors, running in an X session, such as Office suites and the like, have very similar interfaces to the ones used on Windows or MacIntosh machines, we won't discuss them here.  Please refer to the help function these commands usually include, or to the user manuals.</para>
<para>Instead, our focus is on text editors, which can also be used on systems without a graphical environment.  The additional advantage of mastering a text editor is in using it on remote machines.  Since you don't need to transfer the entire graphical environment over the network, working with text editors tremendously improves network speed.</para>
<para>There are, as usual, multiple ways to handle the problem.  Let's see what editors are commonly available:</para>
<sect3 id="sect_06_01_02_01"><title>Pico</title>
<para>Pico is a simple display-oriented text editor in the style of the Pine Composer (Pine Is Not Elm, see <xref linkend="chap_10" /> on mail clients).  As with Pine, commands are displayed at the bottom of the screen, and context-sensitive help is provided.  As characters are typed they are immediately inserted into the text.</para>
<para>Editing commands are entered using Control-key combinations.  As a work-around for communications programs that swallow certain control characters, you can emulate a control key by pressing [ESCAPE] twice, followed by the desired control character.  The editor has five basic features: paragraph justification, searching, block cut/paste, a spell-checker, and a file browser.  See the Info pages for more details.</para>
<para>While <command>pico</command> is a fine editor for beginners, it has two main disadvantages: it is not completely Open Source software, and advanced users want more out of an editor.</para>
</sect3>
<sect3 id="sect_06_01_02_02"><title>GNU Emacs</title>
<para>Emacs is the extensible, customizable, self-documenting, real-time display editor, known on many UNIX and other systems.  The text being edited is visible on the screen and is updated automatically as you type your commands.  It is a real-time editor because the display is updated very frequently, usually after each character or pair of characters you type.  This minimizes the amount of information you must keep in your head as you edit.  Emacs is called advanced because it provides facilities that go beyond simple insertion and deletion:  controlling subprocesses; automatic indentation of programs; viewing two or more files at once; editing formatted text; and dealing in terms of characters, words, lines, sentences, paragraphs, and pages, as well as expressions and comments in several different programming languages.</para>
<para><emphasis>Self-documenting</emphasis> means that at any time you can type a special character, [CTRL]-[H], to find out what your options are.  You can also use it to find out what any command does, or to find all the commands that pertain to a topic.  <emphasis>Customizable</emphasis> means that you can change the definitions of Emacs commands in little ways.  For example, if you use a programming language in which comments start with `&lt;**' and end with `**&gt;', you can tell the Emacs comment manipulation commands to use those strings.  Another sort of customization is rearrangement of the command set.  For example, if you prefer the four basic cursor motion commands (up, down, left and right) on keys in a diamond pattern on the keyboard, you can rebind the keys that way.</para>
<para><emphasis>Extensible</emphasis> means that you can go beyond simple customization and write entirely new commands, programs in the Lisp language that are run by Emacs's own Lisp interpreter.  Emacs is an <emphasis>online</emphasis> extensible system, which means that it is divided into many functions that call each other, any of which can be redefined in the middle of an editing session.  Almost any part of Emacs can be replaced without making a separate copy of all of Emacs.  Most of the editing commands of Emacs are written in Lisp already; the few exceptions could have been written in Lisp but are written in C for efficiency.  Although only a programmer can write an extension, anybody can use it afterward.</para>
<para>When run under the X Window System, Emacs provides its own menus and convenient bindings to mouse buttons.  But Emacs can provide many of the benefits of a window system on a text-only terminal.  For instance, you can look at or edit several files at once, move text between files, and edit files while running shell commands.</para> 

</sect3>
<sect3 id="sect_06_01_02_03"><title>Vi(m)</title>
<para>Vim stands for Vi IMproved.  It used to be Vi IMitation, but there are so many improvements that a name change was appropriate.  Vim is a text editor which includes almost all the commands from the UNIX program <command>vi</command> and a lot of new ones.</para>
<para>Commands in the <command>vi</command> editor are entered using only the keyboard, which has the advantage that you can keep your fingers on the keyboard and your eyes on the screen, rather than moving your arm repeatedly to the mouse.  For those who want it, mouse support and a GUI version with scrollbars and menus can be activated.</para>
<para>We will refer to <command>vi</command> or <command>vim</command> throughout this book for editing files, while you are of course free to use the editor of your choice.  We chose this <command>vi</command> because it is the standard text editor on almost all UNIX systems, while <command>emacs</command> can be an optional package.  There may be small differences between different computers and terminals, but the main point is that if you can work with <command>vi</command>, you can survive on any UNIX system.</para>
</sect3>

</sect2>


</sect1>
<sect1 id="sect_06_02"><title>Using the Vim editor</title>
<sect2 id="sect_06_02_01"><title>Two modes</title>
<para>The <command>vi</command> editor is a very powerful tool and has a very extensive built-in manual, which you can activate using the <command>:help</command> command when the program is started (instead of using <command>man</command> or <command>info</command>, which don't contain nearly as much information).  We will only discuss the very basics here to get you started.</para>
<para>What makes <command>vi</command> confusing to the beginner is that it can operate in two modes:  command mode and insert mode.  The editor always starts in command mode.  Commands move you through the text, search, replace, mark blocks and perform other editing tasks, and some of them switch the editor to insert mode.</para>
<para>This means that each key has not one, but likely two meanings:  it can either represent a command for the editor when in command mode, or a character that you want in a text when in insert mode.</para>
<note><title>Pronunciation</title>
<para>It's pronounced <quote>vee-eye</quote>.</para></note>
</sect2>
<sect2 id="sect_06_02_02"><title>Basic commands</title>
<sect3 id="sect_06_02_02_01"><title>Moving through the text</title>
<para>Moving through the text is usually possible with the arrow keys.  If not, try:</para>
<itemizedlist>
<listitem><para><command>h</command> to move the cursor to the left</para></listitem>
<listitem><para><command>l</command> to move it to the right</para></listitem>
<listitem><para><command>k</command> to move up</para></listitem>
<listitem><para><command>j</command> to move down</para></listitem>
</itemizedlist>
<para>SHIFT-G will put the prompt at the end of the document.</para>
</sect3>
<sect3 id="sect_06_02_02_02"><title>Basic operations</title>
<itemizedlist>
<listitem><para><command>n dd</command> will delete n lines starting from the current cursor position.</para></listitem>
<listitem><para><command>n dw</command> will delete n words at the right side of the cursor.</para></listitem>
<listitem><para><command>x</command> will delete the character on which the cursor is positioned</para></listitem>
<listitem><para><command>:n</command> moves to line n of the file.</para></listitem>
<listitem><para><command>:w</command> will save (write) the file</para></listitem>
<listitem><para><command>:q</command> will exit the editor.</para></listitem>
<listitem><para><command>:q!</command>  forces the exit when you want to quit a file containing unsaved changes.</para></listitem>
<listitem><para><command>:wq</command> will save and exit</para></listitem>
<listitem><para><command>:w newfile</command> will save the text to <filename>newfile</filename>.</para></listitem>
<listitem><para><command>:wq!</command> overrides read-only permission (if you have the permission to override permissions, for instance when you are using the <emphasis>root</emphasis> account.</para></listitem>

<listitem><para><command>/astring</command> will search the string in the file and position the cursor on the first match below its position.</para></listitem>
<listitem><para><command>/</command> will perform the same search again, moving the cursor to the next match.</para></listitem>
<listitem><para><command>:1, $s/word/anotherword/g</command> will replace <filename>word</filename> with <filename>anotherword</filename> throughout the file.</para></listitem>
<listitem><para><command>yy</command> will copy a block of text.</para></listitem>
<listitem><para><command>n p</command> will paste it n times.</para></listitem>
<listitem><para><command>:recover</command> will recover a file after an unexpected interruption.</para></listitem>
</itemizedlist>
</sect3>
<sect3 id="sect_06_02_02_03"><title>
Commands that switch the editor to insert mode</title>
<itemizedlist>
<listitem><para><command>a</command> will append: it moves the cursor one position to the right before switching to insert mode</para></listitem>
<listitem><para><command>i</command> will insert</para></listitem>
<listitem><para><command>o</command> will insert a blank line under the current cursor position and move the cursor to that line.</para></listitem>
</itemizedlist>
<para>Pressing the ESC key switches back to command mode.  If you're not sure what mode you're in because you use a really old version of <command>vi</command> that doesn't display an <quote>INSERT</quote> message, type ESC and you'll be sure to return to command mode.  It is possible that the system gives a little alert when you are already in command mode when hitting ESC, by beeping or giving a visual bell (a flash on the screen).  This is normal behavior.</para>
</sect3>
</sect2>
<sect2 id="sect_06_02_03"><title>The easy way</title>
<para>Instead of reading the text, which is quite boring, you can use the vimtutor to learn you first Vim commands.  This is a thirty minute tutorial that teaches the most basic Vim functionality hands-on.  While you can't learn everything about <command>vim</command> in just half an hour, the tutor is designed to describe enough of the commands that you will be able to easily use Vim as an all-purpose editor.</para>
<para>In UNIX and MS Windows, if Vim has been properly installed, you can start it from the shell or command line using the <command>vimtutor</command> command.  This will make a copy of the tutor file, so that you can edit it without the risk of damaging the original.  There are a few translated versions of the tutor.  To find out if yours is available, use the two-letter language code.  For French this would be <command>vimtutor fr</command> (if installed on the system).</para>
</sect2> 
</sect1>
<sect1 id="sect_06_03"><title>Summary</title>
<para>In this chapter we learned to use an editor.  While it depends on your own individual preference which one you use, it is necessary to at least know how to use one editor.</para>
<para>The <command>vi</command> editor is available on every UNIX system.</para>

</sect1>
<sect1 id="sect_06_04"><title>Exercises</title>
<para>This chapter has only one exercise: start the Vim tutor and use it.</para>
<para>You may alternatively start <command>emacs</command> and type [CTRL]-[H] [T] to invoke the self-paced Emacs tutorial.</para>
<para>Practice is the only way!</para>

</sect1>
</chapter>
