<?xml version='1.0' encoding='ISO-8859-1'?>
<chapter id="chap_05">
<title>Input and output redirection</title>
<abstract>
<para>This chapter describes more about the powerful UNIX mechanism of redirecting input and output.  Topics include:</para>
<para>
<itemizedlist>
<listitem><para>Standard input, output and errors</para></listitem>
<listitem><para>Redirection operators</para></listitem>
<listitem><para>How to use output of one command as input for another</para></listitem>
<listitem><para>Input redirection</para></listitem>
<listitem><para>Handling standard error messages</para></listitem>
<listitem><para>Combining redirection of input, output and error streams</para></listitem>
<listitem><para>Output filters</para></listitem>

</itemizedlist>
</para>
</abstract>

<sect1 id="sect_05_01"><title>What are standard input and standard output?</title>
<para>
Most Linux commands read input, such as a file or another attribute for the command, and write output.  By default, input is being given with the keyboard, and output is displayed on your screen.  Your keyboard is your <quote>standard input</quote> (stdin) device, and the screen is the <quote>standard output</quote> (stdout) device.
</para>
<para>However, since Linux is a flexible system, these default settings don't necessarily have to be applied.  The standard output, for example, on a heavily monitored server in a large environment may be a printer.</para>
<sect2 id="sect_05_01_01"><title>The redirection operators</title>
<sect3 id="sect_05_01_01_01"><title>Output redirection with &gt; and |</title>
<para>Sometimes you will want to put output of a command in a file, or you may want to issue another command on the output of one command.  This is known as redirecting output.  Redirection is done using either the <quote>&gt;</quote> (greater-than symbol), or using the <quote>|</quote> (pipe) operator which sends the standard output of one command to another command as standard input.</para>
<para>As we saw before, the <command>cat</command> command concatenates files and puts them all together to the standard output.  By redirecting this output to a file, this file name will be created - or overwritten if it already exists, so take care.</para>
<screen>
nancy:~&gt;cat test1
some words

nancy:~&gt;cat test2
some other words

nancy:~&gt;cat test1 test2 &gt; test3

nancy:~&gt;cat test3
some words
some other words
</screen>
<para>Redirecting <quote>nothing</quote> to an existing file is equal to emptying the file:</para>
<screen>
[jean@saturnus ~/Documents] ls -l list
-rw-rw-r--    1 jean	jean	117 Apr  2 18:09 list

[jean@saturnus ~/Documents] &gt; list

[jean@saturnus ~/Documents] ls -l list
-rw-rw-r--    1 jean    jean      0 Apr  4 12:01 list
</screen>
<para>This process is called <emphasis>truncating</emphasis>.  The same redirection to an unexisting file will create a new empty file with the given name:</para>
<screen>
[jean@saturnus ~] ls -l newlist
ls: newlist: No such file or directory

[jean@saturnus ~] &gt; newlist

[jean@saturnus ~] ls -l newlist
-rw-rw-r--  1 jean    jean	  0 Apr  4 12:05 newlist
</screen>
<para><xref linkend="chap_07" /> gives some more examples on the use of this sort of redirection.</para>
<para>Some examples using piping of commands:</para>
<itemizedlist>
<listitem><para>To mail a text file to somebody:</para>
        <para><command>cat <filename>file</filename> | mail somebody@somewhere.com</command></para>
</listitem>
<listitem><para>To find a word within some text, display all lines matching pattern1, or exclude lines also matching pattern2 from being displayed:</para>
        <para><command>grep pattern1 <filename>file</filename> | grep -v pattern2</command></para>
</listitem>
<listitem><para>To display output of a directory listing one page at a time:</para>
        <para><command>ls -la | less</command></para>
</listitem>
<listitem><para>To find an entry in a directory:</para>
        <para><command>ls -l | grep <filename>entry</filename></command></para></listitem>
</itemizedlist>
<para>In another case, you may want a file to be the input for a command that normally wouldn't accept a file as an option.  This redirecting of input is done using the <quote>&lt;</quote> (less-than symbol) operator.</para>
<para>Below is an example of sending a file to somebody, using input redirection.</para>
<screen>
andy:~&gt;mail mike@somewhere.org &lt; to_do
</screen>
<para>If the user <emphasis>mike</emphasis> exists on the system, you don't need to type the full address.  If you want to reach somebody on the Internet, enter the fully qualified address as an argument to <command>mail</command>.</para>
<para>The following example combines input and output redirection.  The file <filename>text.txt</filename> is first checked for spelling mistakes, and the output is redirected to an error log file:</para>
<para><command>aspell &lt; <filename>text.txt</filename> &gt; error.log</command></para>
<note><title>Don't overwrite!</title>
<para>Be careful not to overwrite existing (important) files when redirecting output.  Many shells, including Bash, have a built-in feature to protect you from that risk: <command>noclobber</command>.  See the Info pages for more information.  In Bash, you would want to add the <command>set -o noclobber</command> command to your <filename>.bashrc</filename> configuration file in order to prevent accidental overwriting of files.</para></note>
<para>The pipe command (<command>|</command>) will feed output of one program as input to another.  This is a way of sending mail using redirection of output instead of redirection of input:</para>
<screen>
andy:~&gt;cat to_do | mail mike
</screen>
<para>The output of the piped command can then be piped into another command, just as long as these commands would normally read input from the standard input and put output to the standard output.</para>


</sect3>


<sect3 id="sect_05_01_01_02"><title>The &gt; &gt; operator</title>
<para>Instead of overwriting file data, you can also append text to an existing file.</para>
<para>Example:</para>
<screen>
mike:~&gt;date &gt; &gt; today's_wishlist

mike:~&gt;cat today's_wishlist
more money
less work
Thu Feb 28 20:23:07 CET 2002
</screen>
<para>The <command>date</command> command would normally put the last line on the screen; now it is appended to the file <filename>test3</filename>.
</para>
</sect3>
</sect2>

<sect2 id="sect_05_01_02"><title>Advanced redirection features</title>
<para>There are three types of output, which each have their own identifier, called a file descriptor:</para>
<itemizedlist>
<listitem><para>standard input: 0</para></listitem>
<listitem><para>standard output: 1</para></listitem>
<listitem><para>standard error: 2</para></listitem>
</itemizedlist>

<para>In the following descriptions, if the file descriptor number is omitted, and the first character of the redirection operator is &lt;, the redirection refers to the standard input (file descriptor 0).  If the first character of the redirection operator is &gt;, the redirection refers to the standard output (file descriptor 1).</para>
<para>Some practical examples will make this more clear:</para>
<cmdsynopsis><command>ls &gt; <filename>dirlist</filename> 2&gt;&amp;1</command></cmdsynopsis>
<para>will direct both standard output and standard error to the file <filename>dirlist</filename>, while the command</para>
<cmdsynopsis><command>ls 2&gt;&amp;1 &gt; <filename>dirlist</filename></command></cmdsynopsis> 
<para>will only direct standard output to <filename>dirlist</filename>.  This can be a useful option for programmers.</para>
<para>All this is explained in detail in the Bash Info pages.</para>
</sect2>
<sect2 id="sect_05_01_03">
<title>Filters</title>
<para>When a program performs operations on input and writes the result to the standard output, it is called a filter.  One of the most common uses of filters is to restructure output.  We'll discuss a couple of the most important filters below.</para>
<sect3 id="sect_05_01_03_01"><title><command>grep</command></title>
<para><command>grep</command> scans the output line per line, searching for matching patterns.  All lines containing the pattern will be printed to standard output.  This behavior can be reversed using the <command>-v</command> option.
</para>
<para>Some examples: suppose we want to know which files in a certain directory have been modified in February:</para>
<screen>
jenny:~&gt;ls -la | grep Feb
</screen>
<para>The <command>grep</command> command, like most commands, is case sensitive. Use the <option>-i</option> option to make no difference between upper and lower case.  Again, all the information is contained in the Info pages.</para>
</sect3>

<sect3 id="sect_05_01_03_02"><title>Filtering output</title>
<para>The command <command>sort</command> arranges lines in alphabetical order by default:</para>
<screen>
thomas:~&gt;cat people-I-like | sort
Auntie Emmy
Boyfriend
Dad
Grandma
Mum
My boss
</screen>
<para>But there are many more things <command>sort</command> can do.  Looking at the file size, for instance.  With this command, directory content is sorted smallest files first, biggest files last:</para>
<cmdsynopsis><command>ls <option>-la</option> | sort <option>-nk 5</option></command></cmdsynopsis>
<note><title>Old sort syntax</title>
<para>You might obtain the same result with <command>ls <option>-la</option> | sort <option>+4n</option></command>, but this is an old form which does not comply with the current standards.</para></note>
<para>The <command>sort</command> command is also used in combination with the <command>uniq</command> program (or <command>sort <option>-u</option></command>) to sort output and filter out double entries.</para>
</sect3>
</sect2>
</sect1>
<sect1 id="sect_05_02"><title>Summary</title>
<para>In this chapter we learned how commands can be linked to each other, and how input from one command can be used as output for another command.</para>
<para>Input/output redirection is a common task on UNIX and Linux machines.  This powerful mechanism allows flexible use of the building blocks UNIX is made of.</para>
</sect1>
<sect1 id="sect_05_03"><title>Exercises</title>
<para>These exercises give more examples on how to combine commands.  The main goal is to try and use the [ENTER]-key as little as possible.</para>
<para>All exercises are done using a normal user ID, so as to generate some errors.  While you're at it, don't forget to read those man pages!</para>
<itemizedlist>
<listitem><para>Use the <command>cut</command> command on the output of a long directory listing in order to display only the file permissions.  Then pipe this output to <command>sort</command> and <command>uniq</command> to filter out any double lines.  Then use the <command>wc</command> to count the different permission types in this directory.</para></listitem>
<listitem><para>Put the output of <command>date</command> in a file.  Append the output of <command>ls</command> to this file.  Send this file to your local mailbox.  When using Bash, you will see a new mail notice upon success.</para></listitem>
<listitem><para>List the devices which are currently used by your UID.  Pipe through <command>less</command> to view them properly.</para></listitem>
<listitem><para>Use the command <command>bash -x</command> to start up the HTTP daemon with the script in <filename>/etc/rc.d/init.d</filename>.  Send standard error to a file.  Do the same but now send standard output to the file.  Note the difference.</para></listitem>
<listitem><para>How many processes are you currently running?</para></listitem>
<listitem><para>How many invisible files are in your home directory?</para></listitem>
<listitem><para>Use <command>rpm</command> to check which version of the GCC package is installed on your system (use <command>rpm <option>--help</option></command> for an overview of options).</para></listitem>
<listitem><para>Use <command>locate</command> to find documentation about the kernel.</para></listitem>
<listitem><para>Find out which file contains the following entry:</para>
<screen>
root:x:0:0:root:/root:/bin/bash
</screen>
<para>And this one:</para>
<screen>
system:		root
</screen></listitem>
<listitem><para>See what happens upon issuing this command:</para>
<screen>&gt; time; date &gt;&gt; time; cat &lt; time</screen>
</listitem>
</itemizedlist>

</sect1>


</chapter>
