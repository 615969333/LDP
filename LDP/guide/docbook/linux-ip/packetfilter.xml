<!-- $Id$ -->

<chapter id="ch-packetfilter">
  <title>Packet Filtering</title>
  <para>
    It is not an uncommon story today to hear how people were first exposed to
    linux.  Many people found linux an excellent and reliable
    masquerading firewall in the mid-1990s and slowly became more
    and more accustomed to working with linux as a result of the low total
    costo of ownership.
  </para>
  <para>
    The capabilities of packet filtering tools available under linux today
    dwarfs that of early linux (<command>ipfwadm</command>, anybody?) yet
    retains the reliability and expressive flexibility of the older tools.
  </para>
  <para>
    For networks and machines directly connected to the Internet, packet
    filtering is no longer an option, but a need.  This chapter will introduce
    the packet filtering tools available under kernels 2.2 and 2.4.  Since
    there is much available documentation on packet filtering, host protection
    and masquerading with a packet filter, this chapter will refer liberally
    to external resources.
  </para>
  <para>
    This chapter begins with an
    <link linkend="pf-intro">introduction to
    and the history of packet filtering with linux</link>.  After covering
    some of the
    <link linkend="pf-weakness">weaknesses of packet filtering</link>, it will
    cover
    <link linkend="pf-netfilter">the netfilter architecture</link>, and then
    delve into
    <link linkend="pf-netfilter-iptables">using
    <command>iptables</command></link>.  An introduction to the use of
    <link linkend="pf-ipchains"><command>ipchains</command></link> will follow
    along with introductions to
    <link linkend="pf-host">host</link> and
    <link linkend="pf-network">network protection</link>.  The chapter will
    close with an overview of
    <link linkend="pf-further">further resources</link>.
  </para>
  <para>
  </para>
  <section id="pf-intro">
    <title>Rationale for and Introduction to Packet Filtering</title>
    <para>
      Packet filtering is one part of a good security stance for any network.
      As the embodiment and expression of the acceptable flow of traffic from
      one network to another, a packet filter allows the administrator to
      enforce the organizational (or network) security policy on the
      network.  There is tremendous value from a security perspective in
      enforcing these traffic flows, instead of allowing arbitrary traffic
      flow.
    </para>
    <para>
      The use of packet filtering to enforce these traffic flows is not
      restricted to routers and firewalls alone.  Standalone servers and
      workstations can use these very same tools to protect themselves.  There
      are a couple of common approaches to the packet filtering question.  I
      subscribe to the notion that one should drop or deny all unwanted
      traffic by default and then allow only specific traffic.
    </para>
    <para>
      There are a number of techniques to accommodate this, and as always in
      the security business, there are convenience and security tradeoffs.
    </para>
    <para>
      For the remainder of the chapter, I'll try to focus on my practical
      application of packet filtering techniques and commands rather than a
      more general introduction to the dangers of exposed hosts and networks.
      I will assume the reader has enough familiarity with the concepts of
      packet filtering to put the material into context.
    </para>
    <para>
    </para>
    <para>
    </para>
    <para>
      history of packet filtering with linux
    </para>
    <para>
      Stress the importance of application layer security for packet filtered
      services xref binding non-local
    </para>
    <para>
      Stress the importance of SSL (or other network layer encryption).
    </para>
    <para>
      packet filtering as part of a firewall, the conflation of the term
      packet filter with the word firewall; refer to proxy services
    </para>
    <para>
      Alternate names for packet filtering in other regions of the networking
      world....ACLs
    </para>
    <para>
      FIXME; this would be a good place for some links to external content on
      packet filters, network security; firewalling; and so forth.
    </para>
  </section>
  <section id="pf-weakness">
    <title>Weaknesses of Packet Filtering</title>
    <para>
      Stateless packet filters. (cf. iptables connection tracking), cf. state
      vs. stateless discussion.
    </para>
    <para>
      Use of ICMP, when to block ICMP; tunneling through lax packet filters
      with ICMP (trinoo, ICMPchat).
    </para>
    <para>
      spoofed source addresses, xref binding non-local addresses
    </para>
    <para>
      confounded application layer protocols like FTP, H323
    </para>
    <para>
      DoS on connection tracking packet filters
    </para>
    <para>
      DoS on rate limiters ?
    </para>
    <para>
    </para>
    <para>
    </para>
    <section id="pf-weakness-stateless">
      <title>Complex Network Layer Stateless Packet Filters</title>
      <para>
      </para>
    </section>
  </section>
  <section id="pf-icmp">
    <title>General Packet Filter Requirements</title>
    <para>
      minimum ICMP required to meet the networking needs; xref PMTU discussion
    </para>
    <para>
      source quench
    </para>
    <para>
      parameter problem
    </para>
    <para>
      inbound destination unreachable
    </para>
    <para>
      outbound destination unreachable fragmentation needed
    </para>
    <para>
      optional: echo request and echo reply
    </para>
    <para>
      optional: outbound destination unreachable
    </para>
    <para>
      optional: time exceeded
    </para>
  </section>
  <section id="pf-netfilter">
    <title>The Netfilter Architecture</title>
    <para>
      packet filtering engine in kernel 2.2 (skip history, adequately
      documented elsewhere)
    </para>
    <para>
      packet filtering engine as part of netfilter in kernel 2.4, backwards
      compatible support for ipchains
    </para>
    <para>
      differences between the packet traversal in ipchains and iptables.
      link to Stef Coene's KPTD (kernel 2.4).  Anybody know of a link to a
      KPTD for kernel 2.2?
    </para>
    <para>
    </para>
    <para>
    </para>
    <section id="pf-netfilter-iptables">
      <title>Packet Filtering with <command>iptables</command></title>
      <para>
        selecting on interface
      </para>
      <para>
        different chains, INPUT, OUTPUT, FORWARD
      </para>
      <para>
        big picture; how chains are traversed
      </para>
      <para>
        selecting on interface -i -o
      </para>
      <para>
        targets; ACCEPT, DROP, REJECT....
      </para>
    </section>
  </section>
  <section id="pf-ipchains">
    <title>Packet Filtering with <command>ipchains</command></title>
    <para>
      the three builtin chains, input, output, forward
    </para>
    <para>
      policy per chain, see targets
    </para>
    <para>
      jumping from chain to chain, -j $TARGET; wher TARGET=chain
    </para>
    <para>
      the big picture; how chains are traversed
    </para>
    <para>
      targets (other than chains) ACCEPT, DENY, REJECT....
    </para>
    <para>
      selecting on interface
    </para>
    <para>
    </para>
    <para>
    </para>
    <section id="pf-ipchains-mangling">
      <title>Packet Mangling with <command>ipchains</command></title>
      <para>
      </para>
      <para>
      </para>
      <para>
      </para>
    </section>
  </section>
  <section id="pf-host">
    <title>Protecting a Host</title>
    <para>
      Host protection in the past was typically performed with application
      layer checks on the originating IP or hostname.  This was (and still is)
      frequently accomplished with libwrap, which verifies whether or not to
      allow a connection based on the contents of the system wide
      configuration files <filename>/etc/hosts.allow</filename> and
      <filename>/etc/hosts.deny</filename>.
    </para>
    <para>
      Host protection is one part of protecting a host, by preventing inbound
      packets from reaching higher layers.  This is no substitute for tight
      application layer security.  Strong network and host-level packet
      filters mitigate a host's exposure when it is connected to
      a network.
    </para>
    <para>
    </para>
    <example id="ex-pf-iptables-reject">
      <title>Blocking a destination and using the <option>REJECT</option>
        target, cf. <xref linkend="ex-tools-ip-route-add-prohibit"/></title>
     <programlisting>
<prompt>[root@masq-gw]# </prompt><userinput>iptables -I FORWARD -p tcp -d 209.10.26.51 --dport 22 -j REJECT</userinput>
<prompt>[root@tristan]# </prompt><userinput>ssh 209.10.26.51</userinput>
<computeroutput>ssh: connect to address 209.10.26.51 port 22: Connection refused</computeroutput>
<prompt>[root@masq-gw]# </prompt><userinput>tcpdump -nnq -i eth2</userinput>
<computeroutput>tcpdump: listening on eth2
22:16:59.111947 192.168.99.35.51991 &gt; 209.10.26.51.22: tcp 0 (DF)
22:16:59.112270 192.168.99.254 &gt; 192.168.99.35: icmp: 209.10.26.51 tcp port 22 unreachable (DF) [tos 0xc0]</computeroutput>
      </programlisting>
    </example>
    <para>
    </para>
  </section>
  <section id="pf-network">
    <title>Protecting a Network</title>
    <para>
    </para>
    <para>
    </para>
    <para>
    </para>
    <para>
    </para>
  </section>
  <section id="pf-further">
    <title>Further Resources</title>
    <para>
      The use of linux packet filtering features is mature and
      well-documented in many places throughout the Internet.  One of the most
      thorough introductions to the use of <command>iptables</command> has
      been collected by Oskar Andreasson at his
      <ulink url="http://iptables-tutorial.frozentux.net/">Iptables
      tutorial</ulink>.  For further reference material on the use of
      <command>iptables</command> consult this resource.
    </para>
    <para>
      For those continuing to use <command>ipchains</command> the
      <ulink url="http://www.tldp.org/HOWTO/IPCHAINS-HOWTO.html">ipchains
      HOWTO</ulink> courtesy of TLDP provides an introduction to the world of
      <command>ipchains</command>.
    </para>
    <para>
      For kernel 2.4, understanding the sequence of packet mangling, filtering
      and network address translation is key.  The
      <ulink url="http://www.docum.org/stef.coene/qos/kptd/">kernel packet
      traveling diagram</ulink> provides a visual representation of the path a
      packet takes through the kernel.  Here you will see the netfilter hooks,
      traffic control, and routing stages.  A similar picture of kernel 2.4's
      packet path is available in a single page PDF entitled
      <ulink url="http://open-source.arkoon.net/kernel/kernel_net.png">Linux
      Kernel 2.4 Packet handling</ulink>.
    </para>
    <para>
      See also
      <xref linkend="links-ipchains"/> and
      <xref linkend="links-netfilter"/> in the appendices for a more complete
      set of references and links.
    </para>
  </section>
</chapter>
