<section id='python'>
    <title>Python Packages</title>
    <abstract>
        <para>
            This section describes how to prepare packages which contain
            applications written in Python, Python modules and Python language
            itself.
        </para>
    </abstract>
    <section id='python.dist'>
        <title>What is distributed?</title>
        <para>
            There is no doubt when you create package with Python modules
            which sources are written in C language. Sources should be
            compiled for given architecture, that's all. The problem arises
            when modules are written in Python language. What should be
            distributed? Sources - *.py files? Byte compiled files - *.pyc?
            Optimized byte compiled files - *.pyo? All of them?
        </para>
        <para>
            We have decided that packages with Python modules
            should contain both, byte compiled and optimized byte compiled
            files. Yes, *.pyc and *.pyo files. PLD developers aim to 
            provide optimized software whenever it is possible.
        </para>
        <para>
            Why not to distribute only *.py files and byte compile them during
            package installation? We want to distribute prepared packages
            so user is not forced to compile the sources and such
            philosophy applies to Python, too.
        </para>
        <para>
            Why not only *.pyo files? Firstly, optimized byte compiled modules
            cannot be imported without *.pyc files.<!-- why cannot python
            do it? - explanation should be here -->
            Secondly, *.pyo do not contain docstrings - source code
            documentation.
        </para>
        <para>
            Why not only *.pyc files? As it is mentioned above, PLD
            developers do not want to deprive users of optimized software.
            We want to provide fully optimized Python modules
            as we provide packages
            optimized for many architectures. It would be not a good idea if
            users, which want to use optimized modules, have been forced
            to create them manually because it requires root privileges
            and creates files which are in <filename>/usr</filename> hierarchy
            and not in <application>RPM</application> database.
        </para>
    </section>
    <section id='python.lang'>
        <title>Python Language</title>
        <para>
            Python language is splitted into several packages, which are listed below.
        </para>
        <para>
            Package with Python library contains some basic modules. The modules are required
            to use the library with applications embedding simple Python code.
            Some people could complain, that there is no <literal role="lib">sys</literal> module,
            which seems to be basic for most of us. The word &apos;basic&apos; means &apos;is required&apos;,
            so simple Python code embedding works. Consider following listing.
            <programlisting>
                <![CDATA[
#include &lt;Python.h&gt;

int main(int argc, char *argv[]) {
    Py_Initialize();
    PyRun_SimpleString("print 2**4");
    Py_Finalize();
    return 0;
}
                ]]>
            </programlisting>
            If the modules are not present, then there will be the error message
            that Python cannot find platform independent libraries.
        </para>
        <para>
            One can easily note, that sources of standard Python modules are distributed
            in <literal role="rpm.package">python-devel-src</literal> package. It is an exception to the rule,
            that we do not distribute sources of modules for Python language.
        </para>
        <variablelist>
            <varlistentry>
                <term role="rpm.package">python</term>
                <listitem>
                    <para>
                        Python command line utility and its manual.
                    </para>
                </listitem>
            </varlistentry>
            <varlistentry>
                <term role="rpm.package">python-modules</term>
                <listitem>
                    <para>
                        Standard Python modules.
                    </para>
                </listitem>
            </varlistentry>
            <varlistentry>
                <term role="rpm.package">python-libs</term>
                <listitem>
                    <para>
                        Python library and basic modules.
                    </para>
                </listitem>
            </varlistentry>
            <varlistentry>
                <term role="rpm.package">python-pydoc</term>
                <listitem>
                    <para>
                        PyDoc module and command line utility.
                    </para>
                </listitem>
            </varlistentry>
            <varlistentry>
                <term role="rpm.package">python-devel</term>
                <listitem>
                    <para>
                        Development files, i.e. header and Python config files.
                    </para>
                </listitem>
            </varlistentry>
            <varlistentry>
                <term role="rpm.package">python-devel-src</term>
                <listitem>
                    <para>
                        Sources of all standard Python modules.
                    </para>
                </listitem>
            </varlistentry>
            <varlistentry>
                <term role="rpm.package">python-static</term>
                <listitem>
                    <para>
                        Python static library.
                    </para>
                </listitem>
            </varlistentry>
            <varlistentry>
                <term role="rpm.package">python-examples</term>
                <listitem>
                    <para>
                        All examples and tools which come with standard Python distribution.
                    </para>
                </listitem>
            </varlistentry>
            <varlistentry>
                <term role="rpm.package">python-doc</term>
                <listitem>
                    <para>
                        Python documentation in HTML format. It contains tutorial, global module index, library and
                        language reference, etc.
                    </para>
                </listitem>
            </varlistentry>
            <varlistentry>
                <term role="rpm.package">tkinter</term>
                <listitem>
                    <para>
                        Standard Python interface to the Tk GUI toolkit.
                    </para>
                </listitem>
            </varlistentry>
            <varlistentry>
                <term role="rpm.package">python-old</term>
                <listitem>
                    <para>
                        Obsoleted Python modules.
                    </para>
                </listitem>
            </varlistentry>
        </variablelist>
    </section>
    <section id='python.modules'>
        <title>Python Modules</title>
        <section id='python.modules.install'>
            <title><application>RPM</application> Install Section</title>
            <para>
                Python modules can be installed with
                <itemizedlist>
                    <listitem><simpara>autoconf/automake combo</simpara></listitem>
                    <listitem><simpara>distutils</simpara></listitem>
                    <listitem><simpara>other method (hand written Makefile files, manual
                    installation)</simpara></listitem>
                </itemizedlist>
            </para>
            <para>
                <application>Automake</application> 1.5 introduced Python
                support. Developers want to use the same tool for
                their projects written in Python or C and
                <application>automake</application> gives such possibility to them.
            </para>
            <para>
                Installing Python modules can be done the same way
                as installing other applications or libraries, which
                authors use <application>automake</application>.
                Just remember to pass <envar>$RPM_BUILD_ROOT</envar>
                to <envar>DESTDIR</envar>, so
                <application>make</application> will install source files
                (*.py), byte compiled (*.pyc) and optimized byte compiled
                (*.pyo) files under <envar>$RPM_BUILD_ROOT</envar>
                hierarchy.
                <example>
                    <title>
                        Installing Python modules with Makefile files
                        created with <application>automake</application>.
                    </title>
                    <screen>%{__make} install DESTDIR=$RPM_BUILD_ROOT</screen>
                </example>
            </para>
            <para>
                Python <literal role='lib'>distutils</literal>
                has ability to install optimized and
                normal byte compiled files. It can be done with
                <command>setup.py</command> script option
                <parameter>--optimize</parameter>.
                Option <parameter>--root</parameter> should
                be used too, because installed files
                should be put in <envar>$RPM_BUILD_ROOT</envar>
                directory.
                <example>
                    <title>
                        Installing Python modules in <application>RPM</application> install section
                        with <literal role='lib'>distutils</literal>.
                    </title>
                    <screen>python setup.py install --optimize=2 --root=$RPM_BUILD_ROOT</screen>
                </example>
                Sometimes <literal role='lib'>distutils</literal>
                refuses to install files under
                <envar>$RPM_BUILD_ROOT</envar> hierarchy. Set
                <envar>$PYTHONPATH</envar> variable to
                <literal>$RPM_BUILD_ROOT%{py_sitedir}</literal> value
                before module installation.
            </para>
            <para>
                There can be other methods of installing Python modules.
                For example, you can be forced to install them manually. There are
                two macros <literal role="rpm.macro">py_comp</literal> and <literal role="rpm.macro">py_ocomp</literal>,
                which help with installation. Look for macros descriptions below.
            </para>
        </section>
        <section id='python.modules.groups'>
            <title><application>RPM</application> groups</title>
            <para>
                Every package is assigned to <application>RPM</application>
                group. Packages which contain developer files such as
                header files should be assigned to
                <literal role='rpm.group'>Development/Languages/Python</literal>
                group.
                Packages with just modules should be assigned to <literal
                        role='rpm.group'>Libraries/Python</literal> group.
            </para>
            <para>
                Rules used to assign
                <application>RPM</application> group to applications, apply
                to applications written in Python, too. Taking
                <application>sketch</application> for example, the
                graphics manipulation program, there is
                used <literal role='rpm.group'>X11/Application/Graphics</literal>
                group. Another example is
                <application>happydoc</application> with
                <literal role='rpm.group'>Development/Tools</literal> group or
                <application>ipython</application> with <literal
                    role='rpm.group'>Applications/Shells</literal> group.
            </para>
        </section>
    </section>
    <section id='python.macros'>
        <title>Standard <application>RPM</application> Macros</title>
        <para>
            Following macros are defined to make Python packages developers&apos; life better.
            <variablelist>
                <varlistentry>
                    <term role="rpm.macro">py_ver</term>
                    <listitem>
                        <para>
                            Python main version. For example, Python 2.2, 2.2.1 and 2.2.2
                            main version is <literal>2.2</literal>.
                        </para>
                    </listitem>
                </varlistentry>

                <varlistentry>
                    <term role="rpm.macro">py_prefix</term>
                    <listitem>
                        <para>
                            Directory prefix, where Python is installed. It points to <filename>/usr</filename>, usually.
                        </para>
                    </listitem>
                </varlistentry>

                <varlistentry>
                    <term role="rpm.macro">py_libdir</term>
                    <listitem>
                        <para>
                            Directory, where Python is installed. It is created from prefix and Python main version,
                            i.e. <filename>/usr/lib/python2.2</filename>.
                        </para>
                    </listitem>
                </varlistentry>

                <varlistentry>
                    <term role="rpm.macro">py_incdir</term>
                    <listitem>
                        <para>
                            Directory, where Python header files are installed, i.e. <filename>/usr/include/python2.2</filename>. Yes, main version is used to build it.
                        </para>
                    </listitem>
                </varlistentry>

                <varlistentry>
                    <term role="rpm.macro">py_sitedir</term>
                    <listitem>
                        <para>
                            Directory, where all non-standard, site specific Python modules are installed. It is created from
                            library directory, i.e. <filename>/usr/lib/python2.2/site-packages</filename>.
                        </para>
                    </listitem>
                </varlistentry>

                <varlistentry>
                    <term role="rpm.macro">py_dyndir</term>
                    <listitem>
                        <para>
                            Directory, where all shared modules are installed. It is created
                            from library directory, i.e. <filename>/usr/lib/python2.2/lib-dynload</filename>.
                        </para>
                    </listitem>
                </varlistentry>

                <varlistentry>
                    <term role="rpm.macro">py_comp</term>
                    <listitem>
                        <para>
                            Finds recursively all Python source files in
                            specified directory and compiles them into
                            bytecode.
                        </para>
                    </listitem>
                </varlistentry>

                <varlistentry>
                    <term role="rpm.macro">py_ocomp</term>
                    <listitem>
                        <para>
                            Finds recursively all Python source files in
                            specified directory and compiles them into
                            optymized bytecode.
                        </para>
                    </listitem>
                </varlistentry>

                <varlistentry>
                    <term role="rpm.macro">pyrequires_eq()</term>
                    <listitem>
                        <para>
                            Creates dependency on specified package with main version
                            unchanged.
                        </para>
                    </listitem>
                </varlistentry>
            </variablelist>
        </para>
        <para>
            Most of above macros are self explanatory... and some not, sore read on. :-)
        </para>
        <para>
            Macros <literal role="rpm.macro">py_comp</literal>
            and <literal role="rpm.macro">py_ocomp</literal> should be used when
            software installation routine does
            not provide byte compiled modules installation.
        </para>
        <para>
            The macros use Python <literal role="lib">compileall</literal>
            module which scans given directory and its subdirectories for Python modules and compiles
            them into bytecode.
            <example>
                <title>
                    Compiling Python modules into bytecode.
                </title>
                <screen>%install
...
%py_comp $RPM_BUILD_ROOT%{py_sitedir}
%py_ocomp $RPM_BUILD_ROOT%{py_sitedir}</screen>
            </example>
            Please note, that compilation must be performed after module source files installation, because
            the directory path, where module source files reside, is put into binary files
            during byte compilation.
            Information about correct directory path in compiled modules is useful, due to
            thrown exceptions which display it.
        </para>
        <!-- para>
            more info about: py_?comp and pyrequires_eq macros
            For example, when you want
            dependency on python-libs package and use this
            macro, then created package will require
            python-libs with version greater or equal to 2.2 and less
            then 2.3.

            This macro is very usefull, because 
        </para -->
    </section>
</section>
