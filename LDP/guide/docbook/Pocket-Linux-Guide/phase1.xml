<?xml version="1.0" encoding="ISO-8859-1"?>
<chapter id="phase1">
  <title>A Simple Prototype</title>

  <sect1>
    <title>Analysis</title>

    <para>Since this is the first phase of the project it will be kept very
    simple. The goal here is not to create the ultimate GNU/Linux system on
    the first try. Instead, we will be building a very minimal, working system
    to be used as a building block in subsequent phases of the project.
    Keeping this in mind, we can list a few goals for phase one.</para>

    <itemizedlist>
      <listitem>
        <para>Keep it simple to avoid stressing out.</para>
      </listitem>

      <listitem>
        <para>Build something that works for instant gratification.</para>
      </listitem>

      <listitem>
        <para>Make something that it is useful in later phases of the project.</para>
      </listitem>
    </itemizedlist>
  </sect1>

  <sect1>
    <title>Design</title>

    <sect2>
      <title>Simplification</title>

      <para>Take a moment to skim through the Bootdisk-HOWTO or the
      From-PowerUp-to-BASH-Prompt-HOWTO. These HOWTO documents can be found
      online at <ulink url="http://www.tldp.org/docs.html#howto">http://www.tldp.org/docs.html#howto</ulink>.
      Both documents offer an excellent view of what it takes to get a
      GNU/Linux system up and running. There is also a lot of information to
      digest. Remember that one of our goals is, &#34;keep it simple to avoid
      stressing out,&#34; so we want to ignore everything but the absolutely
      critical pieces of a boot / root diskset.</para>

      <para>Basically it boils down to the following required items:</para>

      <itemizedlist>
        <listitem>
          <para>A boot loader</para>
        </listitem>

        <listitem>
          <para>The Linux kernel</para>
        </listitem>

        <listitem>
          <para>A shell</para>
        </listitem>

        <listitem>
          <para>Some <filename>/dev</filename> files</para>
        </listitem>
      </itemizedlist>

      <para>We don&#39;t even need an init daemon. The kernel can be told to
      run the shell directly by passing it an option through the boot loader.</para>

      <para>For easy construction we will build a two-disk boot / root set
      rather than trying to get everything onto a single diskette. The boot
      loader and kernel will go on the boot disk and the shell will reside on
      the root disk. Both disks will need device files to function properly.</para>
    </sect2>

    <sect2>
      <title>Boot Disk</title>

      <para>For the boot disk we&#39;ll want to use a kernel that does not
      require modules for the hardware we need to access. Mainly, it should
      have compiled-in support for the floppy drive, ram disk and a text-based
      console. If such a kernel is not available, it will need to be built
      from source code using the Kernel-HOWTO as a guide. Once the kernel is
      ready we can copy it to a diskette that has been prepared with a
      filesystem (a.k.a. formatted). The diskette will need a few
      <filename>/dev</filename> files and a <filename>lilo.conf</filename>
      file in order to get LILO installed. The Bootdisk-HOWTO and the
      lilo.conf(5) manpage will be helpful in designing the
      <filename>lilo.conf</filename> file.</para>
    </sect2>

    <sect2>
      <title>Root Disk</title>

      <para>For the root disk we will need a floppy that has been prepared
      with a filesystem. We will also need a BASH shell that is statically
      linked so we can avoid the additional complexities of shared libraries.
      The <command>configure</command> program in the BASH source code
      recognizes the <option>--enable-static-link</option> option for this
      feature. We will also be using the <option>--enable-minimal-config</option>
      option to keep the BASH binary down to a manageable size. Additional
      requirements for the root disk are a <filename>/dev</filename> directory
      and a device file for the console. The <filename>console</filename>
      device is required for BASH to be able to communicate with the keyboard
      and video display.</para>
    </sect2>

    <sect2>
      <title>CPU Compatibility</title>

      <para>There is one other, less obvious requirement to keep in mind and
      that is CPU compatibility. Each generation of CPU features a more
      complex architechture than its predecessor. Late generation chips have
      additional registers and instructions when compared to an older 486 or
      386. So a kernel optimized for a new, fast 6x86 machine will not run on
      an older boxes. (See the <filename>README</filename> file in the Linux
      kernel source code for details.) A BASH shell built for a 6x86 will
      probably not run on an older processor either. To avoid this problem, we
      can choose the 386 as a lowest common denominator CPU and build all the
      code for that architecture.</para>
    </sect2>
  </sect1>

  <sect1>
    <title>Construction</title>

    <para>In this section, we will be building the actual boot disk and root
    disk floppies. Lines starting with <prompt>bash#</prompt> indicate a shell
    command.</para>

    <sect2>
      <title>Prepare the boot disk floppy</title>

      <para>Insert a blank diskette labeled &#34;boot disk&#34;.</para>

      <para><programlisting><prompt>bash#</prompt> mke2fs -m0 /dev/fd0
<prompt>bash#</prompt> mount /dev/fd0 /mnt</programlisting></para>
    </sect2>

    <sect2>
      <title>Build the kernel</title>

      <para><programlisting><prompt>bash#</prompt> cd /usr/src/linux
<prompt>bash#</prompt> make menuconfig</programlisting></para>

      <para>Be sure to configure support for the following:</para>

      <itemizedlist>
        <listitem>
          <para>386 processor</para>
        </listitem>

        <listitem>
          <para>Floppy disk</para>
        </listitem>

        <listitem>
          <para>RAM disk</para>
        </listitem>

        <listitem>
          <para>Console on virtual terminal</para>
        </listitem>
      </itemizedlist>

      <para><programlisting><prompt>bash#</prompt> make dep
<prompt>bash#</prompt> make clean
<prompt>bash#</prompt> make bzImage</programlisting></para>
    </sect2>

    <sect2>
      <title>Copy the kernel to diskette</title>

      <para><programlisting><prompt>bash#</prompt> mkdir /mnt/boot
<prompt>bash#</prompt> cp /usr/src/linux/arch/i386/boot/bzImage /mnt/boot/vmlinuz</programlisting></para>
    </sect2>

    <sect2>
      <title>Copy the LILO boot loader</title>

      <para><programlisting><prompt>bash#</prompt> cp /boot/boot.b /mnt/boot/boot.b</programlisting></para>
    </sect2>

    <sect2>
      <title>Create device files that LILO needs</title>

      <para><programlisting><prompt>bash#</prompt> mkdir /mnt/dev
<prompt>bash#</prompt> cd /mnt/dev
<prompt>bash#</prompt> mknod fd0 b 2 0
<prompt>bash#</prompt> mknod console c 5 1</programlisting></para>
    </sect2>

    <sect2>
      <title>Write a simple lilo.conf</title>

      <para><programlisting><prompt>bash#</prompt> mkdir /mnt/etc
<prompt>bash#</prompt> cd /mnt/etc</programlisting></para>

      <para>Use an editor like vi, emacs or pico to create the following
      <filename>lilo.conf</filename> file:</para>

      <para><programlisting># /etc/lilo.conf - boot loader configuration file
#
boot=/dev/fd0
compact
prompt
read-only
vga=normal
image=/boot/vmlinuz
label=bootdisk
append=&#34;load_ramdisk=1 prompt_ramdisk=1&#34;
root=/dev/fd0
#
# end of /etc/lilo.conf</programlisting></para>
    </sect2>

    <sect2>
      <title>Install the LILO boot loader</title>

      <para><programlisting><prompt>bash#</prompt> lilo -r /mnt</programlisting></para>
    </sect2>

    <sect2>
      <title>Unmount the boot disk</title>

      <para><programlisting><prompt>bash#</prompt> cd /
<prompt>bash#</prompt> umount /mnt
<prompt>bash#</prompt> sync</programlisting></para>
    </sect2>

    <sect2>
      <title>Prepare the root disk floppy</title>

      <para>Insert a blank diskette labeled &#34;root disk&#34;.</para>

      <para><programlisting><prompt>bash#</prompt> mke2fs -m0 /dev/fd0
<prompt>bash#</prompt> mount /dev/fd0 /mnt</programlisting></para>
    </sect2>

    <sect2>
      <title>Build BASH</title>

      <para>Get the bash-2.05 source code package from <ulink
      url="ftp://ftp.gnu.org/gnu/bash/">ftp://ftp.gnu.org/gnu/bash/</ulink>
      and untar it into the <filename>/usr/src</filename> directory.</para>

      <note>
        <para>BASH version 2.05b, the latest version at the time of this
        writing, will not build successfully when using the <option>--enable-minimal-config</option>
        option. This leaves two choices. We can either fix 2.05b by applying
        the patch posted on gnu.bash.bug under the subject, &#34;Compile error
        in execute_cmd.c with --enable-minimal-config&#34; or we can simply
        use the 2.05a version.</para>
      </note>

      <para><programlisting><prompt>bash#</prompt> cd /usr/src/bash-2.05a
<prompt>bash#</prompt> ./configure --enable-static-link \
  --enable-minimal-config --host=i386-pc-linux-gnu
<prompt>bash#</prompt> make
<prompt>bash#</prompt> strip bash</programlisting></para>
    </sect2>

    <sect2>
      <title>Copy BASH to the root disk</title>

      <para><programlisting><prompt>bash#</prompt> mkdir /mnt/bin
<prompt>bash#</prompt> cp bash /mnt/bin/bash
<prompt>bash#</prompt> ln -s bash /mnt/bin/sh</programlisting></para>
    </sect2>

    <sect2>
      <title>Create device files that BASH needs</title>

      <para><programlisting><prompt>bash#</prompt> mkdir /mnt/dev
<prompt>bash#</prompt> mknod /mnt/dev/console c 5 1</programlisting></para>
    </sect2>

    <sect2>
      <title>Unmount the root disk</title>

      <para><programlisting><prompt>bash#</prompt> cd /
<prompt>bash#</prompt> umount /mnt
<prompt>bash#</prompt> sync</programlisting></para>
    </sect2>
  </sect1>

  <sect1>
    <title>Implementation</title>

    <sect2>
      <title>System startup</title>

      <para>Follow these steps to boot the system:</para>

      <itemizedlist>
        <listitem>
          <para>Restart the PC with the boot disk in the floppy drive.</para>
        </listitem>

        <listitem>
          <para>When the LILO prompt appears, type <userinput>bootdisk
          init=/bin/sh</userinput> and press <keycap>Enter</keycap>.</para>
        </listitem>

        <listitem>
          <para>Insert the root disk when prompted.</para>
        </listitem>
      </itemizedlist>

      <para>If all goes well the screen should look something like the example
      shown below.</para>

      <para><screen>boot: bootdisk init=/bin/sh
Loading bootdisk
Uncompressing Linux... Ok, booting kernel.
..
.. [various kernel messages]
..
VFS: Insert root floppy disk to be loaded into RAM disk and press ENTER
RAMDISK: ext2 filesystem found at block 0
RAMDISK: Loading 1440 blocks [1 disk] into ram disk... done.
VFS: Mounted root (ext2 filesystem) readonly.
Freeing unused kernel memory: 178k freed
# _</screen></para>
    </sect2>

    <sect2>
      <title>Testing what works</title>

      <para>Try out a few of BASH&#39;s built-in commands to see if things are
      working properly.</para>

      <para><programlisting><prompt>bash#</prompt> echo &#34;Hello World&#34;
<prompt>bash#</prompt> cd /
<prompt>bash#</prompt> pwd
<prompt>bash#</prompt> echo *</programlisting></para>
    </sect2>

    <sect2>
      <title>Noting what does not work</title>

      <para>Try out a few other familiar commands.</para>

      <para><programlisting><prompt>bash#</prompt> ls /var
<prompt>bash#</prompt> mkdir /var/tmp</programlisting></para>

      <para>Notice that only commands internal to BASH actually work and that
      external commands like <command>ls</command> and <command>mkdir</command>
      do not work at all. This shortcoming is something that can be addressed
      in a future phase of the project. For now we should just enjoy the fact
      that our prototype boot / root diskset works and that it was not all
      that hard to build.</para>
    </sect2>

    <sect2>
      <title>System shutdown</title>

      <para>Remove the diskette from fd0 and restart the system using
      <keycap>CTRL</keycap>-<keycap>ALT</keycap>-<keycap>DELETE</keycap>.</para>
    </sect2>
  </sect1>
</chapter>