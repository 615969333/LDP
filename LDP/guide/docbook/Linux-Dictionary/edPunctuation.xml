
<glossary id="Punctuation">
<title>Punctuation</title>

<glossentry>
<glossterm>
$BASH environment variable
</glossterm>
<glossdef>
<para>
Expands to the full pathname used to invoke this instance of bash. From Rute-Users-Guide
</para>
</glossdef>
</glossentry>

<glossentry>
<glossterm>
$BASH_VERSION environment variable
</glossterm>
<glossdef>
<para>
Expands to the version number of this instance of bash. From Rute-Users-Guide
</para>
</glossdef>
</glossentry>

<glossentry>
<glossterm>
$CDPATH environment variable
</glossterm>
<glossdef>
<para>
The search path for the cd command. This is a colon-separated list of directories in which the shell looks for destination directories specified by the cd command. A sample value is ``.:~:/usr&apos;&apos;. From Rute-Users-Guide
</para>
</glossdef>
</glossentry>

<glossentry>
<glossterm>
$ENV environment variable
</glossterm>
<glossdef>
<para>
If this parameter is set when bash is executing a shell script, its value is interpreted as a filename containing commands to initialize the shell, as in .bashrc. The value of ENV is subjected to parameter expansion, command substitution, and arithmetic expansion before being interpreted as a pathname. PATH is not used to search for the resultant pathname. From Rute-Users-Guide
</para>
</glossdef>
</glossentry>

<glossentry>
<glossterm>
$FIGNORE environment variable
</glossterm>
<glossdef>
<para>
A colon-separated list of suffixes to ignore when performing filename completion (see READLINE below). A filename whose suffix matches one of the entries in FIGNORE is excluded from the list of matched filenames. A sample value is ``.o:~&apos;&apos;. From Rute-Users-Guide
</para>
</glossdef>
</glossentry>

<glossentry>
<glossterm>
$HISTCMD environment variable
</glossterm>
<glossdef>
<para>
The history number, or index in the history list, of the current command. If HISTCMD is unset, it loses its special properties, even if it is subsequently reset. From Rute-Users-Guide
</para>
</glossdef>
</glossentry>

<glossentry>
<glossterm>
$HISTCONTROL environment variable
</glossterm>
<glossdef>
<para>
If set to a value of ignorespace, lines which begin with a space character are not entered on the history list. If set to a value of ignoredups, lines matching the last history line are not entered. A value of ignoreboth combines the two options. If unset, or if set to any other value than those above, all lines read by the parser are saved on the history list. From Rute-Users-Guide
</para>
</glossdef>
</glossentry>

<glossentry>
<glossterm>
$HISTFILE environment variable
</glossterm>
<glossdef>
<para>
The name of the file in which command history is saved. (See HISTORY below.) The default value is ~/.bash_history. If unset, the command history is not saved when an interactive shell exits. From Rute-Users-Guide
</para>
</glossdef>
</glossentry>

<glossentry>
<glossterm>
$HISTFILESIZE environment variable
</glossterm>
<glossdef>
<para>
The maximum number of lines contained in the history file. When this variable is assigned a value, the history file is truncated, if necessary, to contain no more than that number of lines. The default value is 500. From Rute-Users-Guide
</para>
</glossdef>
</glossentry>

<glossentry>
<glossterm>
$HISTSIZE environment variable
</glossterm>
<glossdef>
<para>
The number of commands to remember in the command history (see HISTORY below). The default value is 500. From Rute-Users-Guide
</para>
</glossdef>
</glossentry>

<glossentry>
<glossterm>
$HOME environment variable
</glossterm>
<glossdef>
<para>
The home directory of the current user; the default argument for the cd builtin command. From Rute-Users-Guide
</para>
</glossdef>
</glossentry>

<glossentry>
<glossterm>
$HOSTFILE
</glossterm>
<glossdef>
<para>
Contains the name of a file in the same format as /etc/hosts that should be read when the shell needs to complete a hostname. The file may be changed interactively; the next time hostname completion is attempted bash adds the contents of the new file to the already existing database. From Rute-Users-Guide
</para>
</glossdef>
</glossentry>

<glossentry>
<glossterm>
$HOSTTYPE
</glossterm>
<glossdef>
<para>
Automatically set to a string that uniquely describes the type of machine on which bash is executing. The default is system-dependent. From Rute-Users-Guide
</para>
</glossdef>
</glossentry>

<glossentry>
<glossterm>
$IFS
</glossterm>
<glossdef>
<para>
In UNIX, the $IFS variable separates commands. It is usually conigured to be the semicolon (;) and newline characters. However, it can be reconfigured to be other characters as well. Data-driven attacks will sometimes seek to reset the IFS variable (e.g. IFS=x), then cause execution within the data field wihtout having to insert shell metacharacters. Tidbit: On Linux, the $FF variable may also be used like $IFS. From Hacking-Lexicon
</para>
</glossdef>
</glossentry>

<glossentry>
<glossterm>
$IFS
</glossterm>
<glossdef>
<para>
The Internal Field Separator that is used for word splitting after expansion and to split lines into words with the read builtin command. The default value is ``&lt;space&gt;&lt;tab&gt;&lt;newline&gt;&apos;&apos;. From Rute-Users-Guide
</para>
</glossdef>
</glossentry>

<glossentry>
<glossterm>
$IGNOREEOF
</glossterm>
<glossdef>
<para>
Controls the action of the shell on receipt of an EOF character as the sole input. If set, the value is the number of consecutive EOF characters typed as the first characters on an input line before bash exits. If the variable exists but does not have a numeric value, or has no value, the default value is 10. If it does not exist, EOF signifies the end of input to the shell. This is only in effect for interactive shells. From Rute-Users-Guide
</para>
</glossdef>
</glossentry>

<glossentry>
<glossterm>
$INPUTRC environment variable
</glossterm>
<glossdef>
<para>
The filename for the readline startup file, overriding the default of ~/.inputrc (see READLINE below). From Rute-Users-Guide
</para>
</glossdef>
</glossentry>

<glossentry>
<glossterm>
$LINENO
</glossterm>
<glossdef>
<para>
Each time this parameter is referenced, the shell substitutes a decimal number representing the current sequential line number (starting with 1) within a script or function. When not in a script or function, the value substituted is not guaranteed to be meaningful. When in a function, the value is not the number of the source line that the command appears on (that information has been lost by the time the function is executed), but is an approximation of the number of simple commands executed in the current function. If LINENO is unset, it loses its special properties, even if it is subsequently reset. From Rute-Users-Guide
</para>
</glossdef>
</glossentry>

<glossentry>
<glossterm>
$MAIL
</glossterm>
<glossdef>
<para>
If this parameter is set to a filename and the MAILPATH variable is not set, bash informs the user of the arrival of mail in the specified file. From Rute-Users-Guide
</para>
</glossdef>
</glossentry>

<glossentry>
<glossterm>
$MAILCHECK
</glossterm>
<glossdef>
<para>
Specifies how often (in seconds) bash checks for mail. The default is 60 seconds. When it is time to check for mail, the shell does so before prompting. If this variable is unset, the shell disables mail checking. From Rute-Users-Guide
</para>
</glossdef>
</glossentry>

<glossentry>
<glossterm>
$MAILPATH
</glossterm>
<glossdef>
<para>
A colon-separated list of pathnames to be checked for mail. The message to be printed may be specified by separating the pathname from the message with a `?&apos;. $_ stands for the name of the current mailfile. Example: MAILPATH=&apos;/usr/spool/mail/bfox?&quot;You have mail&quot;:~/shell-mail?&quot;$_ has mail!&quot;&apos; Bash supplies a default value for this variable, but the location of the user mail files that it uses is system dependent (e.g., /usr/spool/mail/$USER). From Rute-Users-Guide
</para>
</glossdef>
</glossentry>

<glossentry>
<glossterm>
$MAIL_WARNING
</glossterm>
<glossdef>
<para>
If set, and a file that bash is checking for mail has been accessed since the last time it was checked, the message ``The mail in mailfile has been read&apos;&apos; is printed. From Rute-Users-Guide
</para>
</glossdef>
</glossentry>

<glossentry>
<glossterm>
$OLDPWD
</glossterm>
<glossdef>
<para>
The previous working directory as set by the cd command. From Rute-Users-Guide
</para>
</glossdef>
</glossentry>

<glossentry>
<glossterm>
$OSTYPE
</glossterm>
<glossdef>
<para>
Automatically set to a string that describes the operating system on which bash is executing. The default is system-dependent. From Rute-Users-Guide
</para>
</glossdef>
</glossentry>

<glossentry>
<glossterm>
$PATH
</glossterm>
<glossdef>
<para>
The search path for commands. It is a colon-separated list of directories in which the shell looks for commands (see COMMAND EXECUTION below). The default path is system-dependent, and is set by the administrator who installs bash. A common value is ``/usr/gnu/bin:/usr/local/bin:/usr/ucb:/bin:/usr/bin:.&apos;&apos;. From Rute-Users-Guide
</para>
</glossdef>
</glossentry>

<glossentry>
<glossterm>
$PATH
</glossterm>
<glossdef>
<para>
The shell looks for commands and programs in a list of file paths stored in the PATH environment variable. An environment variable stores information in a place where other programs and commands can access it. Environment variables store information such as the shell that you are using, your login name, and your current working directory. To see a list of all the environment variables currently defined; type &apos;set&apos; at the prompt. When you type a command at the shell prompt, the shell will look for that command&apos;s program file in each directory listed in the PATH variable, in order. The first program found matching the command you typed will be run. If the command&apos;s program file is not in a directory listed in you PATH environment variable, the shell returns a &quot;commands not found&quot; error. By default, the shell does not look in your current working directory or your home directory for commands This is really a security mechanism so that you don&apos;t execute programs by accident. What if a malicious user put a harmful program called ls in your home directory? If you typed ls and the shell looked for the fake program in your home directory before the real program in the /bin directory, what do you think woul dhappen? If you thought bad things, you are on the right track. Since your PATH doesn&apos;t have the current directory as one of its search locations, programs in your current directory must be called with an absolute path of a relative path specified as &apos;./program-name&apos;. To see what directories are part of your PATH enter this command: # echo $PATH /usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/bin/X11 From Complete-Idiot&apos;s Guide to Linux
</para>
</glossdef>
</glossentry>

<glossentry>
<glossterm>
$PROMPT_COMMAND
</glossterm>
<glossdef>
<para>
If set, the value is executed as a command prior to issuing each primary prompt. From Rute-Users-Guide
</para>
</glossdef>
</glossentry>

<glossentry>
<glossterm>
$PS1
</glossterm>
<glossdef>
<para>
The value of this parameter is expanded (see PROMPTING below) and used as the primary prompt string. The default value is ``bash\$ &apos;&apos;. From Rute-Users-Guide
</para>
</glossdef>
</glossentry>

<glossentry>
<glossterm>
$PS2
</glossterm>
<glossdef>
<para>
The value of this parameter is expanded and used as the secondary prompt string. The default is ``&gt; &apos;&apos;. From Rute-Users-Guide
</para>
</glossdef>
</glossentry>

<glossentry>
<glossterm>
$PS3
</glossterm>
<glossdef>
<para>
The value of this parameter is used as the prompt for the select command (see SHELL GRAMMAR above). From Rute-Users-Guide
</para>
</glossdef>
</glossentry>

<glossentry>
<glossterm>
$PS4
</glossterm>
<glossdef>
<para>
The value of this parameter is expanded and the value is printed before each command bash displays during an execution trace. The first character of PS4 is replicated multiple times, as necessary, to indicate multiple levels of indirection. The default is ``+ &apos;&apos;. From Rute-Users-Guide
</para>
</glossdef>
</glossentry>

<glossentry>
<glossterm>
$PWD
</glossterm>
<glossdef>
<para>
The current working directory as set by the cd command. From Rute-Users-Guide
</para>
</glossdef>
</glossentry>

<glossentry>
<glossterm>
$RANDOM
</glossterm>
<glossdef>
<para>
Each time this parameter is referenced, a random integer is generated. The sequence of random numbers may be initialized by assigning a value to RANDOM. If RANDOM is unset, it loses its special properties, even if it is subsequently reset. From Rute-Users-Guide
</para>
</glossdef>
</glossentry>

<glossentry>
<glossterm>
$SECONDS
</glossterm>
<glossdef>
<para>
Each time this parameter is referenced, the number of seconds since shell invocation is returned. If a value is assigned to SECONDS. the value returned upon subsequent references is the number of seconds since the assignment plus the value assigned. If SECONDS is unset, it loses its special properties, even if it is subsequently reset. From Rute-Users-Guide
</para>
</glossdef>
</glossentry>

<glossentry>
<glossterm>
$SHLVL
</glossterm>
<glossdef>
<para>
Incremented by one each time an instance of bash is started. From Rute-Users-Guide
</para>
</glossdef>
</glossentry>

<glossentry>
<glossterm>
.Z
</glossterm>
<glossdef>
<para>
File compressed with the compress compression program. From Rute-Users-Guide Can be deflated using the &apos;uncompress&apos; utility.
</para>
</glossdef>
</glossentry>

<glossentry>
<glossterm>
.a
</glossterm>
<glossdef>
<para>
Archive. lib*.a is a static library. From Rute-Users-Guide
</para>
</glossdef>
</glossentry>

<glossentry>
<glossterm>
.alias
</glossterm>
<glossdef>
<para>
X Window System font alias catalog. From Rute-Users-Guide
</para>
</glossdef>
</glossentry>

<glossentry>
<glossterm>
.au
</glossterm>
<glossdef>
<para>
Audio format (original Sun Microsystems generic sound file). From Rute-Users-Guide
</para>
</glossdef>
</glossentry>

<glossentry>
<glossterm>
.avi
</glossterm>
<glossdef>
<para>
Video format. From Rute-Users-Guide
</para>
</glossdef>
</glossentry>

<glossentry>
<glossterm>
.awk
</glossterm>
<glossdef>
<para>
awk program source file. From Rute-Users-Guide
</para>
</glossdef>
</glossentry>

<glossentry>
<glossterm>
.bib
</glossterm>
<glossdef>
<para>
bibtex LATEX bibliography source file. From Rute-Users-Guide
</para>
</glossdef>
</glossentry>

<glossentry>
<glossterm>
.bmp
</glossterm>
<glossdef>
<para>
Microsoft Bitmap file image format. From Rute-Users-Guide
</para>
</glossdef>
</glossentry>

<glossentry>
<glossterm>
.bz
</glossterm>
<glossdef>
<para>
File compressed with the bzip compression algorithm/program. These files are mostly redundant now. The vast majority of files are compressed using the superior bzip2 program. From Rute-Users-Guide
</para>
</glossdef>
</glossentry>

<glossentry>
<glossterm>
.bz2
</glossterm>
<glossdef>
<para>
File compressed with the bzip2 compression program. From Rute-Users-Guide
</para>
</glossdef>
</glossentry>

<glossentry>
<glossterm>
.c
</glossterm>
<glossdef>
<para>
C program source code. From Rute-Users-Guide
</para>
</glossdef>
</glossentry>

<glossentry>
<glossterm>
.cc, .cxx, .C, .cpp
</glossterm>
<glossdef>
<para>
C++ program source code. From Rute-Users-Guide
</para>
</glossdef>
</glossentry>

<glossentry>
<glossterm>
.cf, .cfg
</glossterm>
<glossdef>
<para>
Configuration file or script. From Rute-Users-Guide
</para>
</glossdef>
</glossentry>

<glossentry>
<glossterm>
.cgi
</glossterm>
<glossdef>
<para>
Executable script that produces web page output. From Rute-Users-Guide
</para>
</glossdef>
</glossentry>

<glossentry>
<glossterm>
.conf, .config
</glossterm>
<glossdef>
<para>
Configuration file. From Rute-Users-Guide
</para>
</glossdef>
</glossentry>

<glossentry>
<glossterm>
.csh
</glossterm>
<glossdef>
<para>
csh shell script. From Rute-Users-Guide
</para>
</glossdef>
</glossentry>

<glossentry>
<glossterm>
.db
</glossterm>
<glossdef>
<para>
Database file. From Rute-Users-Guide
</para>
</glossdef>
</glossentry>

<glossentry>
<glossterm>
.deb
</glossterm>
<glossdef>
<para>
Debian package for the Debian distribution. From Rute-Users-Guide
</para>
</glossdef>
</glossentry>

<glossentry>
<glossterm>
.diff
</glossterm>
<glossdef>
<para>
Output of the diff program indicating the difference between files or source trees. From Rute-Users-Guide
</para>
</glossdef>
</glossentry>

<glossentry>
<glossterm>
.dir
</glossterm>
<glossdef>
<para>
X Window System font/other database directory. From Rute-Users-Guide
</para>
</glossdef>
</glossentry>

<glossentry>
<glossterm>
.dvi
</glossterm>
<glossdef>
<para>
Device-independent file. Formatted output of .tex LATEX file. From Rute-Users-Guide
</para>
</glossdef>
</glossentry>

<glossentry>
<glossterm>
.el
</glossterm>
<glossdef>
<para>
Lisp program source. From Rute-Users-Guide
</para>
</glossdef>
</glossentry>

<glossentry>
<glossterm>
.forward
</glossterm>
<glossdef>
<para>
On UNIX, a user can place an e-mail address in his &quot;.forward&quot; file. This will cause all e-mail sent to his account to be forwarded to that e-mail address. This file a is prime target of attackers. If they can overwrite this file, they can subtly start capturing the user&apos;s e-mail. This is especially dangerous if the the account in question is the root account. Note that the user doesn&apos;t have to know any about this file or have one on his system. The mere creation of this file by the intruder will activate this feature. Furthermore, since this file starts with a &apos;dot&apos;, it is normally hidden from the user, so they won&apos;t even be ware that this feature exists. From Hacking-Lexicon
</para>
</glossdef>
</glossentry>

<glossentry>
<glossterm>
.g3
</glossterm>
<glossdef>
<para>
G3 fax format image file. From Rute-Users-Guide
</para>
</glossdef>
</glossentry>

<glossentry>
<glossterm>
.gif, .giff
</glossterm>
<glossdef>
<para>
GIF image file. From Rute-Users-Guide
</para>
</glossdef>
</glossentry>

<glossentry>
<glossterm>
.gz
</glossterm>
<glossdef>
<para>
File compressed with the gzip compression program. From Rute-Users-Guide
</para>
</glossdef>
</glossentry>

<glossentry>
<glossterm>
.h
</glossterm>
<glossdef>
<para>
C/C++ program header file. From Rute-Users-Guide
</para>
</glossdef>
</glossentry>

<glossentry>
<glossterm>
.htm, .html, .shtm, .html
</glossterm>
<glossdef>
<para>
Hypertext Markup Language. A web page of some sort. From Rute-Users-Guide
</para>
</glossdef>
</glossentry>

<glossentry>
<glossterm>
.i
</glossterm>
<glossdef>
<para>
SWIG source, or C preprocessor output. From Rute-Users-Guide
</para>
</glossdef>
</glossentry>

<glossentry>
<glossterm>
.in
</glossterm>
<glossdef>
<para>
configure input file. From Rute-Users-Guide
</para>
</glossdef>
</glossentry>

<glossentry>
<glossterm>
.info
</glossterm>
<glossdef>
<para>
Info pages read with the info command. From Rute-Users-Guide
</para>
</glossdef>
</glossentry>

<glossentry>
<glossterm>
.jpg, .jpeg
</glossterm>
<glossdef>
<para>
JPEG image file. From Rute-Users-Guide
</para>
</glossdef>
</glossentry>

<glossentry>
<glossterm>
.lj
</glossterm>
<glossdef>
<para>
LaserJet file. Suitable input to a HP LaserJet printer. From Rute-Users-Guide
</para>
</glossdef>
</glossentry>

<glossentry>
<glossterm>
.log
</glossterm>
<glossdef>
<para>
Log file of a system service. This file grows with status messages of some system program. From Rute-Users-Guide
</para>
</glossdef>
</glossentry>

<glossentry>
<glossterm>
.lsm
</glossterm>
<glossdef>
<para>
LINUX Software Map entry. From Rute-Users-Guide
</para>
</glossdef>
</glossentry>

<glossentry>
<glossterm>
.lyx
</glossterm>
<glossdef>
<para>
LyX word processor document. From Rute-Users-Guide
</para>
</glossdef>
</glossentry>

<glossentry>
<glossterm>
.man
</glossterm>
<glossdef>
<para>
Man page. From Rute-Users-Guide
</para>
</glossdef>
</glossentry>

<glossentry>
<glossterm>
.mf
</glossterm>
<glossdef>
<para>
Meta-Font font program source file. From Rute-Users-Guide
</para>
</glossdef>
</glossentry>

<glossentry>
<glossterm>
.pbm
</glossterm>
<glossdef>
<para>
PBM image file format. From Rute-Users-Guide
</para>
</glossdef>
</glossentry>

<glossentry>
<glossterm>
.pcf
</glossterm>
<glossdef>
<para>
PCF image file--intermediate representation for fonts. X Window System font. From Rute-Users-Guide
</para>
</glossdef>
</glossentry>

<glossentry>
<glossterm>
.pcx
</glossterm>
<glossdef>
<para>
PCX image file. From Rute-Users-Guide
</para>
</glossdef>
</glossentry>

<glossentry>
<glossterm>
.pdf
</glossterm>
<glossdef>
<para>
Formatted document similar to PostScript or dvi. From Rute-Users-Guide
</para>
</glossdef>
</glossentry>

<glossentry>
<glossterm>
.pfb
</glossterm>
<glossdef>
<para>
X Window System font file. From Rute-Users-Guide
</para>
</glossdef>
</glossentry>

<glossentry>
<glossterm>
.php
</glossterm>
<glossdef>
<para>
PHP program source code (used for web page design). From Rute-Users-Guide
</para>
</glossdef>
</glossentry>

<glossentry>
<glossterm>
.pl
</glossterm>
<glossdef>
<para>
Perl or Prolog program source code. From Rute-Users-Guide
</para>
</glossdef>
</glossentry>

<glossentry>
<glossterm>
.ps
</glossterm>
<glossdef>
<para>
PostScript file, for printing or viewing. From Rute-Users-Guide
</para>
</glossdef>
</glossentry>

<glossentry>
<glossterm>
.py
</glossterm>
<glossdef>
<para>
Python program source code. From Rute-Users-Guide
</para>
</glossdef>
</glossentry>

<glossentry>
<glossterm>
.rpm
</glossterm>
<glossdef>
<para>
RedHat Package Manager rpm file. From Rute-Users-Guide
</para>
</glossdef>
</glossentry>

<glossentry>
<glossterm>
.sgml
</glossterm>
<glossdef>
<para>
Standard Generalized Markup Language. Used to create documents to be converted to many different formats. From Rute-Users-Guide
</para>
</glossdef>
</glossentry>

<glossentry>
<glossterm>
.sh
</glossterm>
<glossdef>
<para>
sh shell script. From Rute-Users-Guide It can be interpreted by any Bourne compatible shell.
</para>
</glossdef>
</glossentry>

<glossentry>
<glossterm>
.so
</glossterm>
<glossdef>
<para>
Shared object file. lib*.so is a Dynamically Linked Library. [Executable program code shared by more than one program to save disk space and memory.] From Rute-Users-Guide
</para>
</glossdef>
</glossentry>

<glossentry>
<glossterm>
.spd
</glossterm>
<glossdef>
<para>
Speedo X Window System font file. From Rute-Users-Guide
</para>
</glossdef>
</glossentry>

<glossentry>
<glossterm>
.src.rpm
</glossterm>
<glossdef>
<para>
Source RPM file. A &apos;tarball&apos; that can be recompiled and installed which also allows RPM based systems to manage them. From Binh
</para>
</glossdef>
</glossentry>

<glossentry>
<glossterm>
.tar
</glossterm>
<glossdef>
<para>
tarred directory tree. From Rute-Users-Guide
</para>
</glossdef>
</glossentry>

<glossentry>
<glossterm>
.tar.gz
</glossterm>
<glossdef>
<para>
See tarball. From Binh
</para>
</glossdef>
</glossentry>

<glossentry>
<glossterm>
.tcl
</glossterm>
<glossdef>
<para>
Tcl/Tk source code (programming language). From Rute-Users-Guide
</para>
</glossdef>
</glossentry>

<glossentry>
<glossterm>
.tex
</glossterm>
<glossdef>
<para>
TEX or LATEX document. LATEX is for document processing and typesetting. From Rute-Users-Guide
</para>
</glossdef>
</glossentry>

<glossentry>
<glossterm>
.texi, .texinfo
</glossterm>
<glossdef>
<para>
Texinfo source. Info pages are compiled from these. From Rute-Users-Guide
</para>
</glossdef>
</glossentry>

<glossentry>
<glossterm>
.tfm
</glossterm>
<glossdef>
<para>
LATEX font metric file. From Rute-Users-Guide
</para>
</glossdef>
</glossentry>

<glossentry>
<glossterm>
.tga
</glossterm>
<glossdef>
<para>
TARGA image file. From Rute-Users-Guide
</para>
</glossdef>
</glossentry>

<glossentry>
<glossterm>
.tgz
</glossterm>
<glossdef>
<para>
Directory tree that has been archived with tar, and then compressed with gzip. Also a package for the Slackware distribution. From Rute-Users-Guide
</para>
</glossdef>
</glossentry>

<glossentry>
<glossterm>
.tiff
</glossterm>
<glossdef>
<para>
TIFF image file. From Rute-Users-Guide
</para>
</glossdef>
</glossentry>

<glossentry>
<glossterm>
.ttf
</glossterm>
<glossdef>
<para>
Truetype font. From Rute-Users-Guide
</para>
</glossdef>
</glossentry>

<glossentry>
<glossterm>
.txt
</glossterm>
<glossdef>
<para>
Plain English text file. From Rute-Users-Guide
</para>
</glossdef>
</glossentry>

<glossentry>
<glossterm>
.voc
</glossterm>
<glossdef>
<para>
Audio format (Soundblaster&apos;s own format). From Rute-Users-Guide
</para>
</glossdef>
</glossentry>

<glossentry>
<glossterm>
.wav
</glossterm>
<glossdef>
<para>
Audio format (sound files common to Microsoft Windows). From Rute-Users-Guide
</para>
</glossdef>
</glossentry>

<glossentry>
<glossterm>
.xml
</glossterm>
<glossdef>
<para>
XML source file. See XML. From Binh
</para>
</glossdef>
</glossentry>

<glossentry>
<glossterm>
.xpm
</glossterm>
<glossdef>
<para>
XPM image file. From Rute-Users-Guide
</para>
</glossdef>
</glossentry>

<glossentry>
<glossterm>
.y
</glossterm>
<glossdef>
<para>
yacc source file. From Rute-Users-Guide
</para>
</glossdef>
</glossentry>

<glossentry>
<glossterm>
.zip
</glossterm>
<glossdef>
<para>
File compressed with the pkzip (or PKZIP.EXE for DOS) compression program. From Rute-Users-Guide
</para>
</glossdef>
</glossentry>

<glossentry>
<glossterm>
/bin
</glossterm>
<glossdef>
<para>
A directory containing executable programs, primarily binary files. From I-gloss
</para>
</glossdef>
</glossentry>

<glossentry>
<glossterm>
/bin
</glossterm>
<glossdef>
<para>
A directory that contains executable programs, the majority of which are stored in binary files. Most programs are found in directories /bin and /usr/bin; however, users often keep additional programs in private bin directories, such as /home/linux/bin. From Linux Guide @FirstLinux
</para>
</glossdef>
</glossentry>

<glossentry>
<glossterm>
/dev/null
</glossterm>
<glossdef>
<para>
On UNIX, this is a virtual-file that can be written to. Data written to this file gets discarded. It is similar to the file call NUL on Windows machines. Key point: When rooting a machine, intruders will often redirect logging to /dev/null For example, the command ln -s /dev/null .bash_history will cause the system to stop logging bash commands. Culture: In the vernacular, means much the same thing as black hole. Typical usage: if you don&apos;t like what I have to say, please direct your comments to /dev/null. From Hacking-Lexicon
</para>
</glossdef>
</glossentry>

<glossentry>
<glossterm>
/etc
</glossterm>
<glossdef>
<para>
The directory on UNIX where the majority of the configuration information is kept. It is roughly analogous to the Windows registry. Of particular interest is /etc/passwd file that stores all the passwords. Key point: If an intruder can read files from this directory, then they can likely use the information to attack the machine. From Hacking-Lexicon
</para>
</glossdef>
</glossentry>

<glossentry>
<glossterm>
/etc/hosts
</glossterm>
<glossdef>
<para>
The file that contains a list of hostname to IP address mappings. In the old days of the Internet, this is how machines contacted each other. A master hosts file was maintained and downloaded to machines on a regular basis. Then DNS came along. Like the vestigial appendix. On Windows, this file is stored in %SystemRoot%\system32\drivers\etc. Hack: If you can write files to a user&apos;s machine, then you can add entries to his/her hosts files to point to your own machine instead. For example, put an entry for www.microsoft.com to point to your machine, then proxy all the connections for the user. This will allow you to perform a man in the middle attack. From Hacking-Lexicon
</para>
</glossdef>
</glossentry>

<glossentry>
<glossterm>
/etc/hosts.equiv
</glossterm>
<glossdef>
<para>
On UNIX, the &quot;hosts.equiv&quot; file lists other hosts that can be thought of as &quot;equivalent&quot; to this one. This machine will therefore &quot;trust&quot; these other machines. Users connecting to this machine from the listed machines will not have to present a password, it is assumed that these other machines have already verified the password. Analogy: The European Union (EU) doesn&apos;t have passport control between countries. You only have to present your passport when entering the first European country, then you can roam freely once inside the union. The &quot;hosts.equiv&quot; file creates a similar union of machines. Hack: Hackers will target this file. If their target is machine A, they may instead find that A trusts B, and B may be easier to break into first. At that point, the hacker can hop back to A using an account on B. Likewise, if a hacker can write to this file, they can tell the system to trust any other system on the network (including the hackers own machine). Hack: Older software would do a reverse DNS lookup on a connecting IP address. If the hacker controlled the DNS server, s/he could return a trusted domain name, and therefore be allowed into the system. Another older hack is the default &quot;+&quot; entry. From Hacking-Lexicon
</para>
</glossdef>
</glossentry>

<glossentry>
<glossterm>
/etc/passwd
</glossterm>
<glossdef>
<para>
The UNIX file that contains the account information, such as username, password, login directory, and default shell. All normal users on the system can read this file. Key point: The passwords are encrypted, so even though everyone can read the file, it doesn&apos;t automatically guarantee access to the system. However, programs like crack are very effective at decrypting the passwords. On any system with many accounts, there is a good chance the hacker will be able to crack some of the accounts if they get hold of this file. Key point: Modern UNIX systems allow for shadowed password files, stored in locations like /etc/shadow that only root has access to. The normal password file still exists, minus the password information. This provides backwards compatibility for programs that still must access the password file for account information, but which have no interest in the passwords themselves. Key point: The chief goal of most hacks against UNIX systems is to retrieve the password file. Many attacks do not compromise the machine directly, but are able to read files from the machine, such as this file. From Hacking-Lexicon
</para>
</glossdef>
</glossentry>

<glossentry>
<glossterm>
/etc/services
</glossterm>
<glossdef>
<para>
On UNIX, the configuration file /etc/services maps port numbers to named services. Key point: Its role in life is so that programs can do a getportbyname() sockets call in their code in order to get what port they should use. For example, a POP3 email daemon would do a getportbyname(&quot;pop3&quot;) in order to retrieve the number 110 that pop3 runs at. The idea is that if all POP3 daemons use getportbyname(), then no matter what POP3 daemon you run, you can always reconfigure its port number by editing /etc/services. Misunderstanding: This file is bad in order to figure out what port numbers mean. If you want to find out what ports programs are using, you should instead use the program lsof to find out exactly which ports are bound to which processes. If running lsof is not appropriate, then you should lookup the ports in a more generic reference. From Hacking-Lexicon
</para>
</glossdef>
</glossentry>

<glossentry>
<glossterm>
0-day (zero-day)
</glossterm>
<glossdef>
<para>
The term 0-day exploit describes an exploit that is not publicly known. It describe tools by elite hackers who have discovered a new bug and shared it only with close friends. It also describes some new exploit for compromising popular services (the usual suspects: BIND, FTP services, Linux distros, Microsoft IIS, Solaris servers). Many 0-day exploits are discovered by the victims when hackers use them, or by honeypots. The term &quot;0-day&quot; describes the fact that the value of exploits quickly goes down as soon as they are announced. The next day they are half as valuable. The 2nd day they are a 1/4 as valuable. Ten days later they are 1/1000 as valuable as on day 0. This is because script-kiddies quickly use the exploits on computers throughout the Internet, compromising systems before anybody else can get to them. Contrast: The term 0-day exploit describe the hard-to-use exploits by the discoverer himself (or close friends), in contrast to the easy-to-use scripts employed by script kiddies. For example, a buffer-overflow script will go through many phases as people try to find the right offsets for the target platforms, but will eventually end up as a broad-spectrum aim-and-shoot script that anybody could use. Key point: One of the dangers of 0-day exploits is BUGTRAQ camping. A hacker discovers all the services running on the target victim and waits for day-0 when the exploit is announced. At that time, the hacker attacks the systems with the new exploit. Key point: The term &quot;0-day&quot; describes any bit of information in the community, whether it is serial numbers, lists of proxies, or passwords to porn sites. As soon as such information becomes well-known and exploited by large numbers of people, it is then fixed by the victim. Information has a &quot;half-life&quot;: the older it is, the less value it has. From Hacking-Lexicon
</para>
</glossdef>
</glossentry>

<glossentry>
<glossterm>
2-Disk Xwindow embedded Linux
</glossterm>
<glossdef>
<para>
Mungkie Associates Inc. provides 2-Disk Xwindow embedded Linux. The distribution is intended to be a demonstration of Mungkie Associates&apos; embedded appliance development environment, showing the sort of environment that can be created for small appliance GUI systems. It is further intended to give a minimal Linux base system on 1 disk and a fully expandable X system implementation on a second disk. The two disks can be used together for a minimal system or the X disk can be used seperately on any libc2.1 linux system. The source tree is compiled on Debian and the /lib/ files taken directly from the Debian-2.2.3 distribution. The 2-disk system is free for personal use, but restrictions apply to commercial usage. Version 1.4rc802 was released November 6, 2002. Version 1disk1.0 final was released January 18, 2003. A 1disk 1.0 update was released February 5, 2003. Version 1.0.8 (Source code) was released May 30, 2003.  From LWN Distribution List
</para>
</glossdef>
</glossentry>

<glossentry>
<glossterm>
3dchess
</glossterm>
<glossdef>
<para>
3D chess for X11 3 dimensional Chess for X11R6.  Three boards, 96 pieces and 26 directions. From Debian 3.0r0 APT 3Dwm is a 3D window manager for Linux From Binh
</para>
</glossdef>
</glossentry>

<glossentry>
<glossterm>
3dwm
</glossterm>
<glossdef>
<para>
The 3dwm project is working with the creation of a three-dimensional worspace manager that can run in the 3D Cube as well as on desktop computers. Note that wm does not stand for the term window manager. It is a bit misleading; 3dwm is not a window manager in the true sense of the word, but rather more of a gerneral user environment. The window manager functionality of the system is merely the tip of the iceberg; 3Dwm contains general primitives for building applications with three-dimensional interfaces. From 3dwm
</para>
</glossdef>
</glossentry>

<glossentry>
<glossterm>
3dwm-clock
</glossterm>
<glossdef>
<para>
A 3Dwm apps The 3Dwm clock application (tdwm-clock) is the first real application that is even remotely useful. It makes use of the 3Dwm Nobel API, including the new solid modeling support, to create a three-dimensional analog clock displaying the current time. From Debian 3.0r0 APT
</para>
</glossdef>
</glossentry>

<glossentry>
<glossterm>
3dwm-csgclient
</glossterm>
<glossdef>
<para>
A 3Dwm client A simple client which is builded using new libsolid. This is only an example on how libsolid work. From Debian 3.0r0 APT
</para>
</glossdef>
</glossentry>

<glossentry>
<glossterm>
3dwm-geoclient
</glossterm>
<glossdef>
<para>
A 3Dwm client This is a very simple 3Dwm client that connects to the exported GeometryKit in the server, creates a Geometry, loads a 3D file from the local system (in this case a simple model of an office, which also happens to be Rob&apos;s room), and passes it to the 3Dwm server. The 3Dwm server will happily render any geometry that is created, so running geoclient several times will add more geometries to the graphical output. Please note that you may need to zoom out (using the &apos;X&apos; key) to see graphical output. The geoclient is able to open native .raw files as well as standard 3ds files (using MeshIO). In other words, you may experiment by loading other files than the supplied office model to the 3Dwm server. From Debian 3.0r0 APT
</para>
</glossdef>
</glossentry>

<glossentry>
<glossterm>
3dwm-pickclient
</glossterm>
<glossdef>
<para>
A 3Dwm client This is an example showing how libzorn work. From Debian 3.0r0 APT
</para>
</glossdef>
</glossentry>

<glossentry>
<glossterm>
3dwm-server
</glossterm>
<glossdef>
<para>
Binary server daemon This package contains display binary server daemon. From Debian 3.0r0 APT
</para>
</glossdef>
</glossentry>

<glossentry>
<glossterm>
3dwm-texclient
</glossterm>
<glossdef>
<para>
A 3Dwm client This is a simple client used for testing the 3Dwm texture capabilities. From Debian 3.0r0 APT
</para>
</glossdef>
</glossentry>

<glossentry>
<glossterm>
3dwm-vncclient
</glossterm>
<glossdef>
<para>
A 3Dwm client This will open a connection to the VNC server from the 3Dwm server, and the graphical output will be displayed on a single quad in the 3Dwm world (you may need to zoom out to see it). Currently, vncclient supports no interaction with the VNC window (the bindings and the actual communication code has been implemented, only the 3Dwm side is missing). From Debian 3.0r0 APT
</para>
</glossdef>
</glossentry>

<glossentry>
<glossterm>
4.2
</glossterm>
<glossdef>
<para>
/for&apos; poynt too&apos;/ n. Without a prefix, this almost invariably refers to BSD Unix release 4.2. Note that it is an indication of cluelessness to say &quot;version 4.2&quot;, and &quot;release 4.2&quot; is rare; the number stands on its own, or is used in the more explicit forms 4.2BSD or (less commonly) BSD 4.2. Similar remarks apply to &quot;4.3&quot;, &quot;4.4&quot; and to earlier, less-widespread releases 4.1 and 2.9. From Jargon Dictionary
</para>
</glossdef>
</glossentry>

<glossentry>
<glossterm>
44bsd-rdist
</glossterm>
<glossdef>
<para>
4.4BSD rdist. This is the traditional rdist from 4.4BSD Lite with FreeBSD fixes. It is provided for compatibility with third-party rdist implementations. This is the binary package for 4.4BSD rdist. From Debian 3.0r0 APT
</para>
</glossdef>
</glossentry>

<glossentry>
<glossterm>
4Suite
</glossterm>
<glossdef>
<para>
The 4Suite package contains XML-related tools and libraries for Python, including 4DOM, 4XSLT, 4XPath, 4RDF, and 4XPointer. 4DOM is animplementation of the World Wide Web Consortium&apos;s (W3C) standard DOMAPI for HTML and XML content manipulation. 4DOM provides full distributed-object support based on the IDL used in the formal DOM specification. 4XSLT is an XSLT processor, which can be used to renderXML documents as customized and stylized HTML for current Web browsers. 4XSLT also provides a powerful programming API forapplications to use for low-level, customized transformations of XML documents. 4XPath is a library implementating the W3C&apos;s XPath language for indicating and selecting portions of an XML document. 4RDF is a toolkit and library for RDF processing. 4XPointer is a toolkit for processing fragment identifiers for URI references which locateresources of Internet media type text/xml. From Redhat 8.0 RPM
</para>
</glossdef>
</glossentry>

<glossentry>
<glossterm>
6tunnel
</glossterm>
<glossdef>
<para>
TCP proxy for non-IPv6 applications 6tunnel allows you to use services provided by IPv6 hosts with IPv4-only applications and vice versa. It can bind to any of your IPv4 or IPv6 addresses and forward all data to IPv4 or IPv6 host. It can be used for example as an IPv6-capable IRC proxy. From Debian 3.0r0 APT
</para>
</glossdef>
</glossentry>

<glossentry>
<glossterm>
8-character password
</glossterm>
<glossdef>
<para>
Some systems, like Win9x and Solaris, limit the user to 8 characters in the password. Key point: Security conscious users of such systems need to make sure they use a more random mix of characters because they cannot create long passwords. Key point: Password cracking such systems is a little easier. From Hacking-Lexicon
</para>
</glossdef>
</glossentry>

<glossentry>
<glossterm>
8.3 filename
</glossterm>
<glossdef>
<para>
A filename corresponding to the standard MS-DOS gleaming conventions, which restrict filenames to 8 characters and optional extensions to 3 characters. From QUECID Such restictions can prove to be an infuriating problem like when transfering files across a heterogenous network such as between Windows and Linux machines. Since older versions of Windows only support 8.3 style filenames files transferred to it will be truncated. For example, &quot;C:\Program Files&quot; may appear to be &quot;C:\Progra~1&quot; From Binh
</para>
</glossdef>
</glossentry>

<glossentry>
<glossterm>
822-date
</glossterm>
<glossdef>
<para>
Command to print date and time in RFC822 format From whatis
</para>
</glossdef>
</glossentry>

<glossentry>
<glossterm>
9menu
</glossterm>
<glossdef>
<para>
Creates X menus from the shell. This is 9menu, a simple program that allows you to create X menus from the shell, where each menu item will run a command. 9menu is intended for use with 9wm, but can be used with any other window manager. From Debian 3.0r0 APT
</para>
</glossdef>
</glossentry>

<glossentry>
<glossterm>
9wm
</glossterm>
<glossdef>
<para>
An emulation of the Plan 9 window manager 8-1/2. 9wm is an X window manager which attempts to emulate the Plan 9 window manager 8-1/2 as far as possible within the constraints imposed by X. It provides a simple yet comfortable user interface, without garish decorations or title-bars. Or icons. And it&apos;s click-to-type. From Debian 3.0r0 APT
</para>
</glossdef>
</glossentry>

<glossentry>
<glossterm>
[
</glossterm>
<glossdef>
<para>
check file types and compare values From whatis
</para>
</glossdef>
</glossentry>

<glossentry>
<glossterm>
~user
</glossterm>
<glossdef>
<para>
On UNIX, a home directory can be referenced by using a tilde (~) followed by their login name. For example, &quot;ls ~rob&quot; on my computer will list all the files in &quot;/home/rob&quot;. Key point: Web-servers often allow access to user&apos;s directories this way. An example would be http://www.robertgraham.com/~rob. Key point: A big hole on the Internet is that people unexpectedly open up information. For example, the file .bash_history is a hidden file in a person&apos;s directory that contains the complete text of all commands they&apos;ve entered into the shell (assuming their shell is bash, which is the most popular one on Linux). From Hacking-Lexicon
</para>
</glossdef>
</glossentry>

</glossary>

