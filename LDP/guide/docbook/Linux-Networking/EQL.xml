<sect1 id="EQL">

<title>EQL</title>

<para>
EQL provides a means of utilizing multiple point to point lines such
as PPP, SLIP or PLIP as a single logical link to carry TCP/IP. Often,
it is cheaper to use multiple lower speed lines than to have one high
speed line installed. In short, EQL is multiple line traffic equaliser.
</para>

<para>
EQL is integrated into the Linux kernel. The EQL device name is `eql'.
With the standard kernel source you may have only one EQL device per
machine. 
</para>

<para>
<screen>
  Kernel Compile Options:

               Network device support  --->
                   [*] Network device support
                   <*> EQL (serial line load balancing) support
</screen>
</para>

<para>
To support this mechanism the machine at the other end of the lines
must also support EQL. Linux, Livingstone Portmasters and newer dial-
in servers support compatible facilities.
</para>

<para>
To configure EQL you will need the EQL tools which are available from:
metalab.unc.edu.
</para>

<para>
Configuration is fairly straightforward. You start by configuring the
eql interface. The eql interface is just like any other network
device. You configure the IP address and mtu using the ifconfig
utility, so something like:
</para>

<para>
<screen>
   root# ifconfig eql 192.168.10.1 mtu 1006
</screen>
</para>

<para>
Next you need to manually initiate each of the lines you will use.
These may be any combination of point to point network devices. How
you initiate the connections will depend on what sort of link they
are, refer to the appropriate sections for further information.
</para>

<para>
Lastly you need to associate the serial link with the EQL device, this
is called `enslaving' and is done with the eql_enslave command as
shown:
</para>

<para>
<screen>
  root# eql_enslave eql sl0 28800
  root# eql_enslave eql ppp0 14400
</screen>
</para>

<para>
The `estimated speed' parameter you supply eql_enslave doesn't do
anything directly. It is used by the EQL driver to determine what
share of the datagrams that device should receive, so you can fine
tune the balancing of the lines by playing with this value.
</para>

<para>
To disassociate a line from an EQL device you use the eql_emancipate
command as shown:
</para>

<para>
<screen>
  root# eql_emancipate eql sl0
</screen>
</para>

<para>
You add routing as you would for any other point to point link, except
your routes should refer to the eql device rather than the actual
serial devices themselves, typically you would use:
</para>
  
<para>
<screen>
  root# route add default eql
</screen>
</para>

<para>
The EQL driver was developed by Simon Janes, simon@ncm.com.
</para>

</sect1>  
