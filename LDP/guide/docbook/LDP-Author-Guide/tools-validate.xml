<!-- 
	<!DOCTYPE book PUBLIC '-//OASIS//DTD DocBook XML V4.2//EN'>
-->
<section id="tools-validate">
<title>Validation</title>
<!-- this chapter doesn't flow well-fix the order of hte
sections. -->

<section id="validate-online">
	<title>Validation for the Faint of Heart</title>
	<para>
		Your life is already hard enough without having to install a full 
		set of tools just to see if you validate as well. You can upload your 
		raw XML files and point this validation tool at the URL of your
		file.
		<ulink
		url="http://validate.sf.net">http://validate.sf.net</ulink> 
	</para>	
		
	<note><para>
		When this information was added to the Author Guide external entities
		were not supported. Follow the instructions provided on the
		Validate site.
	</para></note>
</section>

  <section id="configurations">
    <title>Configuration needed </title>
    <indexterm zone="configurations">
      <primary>configurations</primary>
    </indexterm>

	<section id="config-catalog">
	<title>Catalogs</title>
    <para>The identifier systems used by <acronym>SGML</acronym> and
      by some tools
    are based on catalogs that perform the translation of these
    identifiers to files that hold the necessary definitions.</para>

    <para>The section on tailoring a catalog (see <xref
    linkend="making-catalogs"/>) will give more details about these
    files.</para> 

<!-- from the EMACS section -->
<para>
<!-- make this paragraph shorter and tighter -->
	To verify if whether or not your system knows where to
	find its DocBook DTDs you will need to view the list 
	of your system's
	environmental variables. This can be done by typing
	<command>printenv</command> at a prompt.
	Look for SGML_CATALOG_FILES. If it is not set, or does not
	point to the correct directory for the DocBook DTD files
	then you will need to set the correct directory. 
</para>

<para>
	This list of files is stored in a catalog. 
	Even though we are working with XML files, Emacs stores this
	information in the SGML_CATALOG_FILES environmental
	variable. You will need to export this variable with the
	correct location for your DTD files. If you don't already
	have a copy of the DTD files for DocBook, please read
	<xref linkend="dtd" />.
</para>

<para>
	Once you've found your DTD files
	you can export their location so that programs
	know where to find them:
</para> 

<screen>
	<prompt>bash$</prompt> 
	<command>export
	SGML_CATALOG_FILES=<filename>/usr/lib/sgml/catalog</filename></command>
</screen>
<!-- from the EMACS section -->

    <para>For tools to be able to find the necessary catalog(s),
    the environment variable <envar>SGML_CATALOG_FILES</envar>
    should be set, as shown in the following example:</para> 

    <informalexample id="var-sgml-catalog-files">
      <para>
      <screen><prompt>$</prompt> <command>export</command> <envar>SGML_CATALOG_FILES="/usr/lib/sgml/catalog"</envar></screen></para>
    </informalexample>

    <indexterm zone="var-sgml-catalog-files">
      <primary>configurations</primary>
      <secondary>variables</secondary>
      <tertiary>SGML_CATALOG_FILES</tertiary>
    </indexterm>

    <para>
	 	This is the only necessary additional 
	 	configuration for DocBook
    	tools and the like to work correctly on your platform.
	</para>
  </section>
  </section> <!-- config-catalog -->


  <section id="making-catalogs">
    <title>Creating and modifying catalogs</title>

    <indexterm zone="making-catalogs">
      <primary>catalog</primary>
      <secondary>creating</secondary>
    </indexterm>

    <indexterm zone="making-catalogs">
      <primary>catalog</primary>
      <secondary>modifying</secondary>
    </indexterm>

    <para>
	 	A catalog is a text file containing the 
	 	translation rules of the
    	public identifier to system's files.
	 </para>

    <para>
	 	They make it easy to use DocBook, for they 
		allow each user to have their files installed 
		in a different place (e.g. your home directory, 
    <filename class="directory">/usr/local/sgml</filename>, 
	 or in any other place) though no other change on 
	 the document is necessary for it to be
    processed and <quote>compiled</quote>.
    </para>

    <example id="example-catalog">
      <title>Example of catalog</title>
      <programlistingco>
        <areaspec>
          <area coords="1" id="ex.catalog.comment"/>
          <area coords="5" id="ex.catalog.definition"/>
          <area coords="11" id="ex.catalog.eof"/>
        </areaspec>
        <programlisting>
-- Catalogue for the Conectiva Styles -- 

OVERRIDE YES
 
PUBLIC "-//Conectiva SA//DTD DocBook Conectiva variant V1.0//EN" 
       "/home/ldp/styles/books.dtd" 

DELEGATE "-//OASIS" 
         "/home/ldp/SGML/dtds/catalog.dtd"

DOCTYPE BOOK /home/ldp/SGML/dtds/docbook/db31/docbook.dtd
 
-- EOF -- 
        </programlisting>
        <calloutlist>
          <callout arearefs="ex.catalog.comment">
            <para> Comment. Comments start with <quote>--</quote> and
            follow to the end of the line. </para> 
          </callout>
          <callout arearefs="ex.catalog.definition">
            <para> The public type association <parameter class="option">"-//Conectiva SA//DTD books V1.0//EN"</parameter>
            with the file <filename>books.dtd</filename> on the directory <filename
            class="directory">/home/ldp/styles</filename>. </para> 
          </callout>
          <callout arearefs="ex.catalog.eof">
            <para> Comment signifying the end of the file.</para>
          </callout>
        </calloutlist>
      </programlistingco>
      <indexterm zone="example-catalog">
        <primary>catalog</primary>
        <secondary>creating</secondary>
        <tertiary>example</tertiary>
      </indexterm>
      <indexterm zone="example-catalog">
        <primary>catalog</primary>
        <secondary>modifying</secondary>
        <tertiary>sample</tertiary>
      </indexterm>
    </example>

    <para>As in the example above, to associate an identifier to a file just 
    follow the sequence shown:</para>

    <orderedlist>
      <listitem>
        <para>Copy the identifier <emphasis>PUBLIC</emphasis></para>
      </listitem>
      <listitem>
        <para>Type the identifying text </para>
      </listitem>
      <listitem>
        <para>Indicate the path to the associated file</para>
      </listitem>
    </orderedlist>

    <section id="catalog-explaining-terminology">
      <title>Explaining the terminology system </title>

      <indexterm zone="catalog-explaining-terminology">
        <primary>catalog</primary>
        <secondary>creating</secondary>
        <tertiary>terminology</tertiary>
      </indexterm>
      <indexterm zone="catalog-explaining-terminology">
        <primary>catalog</primary>
        <secondary>modifying</secondary>
        <tertiary>terminology</tertiary>
      </indexterm>

      <para>Notice the identifier</para>

      <programlisting>"-//Conectiva SA//DTD books V1.0//EN"</programlisting>

      <para>Its formation is not random and follows some pre-defined
      conditions.</para>

      <para>The token <quote>-</quote> indicates that the used identifier isn't a 
      registered type. Only a few identifiers are registered and those usualy
      belong to entities like <acronym>ISO</acronym>, <acronym>IEEE</acronym>, 
      and others.</para>

      <para>The second part of the identifier defines the name of the 
      organization that created it. On the example above, &conectiva; S.A.</para>

      <para>The one before the last defines the contents (in this case a 
      <acronym>DTD</acronym><footnote>
          <para>These are valid: <acronym>DTD</acronym>, DOCUMENT, ELEMENTS,
      ENTITIES and NONSGML.</para> </footnote>) and the name of the identified
      text.</para>

      <para>The last element indicates the language in which the document was
      written. Since DocBook is a DTD written in English, the language is
      <literal>EN</literal>. The two letter code recommended is the 
      <acronym>ISO</acronym> identification of the language.</para>

      <para>More information can be obtained at <ulink
      url="http://www.oasis-open.org/html/a401.htm">OASIS Technical Resolution
      9401:1997 (Amendment 2 to TR 9401)</ulink>.</para> 
    </section>

    <section id="making-catalogs-commands">
      <title>Useful commands for catalogs</title>
<!--
FIXME
Restructure as follows:
        before: author info, dates, versions, copyright etc
        content: lists, paragraphs, sections, application
        asides: warning, note, tip
        commands: userinput, parameter, option
        display: screen
        references: sample of how to make a bibliography, link within a
                document
        after: license, appendix
-->

	  

      <para>The most common commands to be used on catalogs are:</para>

      <variablelist>
        <varlistentry>
          <term><literal>PUBLIC</literal></term>
          <listitem>
            <para>The keyword <literal>PUBLIC</literal> maps
            public identifiers for identifiers on the system.</para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term><literal>SYSTEM</literal></term>
          <listitem>
            <para>The <literal>SYSTEM</literal> keyword maps
            system identifiers for files on the system.</para>
            <informalexample>
              <para>
SYSTEM "http://nexus.conectiva/utilidades/publicacoes/livros.dtd" 
              "publicacoes/livros.dtd"</para>
            </informalexample>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term><literal>SGMLDECL</literal></term>
          <listitem>
            <para>The keyword <literal>SGMLDECL</literal> designates the
            system identifier of the SGML statement that should be used.
            </para>
            <informalexample>
              <para>
SGMLDECL "publishings/books.dcl"</para>
            </informalexample>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term><literal>DTDDECL</literal></term>
          <listitem>
            <para>Similar to the <literal>SGMLDECL</literal> the
            keyword <literal>DTDDECL</literal> identifies the SGML statement
            that should be used. <literal>DTDDECL</literal> makes the 
            association of the statement with a public identifier to a
            <acronym>DTD</acronym>. Unfortunately, this association isn't 
            supported by the open source tools available. The benefits of this
            statement can be achieved somehow with multiple catalog files.
            </para>
            <informalexample>
              <para>
DTDDECL "-//Conectiva SA//DTD livros V1.0//EN" "publicacoes/livros.dcl"</para>
            </informalexample>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term><literal>CATALOG</literal></term>
          <listitem>
            <para>The keyword <literal>CATALOG</literal> allows a catalog
            to be included inside another. This is a way to make use of several
            different catalogs without the need to alter them.
            </para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term><literal>OVERRIDE</literal></term>
          <listitem>
            <para>The keyword <literal>OVERRIDE</literal> informs whether an 
            identifier has priority over a system identifier.
            The standard on most systems is that the system identifier
            has priority over the public one.</para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term><literal>DELEGATE</literal></term>
          <listitem>
            <para>The keyword <literal>DELEGATE</literal> allows the 
            association of a catalog to a specific type of public identifier.
            The clause <literal>DELEGATE</literal> is very similar to the
            <literal>CATALOG</literal>, except for the fact that it doesn't do
            anything until a specific pattern is specified.</para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term><literal>DOCTYPE</literal></term>
          <listitem>
            <para>If a document starts with a type of document, but
            has no public identifier and no system identifier the clause 
            <literal>DOCTYPE</literal> associates this document
            with a specific DTD.</para>
          </listitem>
        </varlistentry>
      </variablelist>
    </section>

  </section>

<!-- the editing bits will need to be stripped out -->
      <section id="validatexml">
        <title>Validating XML code</title>
        <para>Validating XML is a touch harder than validating SGML
        code, but it can be done.  You will need to have XML DocBook
        installed, and then set the <envar>SGML_CATALOG_FILES</envar>
        to the location of xml.soc (included with jade) and to
        the location of the DocBook XML catalog file. The
		  <application>nsgmls</application> is part of the
		  <application>jade</application> suite. For more information
		  processing files with Jade/OpenJade please read <ulink
		  url="http://www.tldp.org/HOWTO/DocBook-OpenJade-SGML-XML-HOWTO/index.html">DocBook
		  XML/SGML Processing Using OpenJade</ulink>.
        </para>
        <screen>
<prompt>bash$</prompt> <command>export <envar>SGML_CATALOG_FILES</envar>=/usr/lib/sgml/declaration/xml.soc:/usr/lib/xml/catalog</command>
<prompt>bash$</prompt> <command>nsgmls -s HOWTO-HOWTO.xml</command>
</screen>

        <para> If there are no issues, you'll just get your command
        prompt back. The <parameter>-s</parameter> tells
		  <application>nsgmls</application> to show only the errors.</para>

		<note><para>
			If you get errors about a function not being found you may
			need to point <command>nsgmls</command> to your
			<filename>xml.dcl</filename>. For me it looks like this:
			<command>nsgmls -s
			<filename>/usr/share/sgml/declaration/xml.dcl</filename>
			<replaceable>HOWTO.xml</replaceable></command>
		</para></note>
		  
      </section>
	</section>

<!-- FIXME  PS -->
<!-- 
	Debian needs the docbook-utils package to get nsgmls 
	I downloaded the following packages:
	 docbook-utils sgmls-doc doc-base openjade1.3 openjade

	Which installed all of:
	  doc-base docbook-dsssl docbook-utils jade jadetex libosp4
	  libostyle1 libsgmls-perl libsp1 openjade openjade1.3 sgmls-doc
	  sgmlspl sp
-->
