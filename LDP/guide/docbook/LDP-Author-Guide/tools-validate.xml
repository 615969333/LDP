<!-- 
	<!DOCTYPE book PUBLIC '-//OASIS//DTD DocBook XML V4.2//EN'>
-->
<chapter id="tools-validate">
<!-- this chapter doesn't flow well-fix the order of hte
sections. -->

<section id="validate-online">
	<title>Validation for the Faint of Heart</title>
	<para>
		Your life is already hard enough without having to install a full 
		set of tools just to see if you validate as well. You can upload your 
		raw XML files and point this validation tool at the URL of your
		file.
		<ulink
		url="http://validate.sf.net">http://validate.sf.net</ulink> 
	</para>	
		
	<note><para>
		When this information was added to the Author Guide external entities
		were not supported. Follow the instructions provided on the
		Validate site.
	</para></note>
</section>


  <section id="configurations">
    <title>Configuration needed </title>
    <indexterm zone="configurations">
      <primary>configurations</primary>
    </indexterm>

	<section id="config-catalog">
    <para>The identifier systems used by <acronym>SGML</acronym> and
      by some tools
    are based on catalogs that perform the translation of these
    identifiers to files that hold the necessary definitions.</para>

    <para>The section on tailoring a catalog (see <xref
    linkend="making-catalogs"/>) will give more details about these
    files.</para> 

<!-- from the EMACS section -->
<para>
<!-- make this paragraph shorter and tighter -->
	To verify if whether or not your system knows where to
	find its DocBook DTDs you will need to view the list 
	of your system's
	environmental variables. This can be done by typing
	<command>printenv</command> at a prompt.
	Look for SGML_CATALOG_FILES. If it is not set, or does not
	point to the correct directory for the DocBook DTD files
	then you will need to set the correct directory. 
</para>

<para>
	This list of files is stored in a catalog. 
	Even though we are working with XML files, Emacs stores this
	information in the SGML_CATALOG_FILES environmental
	variable. You will need to export this variable with the
	correct location for your DTD files. If you don't already
	have a copy of the DTD files for DocBook, please read
	<xref linkend="dtds" />.
</para>

<para>
	Once you've found your DTD files
	you can export their location so that programs
	know where to find them:
</para> 

<screen format="linespecific">
	<prompt>bash$</prompt> 
	<command>export
	SGML_CATALOG_FILES=
		<variable>/usr/lib/sgml/catalog</variable></command>
</screen>
<!-- from the EMACS section -->

    <para>For tools to be able to find the necessary catalog(s),
    the environment variable <envar>SGML_CATALOG_FILES</envar>
    should be set, as shown in the following example:</para> 

    <informalexample id="var-sgml-catalog-files">
      <para>
      <screen><prompt>$</prompt> <command>export</command> <envar>SGML_CATALOG_FILES="/usr/lib/sgml/catalog"</envar></screen></para>
    </informalexample>

    <indexterm zone="var-sgml-catalog-files">
      <primary>configurations</primary>
      <secondary>variables</secondary>
      <tertiary>SGML_CATALOG_FILES</tertiary>
    </indexterm>

    <para>
	 	This is the only necessary additional 
	 	configuration for DocBook
    	tools and the like to work correctly on your platform.
	</para>
  </section>
  </section> <!-- config-catalog -->


  <section id="making-catalogs">
    <title>Creating and modifying catalogs</title>

    <indexterm zone="making-catalogs">
      <primary>catalog</primary>
      <secondary>creating</secondary>
    </indexterm>

    <indexterm zone="making-catalogs">
      <primary>catalog</primary>
      <secondary>modifying</secondary>
    </indexterm>

    <para>
	 	A catalog is a text file containing the 
	 	translation rules of the
    	public identifier to system's files.
	 </para>

    <para>
	 	They make it easy to use DocBook, for they 
		allow each user to have their files installed 
		in a different place (e.g. your home directory, 
    <filename class="directory">/usr/local/sgml</filename>, 
	 or in any other place) though no other change on 
	 the document is necessary for it to be
    processed and <quote>compiled</quote>.
    </para>

    <example id="example-catalog">
      <title>Example of catalog</title>
      <programlistingco>
        <areaspec>
          <area coords="1" id="ex.catalog.comment"/>
          <area coords="5" id="ex.catalog.definition"/>
          <area coords="11" id="ex.catalog.eof"/>
        </areaspec>
        <programlisting>
-- Catalogue for the Conectiva Styles -- 

OVERRIDE YES
 
PUBLIC "-//Conectiva SA//DTD DocBook Conectiva variant V1.0//EN" 
       "/home/ldp/styles/books.dtd" 

DELEGATE "-//OASIS" 
         "/home/ldp/SGML/dtds/catalog.dtd"

DOCTYPE BOOK /home/ldp/SGML/dtds/docbook/db31/docbook.dtd
 
-- EOF -- 
        </programlisting>
        <calloutlist>
          <callout arearefs="ex.catalog.comment">
            <para> Comment. Comments start with <quote>--</quote> and
            follow to the end of the line. </para> 
          </callout>
          <callout arearefs="ex.catalog.definition">
            <para> The public type association <parameter class="option">"-//Conectiva SA//DTD books V1.0//EN"</parameter>
            with the file <filename>books.dtd</filename> on the directory <filename
            class="directory">/home/ldp/styles</filename>. </para> 
          </callout>
          <callout arearefs="ex.catalog.eof">
            <para> Comment signifying the end of the file.</para>
          </callout>
        </calloutlist>
      </programlistingco>
      <indexterm zone="example-catalog">
        <primary>catalog</primary>
        <secondary>creating</secondary>
        <tertiary>example</tertiary>
      </indexterm>
      <indexterm zone="example-catalog">
        <primary>catalog</primary>
        <secondary>modifying</secondary>
        <tertiary>sample</tertiary>
      </indexterm>
    </example>

    <para>As in the example above, to associate an identifier to a file just 
    follow the sequence shown:</para>

    <orderedlist>
      <listitem>
        <para>Copy the identifier <emphasis>PUBLIC</emphasis></para>
      </listitem>
      <listitem>
        <para>Type the identifying text </para>
      </listitem>
      <listitem>
        <para>Indicate the path to the associated file</para>
      </listitem>
    </orderedlist>

    <section id="catalog-explaining-terminology">
      <title>Explaining the terminology system </title>

      <indexterm zone="catalog-explaining-terminology">
        <primary>catalog</primary>
        <secondary>creating</secondary>
        <tertiary>terminology</tertiary>
      </indexterm>
      <indexterm zone="catalog-explaining-terminology">
        <primary>catalog</primary>
        <secondary>modifying</secondary>
        <tertiary>terminology</tertiary>
      </indexterm>

      <para>Notice the identifier</para>

      <programlisting>"-//Conectiva SA//DTD books V1.0//EN"</programlisting>

      <para>Its formation is not random and follows some pre-defined
      conditions.</para>

      <para>The token <quote>-</quote> indicates that the used identifier isn't a 
      registered type. Only a few identifiers are registered and those usualy
      belong to entities like <acronym>ISO</acronym>, <acronym>IEEE</acronym>, 
      and others.</para>

      <para>The second part of the identifier defines the name of the 
      organization that created it. On the example above, &conectiva; S.A.</para>

      <para>The one before the last defines the contents (in this case a 
      <acronym>DTD</acronym><footnote>
          <para>These are valid: <acronym>DTD</acronym>, DOCUMENT, ELEMENTS,
      ENTITIES and NONSGML.</para> </footnote>) and the name of the identified
      text.</para>

      <para>The last element indicates the language in which the document was
      written. Since DocBook is a DTD written in English, the language is
      <literal>EN</literal>. The two letter code recommended is the 
      <acronym>ISO</acronym> identification of the language.</para>

      <para>More information can be obtained at <ulink
      url="http://www.oasis-open.org/html/a401.htm">OASIS Technical Resolution
      9401:1997 (Amendment 2 to TR 9401)</ulink>.</para> 
    </section>

    <section id="making-catalogs-commands">
      <title>Useful commands for catalogs</title>

FIX ME!!!
Restructure as follows:
        before: author info, dates, versions, copyright etc
        content: lists, paragraphs, sections, application
        asides: warning, note, tip
        commands: userinput, parameter, option
        display: screen
        references: sample of how to make a bibliography, link within a
                document
        after: license, appendix


	  

      <para>The most common commands to be used on catalogs are:</para>

      <variablelist>
        <varlistentry>
          <term><literal>PUBLIC</literal></term>
          <listitem>
            <para>The keyword <literal>PUBLIC</literal> maps
            public identifiers for identifiers on the system.</para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term><literal>SYSTEM</literal></term>
          <listitem>
            <para>The <literal>SYSTEM</literal> keyword maps
            system identifiers for files on the system.</para>
            <informalexample>
              <para>
SYSTEM "http://nexus.conectiva/utilidades/publicacoes/livros.dtd" 
              "publicacoes/livros.dtd"</para>
            </informalexample>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term><literal>SGMLDECL</literal></term>
          <listitem>
            <para>The keyword <literal>SGMLDECL</literal> designates the
            system identifier of the SGML statement that should be used.
            </para>
            <informalexample>
              <para>
SGMLDECL "publishings/books.dcl"</para>
            </informalexample>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term><literal>DTDDECL</literal></term>
          <listitem>
            <para>Similar to the <literal>SGMLDECL</literal> the
            keyword <literal>DTDDECL</literal> identifies the SGML statement
            that should be used. <literal>DTDDECL</literal> makes the 
            association of the statement with a public identifier to a
            <acronym>DTD</acronym>. Unfortunately, this association isn't 
            supported by the open source tools available. The benefits of this
            statement can be achieved somehow with multiple catalog files.
            </para>
            <informalexample>
              <para>
DTDDECL "-//Conectiva SA//DTD livros V1.0//EN" "publicacoes/livros.dcl"</para>
            </informalexample>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term><literal>CATALOG</literal></term>
          <listitem>
            <para>The keyword <literal>CATALOG</literal> allows a catalog
            to be included inside another. This is a way to make use of several
            different catalogs without the need to alter them.
            </para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term><literal>OVERRIDE</literal></term>
          <listitem>
            <para>The keyword <literal>OVERRIDE</literal> informs whether an 
            identifier has priority over a system identifier.
            The standard on most systems is that the system identifier
            has priority over the public one.</para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term><literal>DELEGATE</literal></term>
          <listitem>
            <para>The keyword <literal>DELEGATE</literal> allows the 
            association of a catalog to a specific type of public identifier.
            The clause <literal>DELEGATE</literal> is very similar to the
            <literal>CATALOG</literal>, except for the fact that it doesn't do
            anything until a specific pattern is specified.</para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term><literal>DOCTYPE</literal></term>
          <listitem>
            <para>If a document starts with a type of document, but
            has no public identifier and no system identifier the clause 
            <literal>DOCTYPE</literal> associates this document
            with a specific DTD.</para>
          </listitem>
        </varlistentry>
      </variablelist>
    </section>

  </section>




<!-- the editing bits will need to be stripped out -->
      <section id="validatesgml">
        <title>Validating SGML</title>
        <para> Using jade, or really the nsgmls command, you can
        validate your .sgml code against the DTD to make sure there
        aren't any errors. </para>
        
        <screen>
<prompt>bash$</prompt> <command>nsgmls -s HOWTO-HOWTO.sgml</command>
</screen>

        <para> If there are no issues, you'll just get your command
        prompt back. </para>
      </section>
      <section id="validatexml">
        <title>Validating XML code</title>
        <para>Validating XML is a touch harder than validating SGML
        code, but it can be done.  You will need to have XML DocBook
        installed, and then set the <envar>SGML_CATALOG_FILES</envar>
        to the location of xml.soc (included with jade) and to
        the location of the DocBook XML catalog file.
        </para>
        <screen>
<prompt>bash$</prompt> <command>export <envar>SGML_CATALOG_FILES</envar>=/usr/lib/sgml/declaration/xml.soc:/usr/lib/xml/catalog</command>
<prompt>bash$</prompt> <command>nsgmls -s HOWTO-HOWTO.xml</command>
</screen>

<!-- FIXME -->
<!-- 
	Debian needs the docbook-utils package to get nsgmls 
	I downloaded the following packages:
	 docbook-utils sgmls-doc doc-base openjade1.3 openjade

	Which installed all of:
	  doc-base docbook-dsssl docbook-utils jade jadetex libosp4
	  libostyle1 libsgmls-perl libsp1 openjade openjade1.3 sgmls-doc
	  sgmlspl sp
-->


       </section>
    
	 <section id="tools-validate-editors">
      <title>Editing Tools That Also Validate</title>
      <para>The following tools may be used to create, edit, or
      validate your HOWTO.</para>

      <section id="psgml">
        <title>Emacs (PSGML)</title>
        <para>Optional - <ulink
        url="http://www.lysator.liu.se/~lenst/about_psgml/">http://www.lysator.liu.se/~lenst/about_psgml/</ulink></para>
        <indexterm>
          <primary>Emacs</primary>
        </indexterm>
        <indexterm>
          <primary>Editors</primary>
          <secondary>emacs</secondary>
        </indexterm>
        <para>Emacs has an SGML writing mode called psgml that is a
        major mode designed for editing SGML and XML documents. It
        provides <quote>syntax highlighting</quote> or <quote>pretty
        printing</quote> features that make SGML tags stand out, a way
        to insert tags other than typing them by hand, and the ability
        to validate your document while writing.</para> 
        <para>For users of Emacs, it's a great way to go, and many
        believe it to allow more versatility than any other SGML
        documentation tool. It works with DocBook, LinuxDoc and other
        DTDs equally well.</para>
    <section>
      <title> Writing SGML using PSGML </title>

      <section><title> Introduction </title>
        <para> If you have installed a recent distribution, you may
        already have PSGML installed for use with Emacs. To check,
        start Emacs and look for the PSGML documentation (<keycombo
        moreinfo="none"><keycap moreinfo="none">C</keycap><keycap
        moreinfo="none">h</keycap></keycombo><keycap
        moreinfo="none">i</keycap><keycap
        moreinfo="none">m</keycap><keycap
        moreinfo="none">psgml</keycap>).</para> 
        <para> From here on, we assume you have PSGML installed for
        use with a recent version of GNU Emacs. If that all went by
        too fast for you, see the free chapter from Bob Ducharme's
        SGML CD book: <ulink
        url="http://www.snee.com/bob/sgmlfree/psgmqref.html">http://www.snee.com/bob/sgmlfree/psgmqref.html</ulink>.</para>
      </section>

      <section>
        <title> Updating your .emacs to use PSGML </title>
        <para> If you want GNU Emacs to enter PSGML mode when you open
        a <emphasis>.sgml</emphasis> file and be ready for SGML
        editing, make sure PSGML can find the DocBook DTD. If your
        distribution already had PSGML set up for use with GNU Emacs,
        you probably do not have to do anything to get this to
        work. Otherwise, you may need to set an environment variable
        that tells PSGML where to look for the SGML catalog (the list
        of DTDs). </para> 
        <para> For example: </para>
        <screen format="linespecific">
<prompt>bash$</prompt> <command>export SGML_CATALOG_FILES=/usr/lib/sgml/catalog</command>
</screen>
        <para> Then add something like the following to your .emacs
        file: </para> 
        <programlisting>
;; *******************************************************************
;; set up psgml mode...
;; use psgml-mode instead of emacs native sgml-mode
;;

(autoload 'sgml-mode "psgml" "Major mode to edit SGML files." t )
(setq auto-mode-alist
  (append
  (list
    '("\\.sgm$" . sgml-mode)
    '("\\.sgml$" . sgml-mode)
    )
  auto-mode-alist))

;; set some psgml variables

(setq sgml-auto-activate-dtd t)
(setq sgml-omittag-transparent t)
(setq sgml-balanced-tag-edit t)
(setq sgml-auto-insert-required-elements t)
(setq sgml-live-element-indicator t)
(setq sgml-indent-step nil)

;; create faces to assign to markup categories

(make-face 'sgml-comment-face)
(make-face 'sgml-start-tag-face)
(make-face 'sgml-end-tag-face)
(make-face 'sgml-entity-face)
(make-face 'sgml-doctype-face) ; DOCTYPE data
(make-face 'sgml-ignored-face) ; data ignored by PSGML
(make-face 'sgml-ms-start-face) ; marked sections start
(make-face 'sgml-ms-end-face) ; end of marked section
(make-face 'sgml-pi-face) ; processing instructions
(make-face 'sgml-sgml-face) ; the SGML declaration
(make-face 'sgml-shortref-face) ; short references

;; view a list of available colors with the emacs-lisp command:
;;
;; list-colors-display
;;
;; please assign your own groovy colors, because these are pretty bad
(set-face-foreground 'sgml-comment-face "coral")
;(set-face-background 'sgml-comment-face "cornflowerblue")
(set-face-foreground 'sgml-start-tag-face "slateblue")
;(set-face-background 'sgml-start-tag-face "cornflowerblue")
(set-face-foreground 'sgml-end-tag-face "slateblue")
;(set-face-background 'sgml-end-tag-face "cornflowerblue")
(set-face-foreground 'sgml-entity-face "lavender")
;(set-face-background 'sgml-entity-face "cornflowerblue")
(set-face-foreground 'sgml-doctype-face "lavender")
;(set-face-background 'sgml-doctype-face "cornflowerblue")
(set-face-foreground 'sgml-ignored-face "cornflowerblue")
;(set-face-background 'sgml-ignored-face "cornflowerblue")
(set-face-foreground 'sgml-ms-start-face "coral")
;(set-face-background 'sgml-ms-start-face "cornflowerblue")
(set-face-foreground 'sgml-ms-end-face "coral")
;(set-face-background 'sgml-ms-end-face "cornflowerblue")
(set-face-foreground 'sgml-pi-face "coral")
;(set-face-background 'sgml-pi-face "cornflowerblue")
(set-face-foreground 'sgml-sgml-face "coral")
;(set-face-background 'sgml-sgml-face "cornflowerblue")
(set-face-foreground 'sgml-shortref-face "coral")
;(set-face-background 'sgml-shortref-face "cornflowerblue")

;; assign faces to markup categories

(setq sgml-markup-faces '
  (
  (comment . sgml-comment-face)
  (start-tag . sgml-start-tag-face)
  (end-tag . sgml-end-tag-face)
  (entity . sgml-entity-face)
  (doctype . sgml-doctype-face)
  (ignored . sgml-ignored-face)
  (ms-start . sgml-ms-start-face)
  (ms-end . sgml-ms-end-face)
  (pi . sgml-pi-face)
  (sgml . sgml-sgml-face)
  (shortref . sgml-shortref-face)
  ))

;; tell PSGML to pay attention to face settings
(setq sgml-set-face t)
;; ...done setting up psgml-mode.
;; *******************************************************************
</programlisting>
        <para> Then restart Emacs </para>
      </section>
      
      <section>
        <title> SGML Smoke Test </title>
        <para> Try the following smoke test. Start a new file,
        <filename moreinfo="none">/tmp/test.sgml</filename> for
        example, and enter the following: </para>
        
        <programlisting format="linespecific">
<sgmltag class="starttag">!DOCTYPE test [
&lt;!ELEMENT test - - (#PCDATA)&gt;
]</sgmltag>
</programlisting>
        <para> Enter <keycombo moreinfo="none"><keycap
            moreinfo="none">C</keycap> <keycap
            moreinfo="none">c</keycap></keycombo><keycombo
            moreinfo="none"><keycap moreinfo="none">C</keycap> 
            <keycap moreinfo="none">p</keycap></keycombo>. If Emacs
            manages to parse your DTD, you will see <emphasis>Parsing
            prolog...done</emphasis> in the minibuffer. Try
            <emphasis>C-c C-e RETURN</emphasis> to insert a
            <emphasis><sgmltag
            class="starttag">test</sgmltag></emphasis> element. If
            things are working correctly, you should see the following
            in Emacs: </para> 
        <programlisting format="linespecific">
<sgmltag class="starttag">!DOCTYPE test [
&lt;!ELEMENT test - - (#PCDATA)&gt;
]</sgmltag>
<sgmltag class="starttag">test</sgmltag><sgmltag class="endtag">test</sgmltag>
</programlisting>
      </section>

      <section>
        <title> Writing a New HOWTO in DocBook </title>
        <para> Start a new file for your HOWTO and enter the
        following: </para> 
        <programlisting format="linespecific">
<sgmltag class="starttag">!DOCTYPE ARTICLE PUBLIC "-//OASIS//DTD DocBook V3.1//EN"</sgmltag>
</programlisting>
        <para> Enter <keycombo moreinfo="none"><keycap
            moreinfo="none">C</keycap><keycap
            moreinfo="none">c</keycap></keycombo><keycombo
            moreinfo="none"><keycap moreinfo="none">C</keycap> 
            <keycap moreinfo="none">p</keycap></keycombo> and hold
            your breath. If everything goes as planned, you will see
            Emacs chewing for a few seconds and then <emphasis>Parsing
            prolog...done</emphasis> in the minibuffer. </para> 
        <para> At this point, enter <keycombo moreinfo="none"><keycap
            moreinfo="none">C</keycap> <keycap
            moreinfo="none">c</keycap></keycombo><keycombo
            moreinfo="none"><keycap moreinfo="none">C</keycap><keycap
            moreinfo="none">e</keycap></keycombo><keycap
            moreinfo="none">RETURN</keycap> to insert an
            <emphasis><sgmltag
            class="starttag">article</sgmltag></emphasis> element and
            proceed to write your HOWTO. </para>
      </section>

      <section>
        <title> Quick Reference for Emacs with PSGML </title>
        <para> See Nik Clayton's primer for FreeBSD documentation:
        <ulink
        url="http://www.freebsd.org/tutorials/docproj-primer/psgml-mode.html">http://www.freebsd.org/tutorials/docproj-primer/psgml-mode.html</ulink>
        </para>
      </section>
    </section>
   </section>

      <section id="vim">
        <title>VIM</title>
        <para><ulink
        url="http://www.vim.org">http://www.vim.org</ulink></para> 
        <para>No mention of Emacs is complete without talking about
        vi.  The <indexterm><primary>vim</primary></indexterm>
        <indexterm>
          <primary>Editors</primary>
          <secondary>vim</secondary>
        </indexterm>
        VIM (Vi IMproved) editor has the functionality of
        regular vi, but also has an SGML mode that will
        color-coordinate your screen to show where tags are.</para>
        <section id="usingvim">
          <title>Getting Started</title>
          <para>The vim program comes in many parts.  There is
          the plain vim program, which is compatibile with the
          vi program and its commands.  Red Hat users will want the vim-common
          and vim-minimal packages.  Next is the enhanced
          <command>vim</command>, which includes the highlighting and other
          features of vim over regular vi.  Red Hat
          users will want vim-enhanced.  Last, but certainly not least, is the
          X interface, which gives a graphical interface, menus, and mouse
          control.  To separate this from vim or vi, the command for graphical
          access is called <command>gvim</command>.</para>
        </section>
        <section>
          <title>Loading or starting new documents</title>
          <para>In both <command>vim</command> and <command>gvim</command> modes,
          <filename>.sgml</filename> files will be automatically recognized and
          enter into <quote>sgml mode</quote>.  A series of known DocBook tags
          have been entered into <command>vim</command> and will he highlighted
          in brown if a tag is known.  If it isn't, it will appear in light blue.
          attributes to known tags are in light blue, and values for the
          attributes are in pink. From here on, you can use regular <command>vi</command>
          commands to navigate and edit.</para>
          <para>
            While VIM has an XML mode, this mode will not highlight known
            and unknown DocBook tags.  You can still force VIM into
            SGML mode if you like using the <command>:set ft=sgml</command>
            command.  Note that this will not have any affect on the file
            or its contents, only the highlighting within VIM.
          </para>
        </section>
      </section>

      <section id="wordperfect">
        <title>WordPerfect 9 (Corel Office 2000)</title>
        <para><ulink
        url="http://www.corel.com/">http://www.corel.com/</ulink></para> 
        <para>WordPerfect 9 for the MS Windows platform has support
        for SGML and DocBook 3.0. WordPerfect 9 for Linux has no SGML
        capabilities.</para>
        <para>This is the least expensive of the commercial
        applications that support SGML.</para>
      </section>

      <section id="epcEdit">
        <title>epcEdit</title>
        <para><ulink
        url="http://www.tksgml.de/">http://www.tksgml.de/</ulink></para>
        <para>The <indexterm><primary>epcEdit</primary></indexterm>
        <indexterm>
          <primary>Editors</primary>
          <secondary>epcEdit</secondary>
        </indexterm>
        epcEdit program allows you to visually edit SGML
        files.  It has the advantages of not needing to know Emacs or
        vi before starting, and is cross-platform, working in both
        Windows and Linux.  This is a commercial application, and
        pricing can be found at
        <ulink url="http://www.tksgml.de/pricing.html">http://www.tksgml.de/pricing.html</ulink>
        </para>
        <para>Along with visual editing, epcEdit will also validate
        documents on loading, and on demand by using the <menuchoice
        moreinfo="none"><guimenu
        moreinfo="none">Document</guimenu><guimenuitem
        moreinfo="none">Validate</guimenuitem></menuchoice>
        command.</para> 

        <figure>
          <title>epcEdit screen shot</title>
          <mediaobject>
            <imageobject>
              <imagedata format="EPS" fileref="sgeditscreenshot.eps"/>
            </imageobject>
            <imageobject>
              <imagedata format="JPG" fileref="sgeditscreenshot.jpg"/>
            </imageobject>
            <textobject>
              <phrase>The screen shot of the epcEdit program shows a
              tree on the left side that has the SGML document in a
              hierarchy, while the right side shows the document.
              Tags are shown with a grey background.</phrase>
            </textobject>
          </mediaobject>
        </figure>  
      </section>

      <section id="nedit">
        <title>nedit</title>
        <para><ulink
        url="http://nedit.org">http://nedit.org</ulink></para> 
        <para>To be fair,
        <indexterm><primary>nedit</primary></indexterm>
        <indexterm>
          <primary>Editors</primary>
          <secondary>nedit</secondary>
        </indexterm>
        nedit is more
        for programmers, so it might seem a bit of overkill for new
        users and especially non-programmers.  All that aside, it's
        extremely powerful, allowing for color coding of tags.  Unlike
        epcEdit, nedit doesn't allow you to automatically insert tags
        or automatically validate your code.  However, it does allow
        for shell commands to be run against the contents of the
        window (as opposed to saving the file, then checking).  In a
        few minutes, I was able to set up <command>nsgmls</command> to
        validate the SGML and <command>aspell</command> to do my spell
        checking. 

        <figure>
            <title>nedit screen shot</title>
            <mediaobject>
              <imageobject>
                <imagedata fileref="neditscreenshot.eps" format="EPS"/>
              </imageobject>
              <imageobject>
                <imagedata fileref="neditscreenshot.jpg" format="JPG"/>
              </imageobject>
              <textobject>
                <phrase>The nedit program can provide line numbers
                across the left side of the screen, handy for when
                <command>nsgmls</command> complains of errors</phrase> 
              </textobject>
            </mediaobject>
          </figure>
        </para>
        <section id="usingnedit">
          <title>Using nedit</title>
                  <para>For writing new documentation, it is recommended that
        you download and use the LDP DocBook template.  Once you have
        the file, you can start up nedit and begin editing.  If the
        file is saved with a .sgml extension, nedit will load the file
        up with SGML/HTML tags enabled.  You can turn this on
        explicitly using the
        <menuchoice><guimenu>Preferences</guimenu><guimenuitem>Language
        Mode</guimenuitem><guimenuitem>SGML
        HTML</guimenuitem></menuchoice> command. </para> 
      </section> <!-- New Documents -->

      <section id="tipsandtricksnedit">
        <title>Tips and tricks with nedit</title>
        <para>Since you can feed the contents of your window to
        outside programs, you can easily extend nedit to perform
        repetitive functions.  The example you'll see here is to
        validate the SGML code using <command>nsgmls</command>.</para> 
        <para> Select
        <menuchoice><guimenu>Preferences</guimenu><guimenuitem>Default
        Settings</guimenuitem><guimenuitem>Customize
        Menus</guimenuitem><guimenuitem>Shell
        Menu...</guimenuitem></menuchoice>.  This will bring up the
        Shell Command dialog box, with all the shell commands  nedit
        has listed under the
        <menuchoice><guimenu>Shell</guimenu></menuchoice> menu.  Under
        Menu Entry, enter "SGML Validate".  This will be the entry
        you'll see on the screen.  Under Accelerator, press
        <keycombo><keycap>Alt</keycap><keycap>S</keycap></keycombo>.
        Once this menu item is set up, you can press
        <keycombo><keycap>Alt</keycap><keycap>S</keycap></keycombo>
        to have the SGML Validate automatically run.  Under Command
        Input, select window,  and under Command Output, select
        dialog.  Under Command to Execute, enter  nsgmls -sv.  Note
        that <command>nsgmls</command> has to be in your
        <envar>PATH</envar>  for this to work properly. </para> 

        <figure>
          <title>Adding shell commands to nedit</title>
          <mediaobject>
            <imageobject>
              <imagedata fileref="neditshellcommand.eps" format="EPS"/>
            </imageobject>
            <imageobject>
              <imagedata fileref="neditshellcommand.jpg" format="JPG"/>
            </imageobject>
          </mediaobject>
        </figure>

        <para> Click <guibutton>OK</guibutton> and you'll now be back
        at the main nedit screen.  Load up an SGML file, and select
        <menuchoice><guimenu>Shell</guimenu><guimenuitem>SGML
        Validate</guimenuitem></menuchoice> or press
        <keycombo><keycap>Alt</keycap><keycap>S</keycap></keycombo>.
        The <command>nedit</command> program will fire up and check
        the contents of the window.  The reason for using -sv is that
        the -v tells <command>nsgmls</command> to output the version
        of the program, so you'll always get output and know that
        <command>nsgmls</command> has run.  If all you get is a
        version number, then there are no errors with the document.
        If there are errors, then they'll be listed in the separate
        window for you to see.  If you have line numbers turned on
        (using
        <menuchoice><guimenu>Preferences</guimenu><guimenuitem>Show
        Line Numbers</guimenuitem></menuchoice>) then finding the
        errors is much simpler, as <command>nsgmls</command> will list
        errors by their line number.</para> 

        <figure>
          <title>nsgmls output on success</title>
          <mediaobject>
            <imageobject>
              <imagedata fileref="neditsuccess.eps" format="EPS"/>
            </imageobject>
            <imageobject>
              <imagedata fileref="neditsuccess.jpg" format="JPG"/>
            </imageobject>
            <textobject>
              <phrase>If nsgmls reports success, it merely reports the version of nsgmls</phrase>
            </textobject>
          </mediaobject>
        </figure>
      </section>
    </section>

    <section id="morphoneditor">
      <title>Morphon XML editor</title>
      <para> <ulink url="http://www.morphon.com/xmleditor/index.shtml">http://www.morphon.com/xmleditor/index.shtml</ulink></para>
      <para>This is a commerical application that has a free 30 day
      license available for download.  It is written in Java, allowing
      it to run on any platform that has a JVM (that is, works in both
      Windows and Linux).  The cost is $150USD for a single user
      license, and $75USD for a student license.</para>
      <para>On the plus sides of XMLEditor is the left side of the
      screen shows the heirarchy of the document (starting with Book
      and so on).  Selecting an item in the list brings you to that
      part of the document so you can edit it.  The right part of the
      screen shows the text without any markup or tags being shown.
      If you have external files as ELEMENTS (as the LDP Author Guide
      does), XMLEditor will follow the links and load the files, so
      you always work on the entire work.  On the minus side of this,
      you will get errors if a file (like index.xml) is
      missing.</para>
    </section>
    </section>
  </chapter>
