<!-- 
	<!DOCTYPE book PUBLIC '-//OASIS//DTD DocBook XML V4.2//EN'>
-->
<!-- 
This section is now a set of commands (only) and is moved to
an appendix. The original "intro" has been moved to the 
writing section.
-->

	<section id="usingcvs">
	<title>Using CVS</title>
	<para>
		There are a number of documents that can help you get up and
		running with CVS. The <ulink
		url="http://tldp.org/HOWTO/CVS-RCS-HOWTO.html">CVS-RCS-HOWTO Document for Linux (Source Code
		Control System)</ulink> gives an overview of <ulink
		url="http://tldp.org/HOWTO/CVS-RCS-HOWTO-4.html">CVS
		Commands</ulink>. 
		If you need a CVS account or want
		help configuring CVS please read <xref
		linkend="cvs-brief"/>
	</para>

	<variablelist>
        <title>CVS Commands: a brief reminder</title>

        <varlistentry>
        <term>$Id&dollar;</term>
        <listitem><para>
			Automatically insert the date and version directly into the
			document when a document is committed. e.g. $Id: cvs.xml,v 1.9
			2002/04/21 09:44:26 serek Exp $
        </para></listitem>
        </varlistentry>


        <varlistentry>
        <term>commit</term>
        <listitem><para>
			This option will upload your changes to the CVS server. If you
			want to bypass the editor screen you can use 
			<command>
				cvs <option>commit</option> <option>-m &quot;comment&quot;</option>
			</command>.</para>
		
		<note><para>You must still email <email>submit@en.tldp.org</email> 
			when you are ready to have your changes
			appear on the live site. Your email should include the relative
			path to the file(s) in the LDP CVS tree that you wish to
			update.
        </para></note>
		
		</listitem>
        </varlistentry>

        <varlistentry>
        <term>add</term>
        <listitem><para>
		You can add new files to your CVS repository. These may be image
		files or additional XML files. First check that your HOWTO is in
		its own directory.           You may want to coordinate with the
		people at <email>submit@en.tldp.org</email> to ensure you can
		add graphics or other files to your HOWTO.
		</para>
		
		<para>
			Copy the files you want to add into your local CVS repository
			(where all of your downloaded/working files are). Then: 
		<command>cvs add <replaceable>filename</replaceable></command>.
			After you've added the files, you still need to commit them to the
			repository (see above).
        </para>
		
		<para>
		If you need to replace an old file name with a new one, you
		still need to use the add command. First remove the copy of the
		file from your local disk. Then remove it from the CVS tree with:
		<command>cvs remove <replaceable>filename</replaceable></command>.
		As with the add command, you need to <quote>commit</quote> your
		removed file. Finally, now that the old file has been removed, add
		your new file using the instructions above (first add and then
		commit the additional file).
		</para>
		</listitem>
        </varlistentry>
	</variablelist>
	</section>
	
      <section id="recovery">
        <title>Recovering old versions</title>
        <para>
          There you are, typing away, when you screw up.  Real bad.
          Doesn't matter what it is, but suffice it to say that you've
          toasted not only the version on your local drive, but
          created a new version on the CVS server.  What you need
          to do is go back in time and resurrect and older
          version of your file.
        </para>
        <para>
          To do this, you'll need to know the version number of the
          file you want to retrieve. <command>cvs diff</command>
          will give a list of revisions if there are differences.  You
          can pick the revision number, subtract one, and that is
          probably the revision you want to look at.
        </para>
        <para>
          The command <command>cvs -Q update -p -r <replaceable>revision</replaceable></command>
          <replaceable>filename</replaceable> will output to stdout
          the contents of the <replaceable>revision</replaceable> version
          of <replaceable>filename</replaceable>.  You can pipe it to
          <command>more</command> or redirect the output to a file.
          Conveniently, you can redirect stdout to a file called
          <replaceable>filename</replaceable>.  Your local file
          is now the revision you want, and <command>cvs update
          </command> will update the CVS server with the new (old)
          version of <replaceable>filename</replaceable>.
        </para>
  </section>
  </section> <!-- cvs -->
